// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for miniaudio
class miniaudio_dart_wrapper {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  miniaudio_dart_wrapper(ffi.DynamicLibrary dynamicLibrary)
      : _dylib = dynamicLibrary;

  int sched_yield() {
    _sched_yield ??=
        _dylib.lookupFunction<_c_sched_yield, _dart_sched_yield>('sched_yield');
    return _sched_yield();
  }

  _dart_sched_yield _sched_yield;

  int sched_get_priority_min(
    int arg0,
  ) {
    _sched_get_priority_min ??= _dylib.lookupFunction<_c_sched_get_priority_min,
        _dart_sched_get_priority_min>('sched_get_priority_min');
    return _sched_get_priority_min(
      arg0,
    );
  }

  _dart_sched_get_priority_min _sched_get_priority_min;

  int sched_get_priority_max(
    int arg0,
  ) {
    _sched_get_priority_max ??= _dylib.lookupFunction<_c_sched_get_priority_max,
        _dart_sched_get_priority_max>('sched_get_priority_max');
    return _sched_get_priority_max(
      arg0,
    );
  }

  _dart_sched_get_priority_max _sched_get_priority_max;

  ffi.Pointer<ffi.Int8> asctime(
    ffi.Pointer<tm> arg0,
  ) {
    _asctime ??= _dylib.lookupFunction<_c_asctime, _dart_asctime>('asctime');
    return _asctime(
      arg0,
    );
  }

  _dart_asctime _asctime;

  int clock() {
    _clock ??= _dylib.lookupFunction<_c_clock, _dart_clock>('clock');
    return _clock();
  }

  _dart_clock _clock;

  ffi.Pointer<ffi.Int8> ctime(
    ffi.Pointer<ffi.Int64> arg0,
  ) {
    _ctime ??= _dylib.lookupFunction<_c_ctime, _dart_ctime>('ctime');
    return _ctime(
      arg0,
    );
  }

  _dart_ctime _ctime;

  double difftime(
    int arg0,
    int arg1,
  ) {
    _difftime ??=
        _dylib.lookupFunction<_c_difftime, _dart_difftime>('difftime');
    return _difftime(
      arg0,
      arg1,
    );
  }

  _dart_difftime _difftime;

  ffi.Pointer<tm> getdate(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _getdate ??= _dylib.lookupFunction<_c_getdate, _dart_getdate>('getdate');
    return _getdate(
      arg0,
    );
  }

  _dart_getdate _getdate;

  ffi.Pointer<tm> gmtime(
    ffi.Pointer<ffi.Int64> arg0,
  ) {
    _gmtime ??= _dylib.lookupFunction<_c_gmtime, _dart_gmtime>('gmtime');
    return _gmtime(
      arg0,
    );
  }

  _dart_gmtime _gmtime;

  ffi.Pointer<tm> localtime(
    ffi.Pointer<ffi.Int64> arg0,
  ) {
    _localtime ??=
        _dylib.lookupFunction<_c_localtime, _dart_localtime>('localtime');
    return _localtime(
      arg0,
    );
  }

  _dart_localtime _localtime;

  int mktime(
    ffi.Pointer<tm> arg0,
  ) {
    _mktime ??= _dylib.lookupFunction<_c_mktime, _dart_mktime>('mktime');
    return _mktime(
      arg0,
    );
  }

  _dart_mktime _mktime;

  int strftime(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<tm> arg3,
  ) {
    _strftime ??=
        _dylib.lookupFunction<_c_strftime, _dart_strftime>('strftime');
    return _strftime(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_strftime _strftime;

  ffi.Pointer<ffi.Int8> strptime(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<tm> arg2,
  ) {
    _strptime ??=
        _dylib.lookupFunction<_c_strptime, _dart_strptime>('strptime');
    return _strptime(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_strptime _strptime;

  int time(
    ffi.Pointer<ffi.Int64> arg0,
  ) {
    _time ??= _dylib.lookupFunction<_c_time, _dart_time>('time');
    return _time(
      arg0,
    );
  }

  _dart_time _time;

  void tzset() {
    _tzset ??= _dylib.lookupFunction<_c_tzset, _dart_tzset>('tzset');
    return _tzset();
  }

  _dart_tzset _tzset;

  ffi.Pointer<ffi.Int8> asctime_r(
    ffi.Pointer<tm> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _asctime_r ??=
        _dylib.lookupFunction<_c_asctime_r, _dart_asctime_r>('asctime_r');
    return _asctime_r(
      arg0,
      arg1,
    );
  }

  _dart_asctime_r _asctime_r;

  ffi.Pointer<ffi.Int8> ctime_r(
    ffi.Pointer<ffi.Int64> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _ctime_r ??= _dylib.lookupFunction<_c_ctime_r, _dart_ctime_r>('ctime_r');
    return _ctime_r(
      arg0,
      arg1,
    );
  }

  _dart_ctime_r _ctime_r;

  ffi.Pointer<tm> gmtime_r(
    ffi.Pointer<ffi.Int64> arg0,
    ffi.Pointer<tm> arg1,
  ) {
    _gmtime_r ??=
        _dylib.lookupFunction<_c_gmtime_r, _dart_gmtime_r>('gmtime_r');
    return _gmtime_r(
      arg0,
      arg1,
    );
  }

  _dart_gmtime_r _gmtime_r;

  ffi.Pointer<tm> localtime_r(
    ffi.Pointer<ffi.Int64> arg0,
    ffi.Pointer<tm> arg1,
  ) {
    _localtime_r ??=
        _dylib.lookupFunction<_c_localtime_r, _dart_localtime_r>('localtime_r');
    return _localtime_r(
      arg0,
      arg1,
    );
  }

  _dart_localtime_r _localtime_r;

  int posix2time(
    int arg0,
  ) {
    _posix2time ??=
        _dylib.lookupFunction<_c_posix2time, _dart_posix2time>('posix2time');
    return _posix2time(
      arg0,
    );
  }

  _dart_posix2time _posix2time;

  void tzsetwall() {
    _tzsetwall ??=
        _dylib.lookupFunction<_c_tzsetwall, _dart_tzsetwall>('tzsetwall');
    return _tzsetwall();
  }

  _dart_tzsetwall _tzsetwall;

  int time2posix(
    int arg0,
  ) {
    _time2posix ??=
        _dylib.lookupFunction<_c_time2posix, _dart_time2posix>('time2posix');
    return _time2posix(
      arg0,
    );
  }

  _dart_time2posix _time2posix;

  int timelocal(
    ffi.Pointer<tm> arg0,
  ) {
    _timelocal ??=
        _dylib.lookupFunction<_c_timelocal, _dart_timelocal>('timelocal');
    return _timelocal(
      arg0,
    );
  }

  _dart_timelocal _timelocal;

  int timegm(
    ffi.Pointer<tm> arg0,
  ) {
    _timegm ??= _dylib.lookupFunction<_c_timegm, _dart_timegm>('timegm');
    return _timegm(
      arg0,
    );
  }

  _dart_timegm _timegm;

  int nanosleep(
    ffi.Pointer<timespec> __rqtp,
    ffi.Pointer<timespec> __rmtp,
  ) {
    _nanosleep ??=
        _dylib.lookupFunction<_c_nanosleep, _dart_nanosleep>('nanosleep');
    return _nanosleep(
      __rqtp,
      __rmtp,
    );
  }

  _dart_nanosleep _nanosleep;

  int clock_getres(
    int __clock_id,
    ffi.Pointer<timespec> __res,
  ) {
    _clock_getres ??= _dylib
        .lookupFunction<_c_clock_getres, _dart_clock_getres>('clock_getres');
    return _clock_getres(
      __clock_id,
      __res,
    );
  }

  _dart_clock_getres _clock_getres;

  int clock_gettime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    _clock_gettime ??= _dylib
        .lookupFunction<_c_clock_gettime, _dart_clock_gettime>('clock_gettime');
    return _clock_gettime(
      __clock_id,
      __tp,
    );
  }

  _dart_clock_gettime _clock_gettime;

  int clock_gettime_nsec_np(
    int __clock_id,
  ) {
    _clock_gettime_nsec_np ??= _dylib.lookupFunction<_c_clock_gettime_nsec_np,
        _dart_clock_gettime_nsec_np>('clock_gettime_nsec_np');
    return _clock_gettime_nsec_np(
      __clock_id,
    );
  }

  _dart_clock_gettime_nsec_np _clock_gettime_nsec_np;

  int clock_settime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    _clock_settime ??= _dylib
        .lookupFunction<_c_clock_settime, _dart_clock_settime>('clock_settime');
    return _clock_settime(
      __clock_id,
      __tp,
    );
  }

  _dart_clock_settime _clock_settime;

  int timespec_get(
    ffi.Pointer<timespec> ts,
    int base,
  ) {
    _timespec_get ??= _dylib
        .lookupFunction<_c_timespec_get, _dart_timespec_get>('timespec_get');
    return _timespec_get(
      ts,
      base,
    );
  }

  _dart_timespec_get _timespec_get;

  int qos_class_self() {
    _qos_class_self ??=
        _dylib.lookupFunction<_c_qos_class_self, _dart_qos_class_self>(
            'qos_class_self');
    return _qos_class_self();
  }

  _dart_qos_class_self _qos_class_self;

  int qos_class_main() {
    _qos_class_main ??=
        _dylib.lookupFunction<_c_qos_class_main, _dart_qos_class_main>(
            'qos_class_main');
    return _qos_class_main();
  }

  _dart_qos_class_main _qos_class_main;

  int pthread_attr_set_qos_class_np(
    ffi.Pointer<_opaque_pthread_attr_t> __attr,
    int __qos_class,
    int __relative_priority,
  ) {
    _pthread_attr_set_qos_class_np ??= _dylib.lookupFunction<
        _c_pthread_attr_set_qos_class_np,
        _dart_pthread_attr_set_qos_class_np>('pthread_attr_set_qos_class_np');
    return _pthread_attr_set_qos_class_np(
      __attr,
      __qos_class,
      __relative_priority,
    );
  }

  _dart_pthread_attr_set_qos_class_np _pthread_attr_set_qos_class_np;

  int pthread_attr_get_qos_class_np(
    ffi.Pointer<_opaque_pthread_attr_t> __attr,
    ffi.Pointer<ffi.Uint32> __qos_class,
    ffi.Pointer<ffi.Int32> __relative_priority,
  ) {
    _pthread_attr_get_qos_class_np ??= _dylib.lookupFunction<
        _c_pthread_attr_get_qos_class_np,
        _dart_pthread_attr_get_qos_class_np>('pthread_attr_get_qos_class_np');
    return _pthread_attr_get_qos_class_np(
      __attr,
      __qos_class,
      __relative_priority,
    );
  }

  _dart_pthread_attr_get_qos_class_np _pthread_attr_get_qos_class_np;

  int pthread_set_qos_class_self_np(
    int __qos_class,
    int __relative_priority,
  ) {
    _pthread_set_qos_class_self_np ??= _dylib.lookupFunction<
        _c_pthread_set_qos_class_self_np,
        _dart_pthread_set_qos_class_self_np>('pthread_set_qos_class_self_np');
    return _pthread_set_qos_class_self_np(
      __qos_class,
      __relative_priority,
    );
  }

  _dart_pthread_set_qos_class_self_np _pthread_set_qos_class_self_np;

  int pthread_get_qos_class_np(
    ffi.Pointer<_opaque_pthread_t> __pthread,
    ffi.Pointer<ffi.Uint32> __qos_class,
    ffi.Pointer<ffi.Int32> __relative_priority,
  ) {
    _pthread_get_qos_class_np ??= _dylib.lookupFunction<
        _c_pthread_get_qos_class_np,
        _dart_pthread_get_qos_class_np>('pthread_get_qos_class_np');
    return _pthread_get_qos_class_np(
      __pthread,
      __qos_class,
      __relative_priority,
    );
  }

  _dart_pthread_get_qos_class_np _pthread_get_qos_class_np;

  ffi.Pointer<pthread_override_s> pthread_override_qos_class_start_np(
    ffi.Pointer<_opaque_pthread_t> __pthread,
    int __qos_class,
    int __relative_priority,
  ) {
    _pthread_override_qos_class_start_np ??= _dylib.lookupFunction<
            _c_pthread_override_qos_class_start_np,
            _dart_pthread_override_qos_class_start_np>(
        'pthread_override_qos_class_start_np');
    return _pthread_override_qos_class_start_np(
      __pthread,
      __qos_class,
      __relative_priority,
    );
  }

  _dart_pthread_override_qos_class_start_np
      _pthread_override_qos_class_start_np;

  int pthread_override_qos_class_end_np(
    ffi.Pointer<pthread_override_s> __override,
  ) {
    _pthread_override_qos_class_end_np ??= _dylib.lookupFunction<
            _c_pthread_override_qos_class_end_np,
            _dart_pthread_override_qos_class_end_np>(
        'pthread_override_qos_class_end_np');
    return _pthread_override_qos_class_end_np(
      __override,
    );
  }

  _dart_pthread_override_qos_class_end_np _pthread_override_qos_class_end_np;

  int pthread_atfork(
    ffi.Pointer<ffi.NativeFunction<_typedefC_2>> arg0,
    ffi.Pointer<ffi.NativeFunction<_typedefC_3>> arg1,
    ffi.Pointer<ffi.NativeFunction<_typedefC_4>> arg2,
  ) {
    _pthread_atfork ??=
        _dylib.lookupFunction<_c_pthread_atfork, _dart_pthread_atfork>(
            'pthread_atfork');
    return _pthread_atfork(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_pthread_atfork _pthread_atfork;

  int pthread_attr_destroy(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ) {
    _pthread_attr_destroy ??= _dylib.lookupFunction<_c_pthread_attr_destroy,
        _dart_pthread_attr_destroy>('pthread_attr_destroy');
    return _pthread_attr_destroy(
      arg0,
    );
  }

  _dart_pthread_attr_destroy _pthread_attr_destroy;

  int pthread_attr_getdetachstate(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_attr_getdetachstate ??= _dylib.lookupFunction<
        _c_pthread_attr_getdetachstate,
        _dart_pthread_attr_getdetachstate>('pthread_attr_getdetachstate');
    return _pthread_attr_getdetachstate(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_getdetachstate _pthread_attr_getdetachstate;

  int pthread_attr_getguardsize(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    ffi.Pointer<ffi.Uint64> arg1,
  ) {
    _pthread_attr_getguardsize ??= _dylib.lookupFunction<
        _c_pthread_attr_getguardsize,
        _dart_pthread_attr_getguardsize>('pthread_attr_getguardsize');
    return _pthread_attr_getguardsize(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_getguardsize _pthread_attr_getguardsize;

  int pthread_attr_getinheritsched(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_attr_getinheritsched ??= _dylib.lookupFunction<
        _c_pthread_attr_getinheritsched,
        _dart_pthread_attr_getinheritsched>('pthread_attr_getinheritsched');
    return _pthread_attr_getinheritsched(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_getinheritsched _pthread_attr_getinheritsched;

  int pthread_attr_getschedparam(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    ffi.Pointer<sched_param> arg1,
  ) {
    _pthread_attr_getschedparam ??= _dylib.lookupFunction<
        _c_pthread_attr_getschedparam,
        _dart_pthread_attr_getschedparam>('pthread_attr_getschedparam');
    return _pthread_attr_getschedparam(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_getschedparam _pthread_attr_getschedparam;

  int pthread_attr_getschedpolicy(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_attr_getschedpolicy ??= _dylib.lookupFunction<
        _c_pthread_attr_getschedpolicy,
        _dart_pthread_attr_getschedpolicy>('pthread_attr_getschedpolicy');
    return _pthread_attr_getschedpolicy(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_getschedpolicy _pthread_attr_getschedpolicy;

  int pthread_attr_getscope(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_attr_getscope ??= _dylib.lookupFunction<_c_pthread_attr_getscope,
        _dart_pthread_attr_getscope>('pthread_attr_getscope');
    return _pthread_attr_getscope(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_getscope _pthread_attr_getscope;

  int pthread_attr_getstack(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
    ffi.Pointer<ffi.Uint64> arg2,
  ) {
    _pthread_attr_getstack ??= _dylib.lookupFunction<_c_pthread_attr_getstack,
        _dart_pthread_attr_getstack>('pthread_attr_getstack');
    return _pthread_attr_getstack(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_pthread_attr_getstack _pthread_attr_getstack;

  int pthread_attr_getstackaddr(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
  ) {
    _pthread_attr_getstackaddr ??= _dylib.lookupFunction<
        _c_pthread_attr_getstackaddr,
        _dart_pthread_attr_getstackaddr>('pthread_attr_getstackaddr');
    return _pthread_attr_getstackaddr(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_getstackaddr _pthread_attr_getstackaddr;

  int pthread_attr_getstacksize(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    ffi.Pointer<ffi.Uint64> arg1,
  ) {
    _pthread_attr_getstacksize ??= _dylib.lookupFunction<
        _c_pthread_attr_getstacksize,
        _dart_pthread_attr_getstacksize>('pthread_attr_getstacksize');
    return _pthread_attr_getstacksize(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_getstacksize _pthread_attr_getstacksize;

  int pthread_attr_init(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ) {
    _pthread_attr_init ??=
        _dylib.lookupFunction<_c_pthread_attr_init, _dart_pthread_attr_init>(
            'pthread_attr_init');
    return _pthread_attr_init(
      arg0,
    );
  }

  _dart_pthread_attr_init _pthread_attr_init;

  int pthread_attr_setdetachstate(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    int arg1,
  ) {
    _pthread_attr_setdetachstate ??= _dylib.lookupFunction<
        _c_pthread_attr_setdetachstate,
        _dart_pthread_attr_setdetachstate>('pthread_attr_setdetachstate');
    return _pthread_attr_setdetachstate(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_setdetachstate _pthread_attr_setdetachstate;

  int pthread_attr_setguardsize(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    int arg1,
  ) {
    _pthread_attr_setguardsize ??= _dylib.lookupFunction<
        _c_pthread_attr_setguardsize,
        _dart_pthread_attr_setguardsize>('pthread_attr_setguardsize');
    return _pthread_attr_setguardsize(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_setguardsize _pthread_attr_setguardsize;

  int pthread_attr_setinheritsched(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    int arg1,
  ) {
    _pthread_attr_setinheritsched ??= _dylib.lookupFunction<
        _c_pthread_attr_setinheritsched,
        _dart_pthread_attr_setinheritsched>('pthread_attr_setinheritsched');
    return _pthread_attr_setinheritsched(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_setinheritsched _pthread_attr_setinheritsched;

  int pthread_attr_setschedparam(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    ffi.Pointer<sched_param> arg1,
  ) {
    _pthread_attr_setschedparam ??= _dylib.lookupFunction<
        _c_pthread_attr_setschedparam,
        _dart_pthread_attr_setschedparam>('pthread_attr_setschedparam');
    return _pthread_attr_setschedparam(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_setschedparam _pthread_attr_setschedparam;

  int pthread_attr_setschedpolicy(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    int arg1,
  ) {
    _pthread_attr_setschedpolicy ??= _dylib.lookupFunction<
        _c_pthread_attr_setschedpolicy,
        _dart_pthread_attr_setschedpolicy>('pthread_attr_setschedpolicy');
    return _pthread_attr_setschedpolicy(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_setschedpolicy _pthread_attr_setschedpolicy;

  int pthread_attr_setscope(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    int arg1,
  ) {
    _pthread_attr_setscope ??= _dylib.lookupFunction<_c_pthread_attr_setscope,
        _dart_pthread_attr_setscope>('pthread_attr_setscope');
    return _pthread_attr_setscope(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_setscope _pthread_attr_setscope;

  int pthread_attr_setstack(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    _pthread_attr_setstack ??= _dylib.lookupFunction<_c_pthread_attr_setstack,
        _dart_pthread_attr_setstack>('pthread_attr_setstack');
    return _pthread_attr_setstack(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_pthread_attr_setstack _pthread_attr_setstack;

  int pthread_attr_setstackaddr(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    _pthread_attr_setstackaddr ??= _dylib.lookupFunction<
        _c_pthread_attr_setstackaddr,
        _dart_pthread_attr_setstackaddr>('pthread_attr_setstackaddr');
    return _pthread_attr_setstackaddr(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_setstackaddr _pthread_attr_setstackaddr;

  int pthread_attr_setstacksize(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    int arg1,
  ) {
    _pthread_attr_setstacksize ??= _dylib.lookupFunction<
        _c_pthread_attr_setstacksize,
        _dart_pthread_attr_setstacksize>('pthread_attr_setstacksize');
    return _pthread_attr_setstacksize(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_setstacksize _pthread_attr_setstacksize;

  int pthread_cancel(
    ffi.Pointer<_opaque_pthread_t> arg0,
  ) {
    _pthread_cancel ??=
        _dylib.lookupFunction<_c_pthread_cancel, _dart_pthread_cancel>(
            'pthread_cancel');
    return _pthread_cancel(
      arg0,
    );
  }

  _dart_pthread_cancel _pthread_cancel;

  int pthread_cond_broadcast(
    ffi.Pointer<_opaque_pthread_cond_t> arg0,
  ) {
    _pthread_cond_broadcast ??= _dylib.lookupFunction<_c_pthread_cond_broadcast,
        _dart_pthread_cond_broadcast>('pthread_cond_broadcast');
    return _pthread_cond_broadcast(
      arg0,
    );
  }

  _dart_pthread_cond_broadcast _pthread_cond_broadcast;

  int pthread_cond_destroy(
    ffi.Pointer<_opaque_pthread_cond_t> arg0,
  ) {
    _pthread_cond_destroy ??= _dylib.lookupFunction<_c_pthread_cond_destroy,
        _dart_pthread_cond_destroy>('pthread_cond_destroy');
    return _pthread_cond_destroy(
      arg0,
    );
  }

  _dart_pthread_cond_destroy _pthread_cond_destroy;

  int pthread_cond_init(
    ffi.Pointer<_opaque_pthread_cond_t> arg0,
    ffi.Pointer<_opaque_pthread_condattr_t> arg1,
  ) {
    _pthread_cond_init ??=
        _dylib.lookupFunction<_c_pthread_cond_init, _dart_pthread_cond_init>(
            'pthread_cond_init');
    return _pthread_cond_init(
      arg0,
      arg1,
    );
  }

  _dart_pthread_cond_init _pthread_cond_init;

  int pthread_cond_signal(
    ffi.Pointer<_opaque_pthread_cond_t> arg0,
  ) {
    _pthread_cond_signal ??= _dylib.lookupFunction<_c_pthread_cond_signal,
        _dart_pthread_cond_signal>('pthread_cond_signal');
    return _pthread_cond_signal(
      arg0,
    );
  }

  _dart_pthread_cond_signal _pthread_cond_signal;

  int pthread_cond_timedwait(
    ffi.Pointer<_opaque_pthread_cond_t> arg0,
    ffi.Pointer<_opaque_pthread_mutex_t> arg1,
    ffi.Pointer<timespec> arg2,
  ) {
    _pthread_cond_timedwait ??= _dylib.lookupFunction<_c_pthread_cond_timedwait,
        _dart_pthread_cond_timedwait>('pthread_cond_timedwait');
    return _pthread_cond_timedwait(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_pthread_cond_timedwait _pthread_cond_timedwait;

  int pthread_cond_wait(
    ffi.Pointer<_opaque_pthread_cond_t> arg0,
    ffi.Pointer<_opaque_pthread_mutex_t> arg1,
  ) {
    _pthread_cond_wait ??=
        _dylib.lookupFunction<_c_pthread_cond_wait, _dart_pthread_cond_wait>(
            'pthread_cond_wait');
    return _pthread_cond_wait(
      arg0,
      arg1,
    );
  }

  _dart_pthread_cond_wait _pthread_cond_wait;

  int pthread_condattr_destroy(
    ffi.Pointer<_opaque_pthread_condattr_t> arg0,
  ) {
    _pthread_condattr_destroy ??= _dylib.lookupFunction<
        _c_pthread_condattr_destroy,
        _dart_pthread_condattr_destroy>('pthread_condattr_destroy');
    return _pthread_condattr_destroy(
      arg0,
    );
  }

  _dart_pthread_condattr_destroy _pthread_condattr_destroy;

  int pthread_condattr_init(
    ffi.Pointer<_opaque_pthread_condattr_t> arg0,
  ) {
    _pthread_condattr_init ??= _dylib.lookupFunction<_c_pthread_condattr_init,
        _dart_pthread_condattr_init>('pthread_condattr_init');
    return _pthread_condattr_init(
      arg0,
    );
  }

  _dart_pthread_condattr_init _pthread_condattr_init;

  int pthread_condattr_getpshared(
    ffi.Pointer<_opaque_pthread_condattr_t> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_condattr_getpshared ??= _dylib.lookupFunction<
        _c_pthread_condattr_getpshared,
        _dart_pthread_condattr_getpshared>('pthread_condattr_getpshared');
    return _pthread_condattr_getpshared(
      arg0,
      arg1,
    );
  }

  _dart_pthread_condattr_getpshared _pthread_condattr_getpshared;

  int pthread_condattr_setpshared(
    ffi.Pointer<_opaque_pthread_condattr_t> arg0,
    int arg1,
  ) {
    _pthread_condattr_setpshared ??= _dylib.lookupFunction<
        _c_pthread_condattr_setpshared,
        _dart_pthread_condattr_setpshared>('pthread_condattr_setpshared');
    return _pthread_condattr_setpshared(
      arg0,
      arg1,
    );
  }

  _dart_pthread_condattr_setpshared _pthread_condattr_setpshared;

  int pthread_create(
    ffi.Pointer<ffi.Pointer<_opaque_pthread_t>> arg0,
    ffi.Pointer<_opaque_pthread_attr_t> arg1,
    ffi.Pointer<ffi.NativeFunction<_typedefC_5>> arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    _pthread_create ??=
        _dylib.lookupFunction<_c_pthread_create, _dart_pthread_create>(
            'pthread_create');
    return _pthread_create(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_pthread_create _pthread_create;

  int pthread_detach(
    ffi.Pointer<_opaque_pthread_t> arg0,
  ) {
    _pthread_detach ??=
        _dylib.lookupFunction<_c_pthread_detach, _dart_pthread_detach>(
            'pthread_detach');
    return _pthread_detach(
      arg0,
    );
  }

  _dart_pthread_detach _pthread_detach;

  int pthread_equal(
    ffi.Pointer<_opaque_pthread_t> arg0,
    ffi.Pointer<_opaque_pthread_t> arg1,
  ) {
    _pthread_equal ??= _dylib
        .lookupFunction<_c_pthread_equal, _dart_pthread_equal>('pthread_equal');
    return _pthread_equal(
      arg0,
      arg1,
    );
  }

  _dart_pthread_equal _pthread_equal;

  void pthread_exit(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _pthread_exit ??= _dylib
        .lookupFunction<_c_pthread_exit, _dart_pthread_exit>('pthread_exit');
    return _pthread_exit(
      arg0,
    );
  }

  _dart_pthread_exit _pthread_exit;

  int pthread_getconcurrency() {
    _pthread_getconcurrency ??= _dylib.lookupFunction<_c_pthread_getconcurrency,
        _dart_pthread_getconcurrency>('pthread_getconcurrency');
    return _pthread_getconcurrency();
  }

  _dart_pthread_getconcurrency _pthread_getconcurrency;

  int pthread_getschedparam(
    ffi.Pointer<_opaque_pthread_t> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    ffi.Pointer<sched_param> arg2,
  ) {
    _pthread_getschedparam ??= _dylib.lookupFunction<_c_pthread_getschedparam,
        _dart_pthread_getschedparam>('pthread_getschedparam');
    return _pthread_getschedparam(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_pthread_getschedparam _pthread_getschedparam;

  ffi.Pointer<ffi.Void> pthread_getspecific(
    int arg0,
  ) {
    _pthread_getspecific ??= _dylib.lookupFunction<_c_pthread_getspecific,
        _dart_pthread_getspecific>('pthread_getspecific');
    return _pthread_getspecific(
      arg0,
    );
  }

  _dart_pthread_getspecific _pthread_getspecific;

  int pthread_join(
    ffi.Pointer<_opaque_pthread_t> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
  ) {
    _pthread_join ??= _dylib
        .lookupFunction<_c_pthread_join, _dart_pthread_join>('pthread_join');
    return _pthread_join(
      arg0,
      arg1,
    );
  }

  _dart_pthread_join _pthread_join;

  int pthread_key_create(
    ffi.Pointer<ffi.Uint64> arg0,
    ffi.Pointer<ffi.NativeFunction<_typedefC_6>> arg1,
  ) {
    _pthread_key_create ??=
        _dylib.lookupFunction<_c_pthread_key_create, _dart_pthread_key_create>(
            'pthread_key_create');
    return _pthread_key_create(
      arg0,
      arg1,
    );
  }

  _dart_pthread_key_create _pthread_key_create;

  int pthread_key_delete(
    int arg0,
  ) {
    _pthread_key_delete ??=
        _dylib.lookupFunction<_c_pthread_key_delete, _dart_pthread_key_delete>(
            'pthread_key_delete');
    return _pthread_key_delete(
      arg0,
    );
  }

  _dart_pthread_key_delete _pthread_key_delete;

  int pthread_mutex_destroy(
    ffi.Pointer<_opaque_pthread_mutex_t> arg0,
  ) {
    _pthread_mutex_destroy ??= _dylib.lookupFunction<_c_pthread_mutex_destroy,
        _dart_pthread_mutex_destroy>('pthread_mutex_destroy');
    return _pthread_mutex_destroy(
      arg0,
    );
  }

  _dart_pthread_mutex_destroy _pthread_mutex_destroy;

  int pthread_mutex_getprioceiling(
    ffi.Pointer<_opaque_pthread_mutex_t> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_mutex_getprioceiling ??= _dylib.lookupFunction<
        _c_pthread_mutex_getprioceiling,
        _dart_pthread_mutex_getprioceiling>('pthread_mutex_getprioceiling');
    return _pthread_mutex_getprioceiling(
      arg0,
      arg1,
    );
  }

  _dart_pthread_mutex_getprioceiling _pthread_mutex_getprioceiling;

  int pthread_mutex_init(
    ffi.Pointer<_opaque_pthread_mutex_t> arg0,
    ffi.Pointer<_opaque_pthread_mutexattr_t> arg1,
  ) {
    _pthread_mutex_init ??=
        _dylib.lookupFunction<_c_pthread_mutex_init, _dart_pthread_mutex_init>(
            'pthread_mutex_init');
    return _pthread_mutex_init(
      arg0,
      arg1,
    );
  }

  _dart_pthread_mutex_init _pthread_mutex_init;

  int pthread_mutex_lock(
    ffi.Pointer<_opaque_pthread_mutex_t> arg0,
  ) {
    _pthread_mutex_lock ??=
        _dylib.lookupFunction<_c_pthread_mutex_lock, _dart_pthread_mutex_lock>(
            'pthread_mutex_lock');
    return _pthread_mutex_lock(
      arg0,
    );
  }

  _dart_pthread_mutex_lock _pthread_mutex_lock;

  int pthread_mutex_setprioceiling(
    ffi.Pointer<_opaque_pthread_mutex_t> arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
  ) {
    _pthread_mutex_setprioceiling ??= _dylib.lookupFunction<
        _c_pthread_mutex_setprioceiling,
        _dart_pthread_mutex_setprioceiling>('pthread_mutex_setprioceiling');
    return _pthread_mutex_setprioceiling(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_pthread_mutex_setprioceiling _pthread_mutex_setprioceiling;

  int pthread_mutex_trylock(
    ffi.Pointer<_opaque_pthread_mutex_t> arg0,
  ) {
    _pthread_mutex_trylock ??= _dylib.lookupFunction<_c_pthread_mutex_trylock,
        _dart_pthread_mutex_trylock>('pthread_mutex_trylock');
    return _pthread_mutex_trylock(
      arg0,
    );
  }

  _dart_pthread_mutex_trylock _pthread_mutex_trylock;

  int pthread_mutex_unlock(
    ffi.Pointer<_opaque_pthread_mutex_t> arg0,
  ) {
    _pthread_mutex_unlock ??= _dylib.lookupFunction<_c_pthread_mutex_unlock,
        _dart_pthread_mutex_unlock>('pthread_mutex_unlock');
    return _pthread_mutex_unlock(
      arg0,
    );
  }

  _dart_pthread_mutex_unlock _pthread_mutex_unlock;

  int pthread_mutexattr_destroy(
    ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ) {
    _pthread_mutexattr_destroy ??= _dylib.lookupFunction<
        _c_pthread_mutexattr_destroy,
        _dart_pthread_mutexattr_destroy>('pthread_mutexattr_destroy');
    return _pthread_mutexattr_destroy(
      arg0,
    );
  }

  _dart_pthread_mutexattr_destroy _pthread_mutexattr_destroy;

  int pthread_mutexattr_getprioceiling(
    ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_mutexattr_getprioceiling ??= _dylib.lookupFunction<
            _c_pthread_mutexattr_getprioceiling,
            _dart_pthread_mutexattr_getprioceiling>(
        'pthread_mutexattr_getprioceiling');
    return _pthread_mutexattr_getprioceiling(
      arg0,
      arg1,
    );
  }

  _dart_pthread_mutexattr_getprioceiling _pthread_mutexattr_getprioceiling;

  int pthread_mutexattr_getprotocol(
    ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_mutexattr_getprotocol ??= _dylib.lookupFunction<
        _c_pthread_mutexattr_getprotocol,
        _dart_pthread_mutexattr_getprotocol>('pthread_mutexattr_getprotocol');
    return _pthread_mutexattr_getprotocol(
      arg0,
      arg1,
    );
  }

  _dart_pthread_mutexattr_getprotocol _pthread_mutexattr_getprotocol;

  int pthread_mutexattr_getpshared(
    ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_mutexattr_getpshared ??= _dylib.lookupFunction<
        _c_pthread_mutexattr_getpshared,
        _dart_pthread_mutexattr_getpshared>('pthread_mutexattr_getpshared');
    return _pthread_mutexattr_getpshared(
      arg0,
      arg1,
    );
  }

  _dart_pthread_mutexattr_getpshared _pthread_mutexattr_getpshared;

  int pthread_mutexattr_gettype(
    ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_mutexattr_gettype ??= _dylib.lookupFunction<
        _c_pthread_mutexattr_gettype,
        _dart_pthread_mutexattr_gettype>('pthread_mutexattr_gettype');
    return _pthread_mutexattr_gettype(
      arg0,
      arg1,
    );
  }

  _dart_pthread_mutexattr_gettype _pthread_mutexattr_gettype;

  int pthread_mutexattr_getpolicy_np(
    ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_mutexattr_getpolicy_np ??= _dylib.lookupFunction<
        _c_pthread_mutexattr_getpolicy_np,
        _dart_pthread_mutexattr_getpolicy_np>('pthread_mutexattr_getpolicy_np');
    return _pthread_mutexattr_getpolicy_np(
      arg0,
      arg1,
    );
  }

  _dart_pthread_mutexattr_getpolicy_np _pthread_mutexattr_getpolicy_np;

  int pthread_mutexattr_init(
    ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ) {
    _pthread_mutexattr_init ??= _dylib.lookupFunction<_c_pthread_mutexattr_init,
        _dart_pthread_mutexattr_init>('pthread_mutexattr_init');
    return _pthread_mutexattr_init(
      arg0,
    );
  }

  _dart_pthread_mutexattr_init _pthread_mutexattr_init;

  int pthread_mutexattr_setprioceiling(
    ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
    int arg1,
  ) {
    _pthread_mutexattr_setprioceiling ??= _dylib.lookupFunction<
            _c_pthread_mutexattr_setprioceiling,
            _dart_pthread_mutexattr_setprioceiling>(
        'pthread_mutexattr_setprioceiling');
    return _pthread_mutexattr_setprioceiling(
      arg0,
      arg1,
    );
  }

  _dart_pthread_mutexattr_setprioceiling _pthread_mutexattr_setprioceiling;

  int pthread_mutexattr_setprotocol(
    ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
    int arg1,
  ) {
    _pthread_mutexattr_setprotocol ??= _dylib.lookupFunction<
        _c_pthread_mutexattr_setprotocol,
        _dart_pthread_mutexattr_setprotocol>('pthread_mutexattr_setprotocol');
    return _pthread_mutexattr_setprotocol(
      arg0,
      arg1,
    );
  }

  _dart_pthread_mutexattr_setprotocol _pthread_mutexattr_setprotocol;

  int pthread_mutexattr_setpshared(
    ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
    int arg1,
  ) {
    _pthread_mutexattr_setpshared ??= _dylib.lookupFunction<
        _c_pthread_mutexattr_setpshared,
        _dart_pthread_mutexattr_setpshared>('pthread_mutexattr_setpshared');
    return _pthread_mutexattr_setpshared(
      arg0,
      arg1,
    );
  }

  _dart_pthread_mutexattr_setpshared _pthread_mutexattr_setpshared;

  int pthread_mutexattr_settype(
    ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
    int arg1,
  ) {
    _pthread_mutexattr_settype ??= _dylib.lookupFunction<
        _c_pthread_mutexattr_settype,
        _dart_pthread_mutexattr_settype>('pthread_mutexattr_settype');
    return _pthread_mutexattr_settype(
      arg0,
      arg1,
    );
  }

  _dart_pthread_mutexattr_settype _pthread_mutexattr_settype;

  int pthread_mutexattr_setpolicy_np(
    ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
    int arg1,
  ) {
    _pthread_mutexattr_setpolicy_np ??= _dylib.lookupFunction<
        _c_pthread_mutexattr_setpolicy_np,
        _dart_pthread_mutexattr_setpolicy_np>('pthread_mutexattr_setpolicy_np');
    return _pthread_mutexattr_setpolicy_np(
      arg0,
      arg1,
    );
  }

  _dart_pthread_mutexattr_setpolicy_np _pthread_mutexattr_setpolicy_np;

  int pthread_once(
    ffi.Pointer<_opaque_pthread_once_t> arg0,
    ffi.Pointer<ffi.NativeFunction<_typedefC_7>> arg1,
  ) {
    _pthread_once ??= _dylib
        .lookupFunction<_c_pthread_once, _dart_pthread_once>('pthread_once');
    return _pthread_once(
      arg0,
      arg1,
    );
  }

  _dart_pthread_once _pthread_once;

  int pthread_rwlock_destroy(
    ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
  ) {
    _pthread_rwlock_destroy ??= _dylib.lookupFunction<_c_pthread_rwlock_destroy,
        _dart_pthread_rwlock_destroy>('pthread_rwlock_destroy');
    return _pthread_rwlock_destroy(
      arg0,
    );
  }

  _dart_pthread_rwlock_destroy _pthread_rwlock_destroy;

  int pthread_rwlock_init(
    ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
    ffi.Pointer<_opaque_pthread_rwlockattr_t> arg1,
  ) {
    _pthread_rwlock_init ??= _dylib.lookupFunction<_c_pthread_rwlock_init,
        _dart_pthread_rwlock_init>('pthread_rwlock_init');
    return _pthread_rwlock_init(
      arg0,
      arg1,
    );
  }

  _dart_pthread_rwlock_init _pthread_rwlock_init;

  int pthread_rwlock_rdlock(
    ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
  ) {
    _pthread_rwlock_rdlock ??= _dylib.lookupFunction<_c_pthread_rwlock_rdlock,
        _dart_pthread_rwlock_rdlock>('pthread_rwlock_rdlock');
    return _pthread_rwlock_rdlock(
      arg0,
    );
  }

  _dart_pthread_rwlock_rdlock _pthread_rwlock_rdlock;

  int pthread_rwlock_tryrdlock(
    ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
  ) {
    _pthread_rwlock_tryrdlock ??= _dylib.lookupFunction<
        _c_pthread_rwlock_tryrdlock,
        _dart_pthread_rwlock_tryrdlock>('pthread_rwlock_tryrdlock');
    return _pthread_rwlock_tryrdlock(
      arg0,
    );
  }

  _dart_pthread_rwlock_tryrdlock _pthread_rwlock_tryrdlock;

  int pthread_rwlock_trywrlock(
    ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
  ) {
    _pthread_rwlock_trywrlock ??= _dylib.lookupFunction<
        _c_pthread_rwlock_trywrlock,
        _dart_pthread_rwlock_trywrlock>('pthread_rwlock_trywrlock');
    return _pthread_rwlock_trywrlock(
      arg0,
    );
  }

  _dart_pthread_rwlock_trywrlock _pthread_rwlock_trywrlock;

  int pthread_rwlock_wrlock(
    ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
  ) {
    _pthread_rwlock_wrlock ??= _dylib.lookupFunction<_c_pthread_rwlock_wrlock,
        _dart_pthread_rwlock_wrlock>('pthread_rwlock_wrlock');
    return _pthread_rwlock_wrlock(
      arg0,
    );
  }

  _dart_pthread_rwlock_wrlock _pthread_rwlock_wrlock;

  int pthread_rwlock_unlock(
    ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
  ) {
    _pthread_rwlock_unlock ??= _dylib.lookupFunction<_c_pthread_rwlock_unlock,
        _dart_pthread_rwlock_unlock>('pthread_rwlock_unlock');
    return _pthread_rwlock_unlock(
      arg0,
    );
  }

  _dart_pthread_rwlock_unlock _pthread_rwlock_unlock;

  int pthread_rwlockattr_destroy(
    ffi.Pointer<_opaque_pthread_rwlockattr_t> arg0,
  ) {
    _pthread_rwlockattr_destroy ??= _dylib.lookupFunction<
        _c_pthread_rwlockattr_destroy,
        _dart_pthread_rwlockattr_destroy>('pthread_rwlockattr_destroy');
    return _pthread_rwlockattr_destroy(
      arg0,
    );
  }

  _dart_pthread_rwlockattr_destroy _pthread_rwlockattr_destroy;

  int pthread_rwlockattr_getpshared(
    ffi.Pointer<_opaque_pthread_rwlockattr_t> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_rwlockattr_getpshared ??= _dylib.lookupFunction<
        _c_pthread_rwlockattr_getpshared,
        _dart_pthread_rwlockattr_getpshared>('pthread_rwlockattr_getpshared');
    return _pthread_rwlockattr_getpshared(
      arg0,
      arg1,
    );
  }

  _dart_pthread_rwlockattr_getpshared _pthread_rwlockattr_getpshared;

  int pthread_rwlockattr_init(
    ffi.Pointer<_opaque_pthread_rwlockattr_t> arg0,
  ) {
    _pthread_rwlockattr_init ??= _dylib.lookupFunction<
        _c_pthread_rwlockattr_init,
        _dart_pthread_rwlockattr_init>('pthread_rwlockattr_init');
    return _pthread_rwlockattr_init(
      arg0,
    );
  }

  _dart_pthread_rwlockattr_init _pthread_rwlockattr_init;

  int pthread_rwlockattr_setpshared(
    ffi.Pointer<_opaque_pthread_rwlockattr_t> arg0,
    int arg1,
  ) {
    _pthread_rwlockattr_setpshared ??= _dylib.lookupFunction<
        _c_pthread_rwlockattr_setpshared,
        _dart_pthread_rwlockattr_setpshared>('pthread_rwlockattr_setpshared');
    return _pthread_rwlockattr_setpshared(
      arg0,
      arg1,
    );
  }

  _dart_pthread_rwlockattr_setpshared _pthread_rwlockattr_setpshared;

  ffi.Pointer<_opaque_pthread_t> pthread_self() {
    _pthread_self ??= _dylib
        .lookupFunction<_c_pthread_self, _dart_pthread_self>('pthread_self');
    return _pthread_self();
  }

  _dart_pthread_self _pthread_self;

  int pthread_setcancelstate(
    int arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_setcancelstate ??= _dylib.lookupFunction<_c_pthread_setcancelstate,
        _dart_pthread_setcancelstate>('pthread_setcancelstate');
    return _pthread_setcancelstate(
      arg0,
      arg1,
    );
  }

  _dart_pthread_setcancelstate _pthread_setcancelstate;

  int pthread_setcanceltype(
    int arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_setcanceltype ??= _dylib.lookupFunction<_c_pthread_setcanceltype,
        _dart_pthread_setcanceltype>('pthread_setcanceltype');
    return _pthread_setcanceltype(
      arg0,
      arg1,
    );
  }

  _dart_pthread_setcanceltype _pthread_setcanceltype;

  int pthread_setconcurrency(
    int arg0,
  ) {
    _pthread_setconcurrency ??= _dylib.lookupFunction<_c_pthread_setconcurrency,
        _dart_pthread_setconcurrency>('pthread_setconcurrency');
    return _pthread_setconcurrency(
      arg0,
    );
  }

  _dart_pthread_setconcurrency _pthread_setconcurrency;

  int pthread_setschedparam(
    ffi.Pointer<_opaque_pthread_t> arg0,
    int arg1,
    ffi.Pointer<sched_param> arg2,
  ) {
    _pthread_setschedparam ??= _dylib.lookupFunction<_c_pthread_setschedparam,
        _dart_pthread_setschedparam>('pthread_setschedparam');
    return _pthread_setschedparam(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_pthread_setschedparam _pthread_setschedparam;

  int pthread_setspecific(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    _pthread_setspecific ??= _dylib.lookupFunction<_c_pthread_setspecific,
        _dart_pthread_setspecific>('pthread_setspecific');
    return _pthread_setspecific(
      arg0,
      arg1,
    );
  }

  _dart_pthread_setspecific _pthread_setspecific;

  void pthread_testcancel() {
    _pthread_testcancel ??=
        _dylib.lookupFunction<_c_pthread_testcancel, _dart_pthread_testcancel>(
            'pthread_testcancel');
    return _pthread_testcancel();
  }

  _dart_pthread_testcancel _pthread_testcancel;

  int pthread_is_threaded_np() {
    _pthread_is_threaded_np ??= _dylib.lookupFunction<_c_pthread_is_threaded_np,
        _dart_pthread_is_threaded_np>('pthread_is_threaded_np');
    return _pthread_is_threaded_np();
  }

  _dart_pthread_is_threaded_np _pthread_is_threaded_np;

  int pthread_threadid_np(
    ffi.Pointer<_opaque_pthread_t> arg0,
    ffi.Pointer<ffi.Uint64> arg1,
  ) {
    _pthread_threadid_np ??= _dylib.lookupFunction<_c_pthread_threadid_np,
        _dart_pthread_threadid_np>('pthread_threadid_np');
    return _pthread_threadid_np(
      arg0,
      arg1,
    );
  }

  _dart_pthread_threadid_np _pthread_threadid_np;

  int pthread_getname_np(
    ffi.Pointer<_opaque_pthread_t> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _pthread_getname_np ??=
        _dylib.lookupFunction<_c_pthread_getname_np, _dart_pthread_getname_np>(
            'pthread_getname_np');
    return _pthread_getname_np(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_pthread_getname_np _pthread_getname_np;

  int pthread_setname_np(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _pthread_setname_np ??=
        _dylib.lookupFunction<_c_pthread_setname_np, _dart_pthread_setname_np>(
            'pthread_setname_np');
    return _pthread_setname_np(
      arg0,
    );
  }

  _dart_pthread_setname_np _pthread_setname_np;

  int pthread_main_np() {
    _pthread_main_np ??=
        _dylib.lookupFunction<_c_pthread_main_np, _dart_pthread_main_np>(
            'pthread_main_np');
    return _pthread_main_np();
  }

  _dart_pthread_main_np _pthread_main_np;

  int pthread_mach_thread_np(
    ffi.Pointer<_opaque_pthread_t> arg0,
  ) {
    _pthread_mach_thread_np ??= _dylib.lookupFunction<_c_pthread_mach_thread_np,
        _dart_pthread_mach_thread_np>('pthread_mach_thread_np');
    return _pthread_mach_thread_np(
      arg0,
    );
  }

  _dart_pthread_mach_thread_np _pthread_mach_thread_np;

  int pthread_get_stacksize_np(
    ffi.Pointer<_opaque_pthread_t> arg0,
  ) {
    _pthread_get_stacksize_np ??= _dylib.lookupFunction<
        _c_pthread_get_stacksize_np,
        _dart_pthread_get_stacksize_np>('pthread_get_stacksize_np');
    return _pthread_get_stacksize_np(
      arg0,
    );
  }

  _dart_pthread_get_stacksize_np _pthread_get_stacksize_np;

  ffi.Pointer<ffi.Void> pthread_get_stackaddr_np(
    ffi.Pointer<_opaque_pthread_t> arg0,
  ) {
    _pthread_get_stackaddr_np ??= _dylib.lookupFunction<
        _c_pthread_get_stackaddr_np,
        _dart_pthread_get_stackaddr_np>('pthread_get_stackaddr_np');
    return _pthread_get_stackaddr_np(
      arg0,
    );
  }

  _dart_pthread_get_stackaddr_np _pthread_get_stackaddr_np;

  int pthread_cond_signal_thread_np(
    ffi.Pointer<_opaque_pthread_cond_t> arg0,
    ffi.Pointer<_opaque_pthread_t> arg1,
  ) {
    _pthread_cond_signal_thread_np ??= _dylib.lookupFunction<
        _c_pthread_cond_signal_thread_np,
        _dart_pthread_cond_signal_thread_np>('pthread_cond_signal_thread_np');
    return _pthread_cond_signal_thread_np(
      arg0,
      arg1,
    );
  }

  _dart_pthread_cond_signal_thread_np _pthread_cond_signal_thread_np;

  int pthread_cond_timedwait_relative_np(
    ffi.Pointer<_opaque_pthread_cond_t> arg0,
    ffi.Pointer<_opaque_pthread_mutex_t> arg1,
    ffi.Pointer<timespec> arg2,
  ) {
    _pthread_cond_timedwait_relative_np ??= _dylib.lookupFunction<
            _c_pthread_cond_timedwait_relative_np,
            _dart_pthread_cond_timedwait_relative_np>(
        'pthread_cond_timedwait_relative_np');
    return _pthread_cond_timedwait_relative_np(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_pthread_cond_timedwait_relative_np _pthread_cond_timedwait_relative_np;

  int pthread_create_suspended_np(
    ffi.Pointer<ffi.Pointer<_opaque_pthread_t>> arg0,
    ffi.Pointer<_opaque_pthread_attr_t> arg1,
    ffi.Pointer<ffi.NativeFunction<_typedefC_8>> arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    _pthread_create_suspended_np ??= _dylib.lookupFunction<
        _c_pthread_create_suspended_np,
        _dart_pthread_create_suspended_np>('pthread_create_suspended_np');
    return _pthread_create_suspended_np(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_pthread_create_suspended_np _pthread_create_suspended_np;

  int pthread_kill(
    ffi.Pointer<_opaque_pthread_t> arg0,
    int arg1,
  ) {
    _pthread_kill ??= _dylib
        .lookupFunction<_c_pthread_kill, _dart_pthread_kill>('pthread_kill');
    return _pthread_kill(
      arg0,
      arg1,
    );
  }

  _dart_pthread_kill _pthread_kill;

  ffi.Pointer<_opaque_pthread_t> pthread_from_mach_thread_np(
    int arg0,
  ) {
    _pthread_from_mach_thread_np ??= _dylib.lookupFunction<
        _c_pthread_from_mach_thread_np,
        _dart_pthread_from_mach_thread_np>('pthread_from_mach_thread_np');
    return _pthread_from_mach_thread_np(
      arg0,
    );
  }

  _dart_pthread_from_mach_thread_np _pthread_from_mach_thread_np;

  int pthread_sigmask(
    int arg0,
    ffi.Pointer<ffi.Uint32> arg1,
    ffi.Pointer<ffi.Uint32> arg2,
  ) {
    _pthread_sigmask ??=
        _dylib.lookupFunction<_c_pthread_sigmask, _dart_pthread_sigmask>(
            'pthread_sigmask');
    return _pthread_sigmask(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_pthread_sigmask _pthread_sigmask;

  void pthread_yield_np() {
    _pthread_yield_np ??=
        _dylib.lookupFunction<_c_pthread_yield_np, _dart_pthread_yield_np>(
            'pthread_yield_np');
    return _pthread_yield_np();
  }

  _dart_pthread_yield_np _pthread_yield_np;

  void pthread_jit_write_protect_np(
    int enabled,
  ) {
    _pthread_jit_write_protect_np ??= _dylib.lookupFunction<
        _c_pthread_jit_write_protect_np,
        _dart_pthread_jit_write_protect_np>('pthread_jit_write_protect_np');
    return _pthread_jit_write_protect_np(
      enabled,
    );
  }

  _dart_pthread_jit_write_protect_np _pthread_jit_write_protect_np;

  int pthread_jit_write_protect_supported_np() {
    _pthread_jit_write_protect_supported_np ??= _dylib.lookupFunction<
            _c_pthread_jit_write_protect_supported_np,
            _dart_pthread_jit_write_protect_supported_np>(
        'pthread_jit_write_protect_supported_np');
    return _pthread_jit_write_protect_supported_np();
  }

  _dart_pthread_jit_write_protect_supported_np
      _pthread_jit_write_protect_supported_np;

  int pthread_cpu_number_np(
    ffi.Pointer<ffi.Uint64> cpu_number_out,
  ) {
    _pthread_cpu_number_np ??= _dylib.lookupFunction<_c_pthread_cpu_number_np,
        _dart_pthread_cpu_number_np>('pthread_cpu_number_np');
    return _pthread_cpu_number_np(
      cpu_number_out,
    );
  }

  _dart_pthread_cpu_number_np _pthread_cpu_number_np;

  void ma_version(
    ffi.Pointer<ffi.Uint32> pMajor,
    ffi.Pointer<ffi.Uint32> pMinor,
    ffi.Pointer<ffi.Uint32> pRevision,
  ) {
    _ma_version ??=
        _dylib.lookupFunction<_c_ma_version, _dart_ma_version>('ma_version');
    return _ma_version(
      pMajor,
      pMinor,
      pRevision,
    );
  }

  _dart_ma_version _ma_version;

  ffi.Pointer<ffi.Int8> ma_version_string() {
    _ma_version_string ??=
        _dylib.lookupFunction<_c_ma_version_string, _dart_ma_version_string>(
            'ma_version_string');
    return _ma_version_string();
  }

  _dart_ma_version_string _ma_version_string;

  int ma_biquad_init(
    ffi.Pointer<ma_biquad_config> pConfig,
    ffi.Pointer<ma_biquad> pBQ,
  ) {
    _ma_biquad_init ??=
        _dylib.lookupFunction<_c_ma_biquad_init, _dart_ma_biquad_init>(
            'ma_biquad_init');
    return _ma_biquad_init(
      pConfig,
      pBQ,
    );
  }

  _dart_ma_biquad_init _ma_biquad_init;

  int ma_biquad_reinit(
    ffi.Pointer<ma_biquad_config> pConfig,
    ffi.Pointer<ma_biquad> pBQ,
  ) {
    _ma_biquad_reinit ??=
        _dylib.lookupFunction<_c_ma_biquad_reinit, _dart_ma_biquad_reinit>(
            'ma_biquad_reinit');
    return _ma_biquad_reinit(
      pConfig,
      pBQ,
    );
  }

  _dart_ma_biquad_reinit _ma_biquad_reinit;

  int ma_biquad_process_pcm_frames(
    ffi.Pointer<ma_biquad> pBQ,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    _ma_biquad_process_pcm_frames ??= _dylib.lookupFunction<
        _c_ma_biquad_process_pcm_frames,
        _dart_ma_biquad_process_pcm_frames>('ma_biquad_process_pcm_frames');
    return _ma_biquad_process_pcm_frames(
      pBQ,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  _dart_ma_biquad_process_pcm_frames _ma_biquad_process_pcm_frames;

  int ma_biquad_get_latency(
    ffi.Pointer<ma_biquad> pBQ,
  ) {
    _ma_biquad_get_latency ??= _dylib.lookupFunction<_c_ma_biquad_get_latency,
        _dart_ma_biquad_get_latency>('ma_biquad_get_latency');
    return _ma_biquad_get_latency(
      pBQ,
    );
  }

  _dart_ma_biquad_get_latency _ma_biquad_get_latency;

  int ma_lpf1_init(
    ffi.Pointer<ma_lpf2_config> pConfig,
    ffi.Pointer<ma_lpf1> pLPF,
  ) {
    _ma_lpf1_init ??= _dylib
        .lookupFunction<_c_ma_lpf1_init, _dart_ma_lpf1_init>('ma_lpf1_init');
    return _ma_lpf1_init(
      pConfig,
      pLPF,
    );
  }

  _dart_ma_lpf1_init _ma_lpf1_init;

  int ma_lpf1_reinit(
    ffi.Pointer<ma_lpf2_config> pConfig,
    ffi.Pointer<ma_lpf1> pLPF,
  ) {
    _ma_lpf1_reinit ??=
        _dylib.lookupFunction<_c_ma_lpf1_reinit, _dart_ma_lpf1_reinit>(
            'ma_lpf1_reinit');
    return _ma_lpf1_reinit(
      pConfig,
      pLPF,
    );
  }

  _dart_ma_lpf1_reinit _ma_lpf1_reinit;

  int ma_lpf1_process_pcm_frames(
    ffi.Pointer<ma_lpf1> pLPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    _ma_lpf1_process_pcm_frames ??= _dylib.lookupFunction<
        _c_ma_lpf1_process_pcm_frames,
        _dart_ma_lpf1_process_pcm_frames>('ma_lpf1_process_pcm_frames');
    return _ma_lpf1_process_pcm_frames(
      pLPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  _dart_ma_lpf1_process_pcm_frames _ma_lpf1_process_pcm_frames;

  int ma_lpf1_get_latency(
    ffi.Pointer<ma_lpf1> pLPF,
  ) {
    _ma_lpf1_get_latency ??= _dylib.lookupFunction<_c_ma_lpf1_get_latency,
        _dart_ma_lpf1_get_latency>('ma_lpf1_get_latency');
    return _ma_lpf1_get_latency(
      pLPF,
    );
  }

  _dart_ma_lpf1_get_latency _ma_lpf1_get_latency;

  int ma_lpf2_init(
    ffi.Pointer<ma_lpf2_config> pConfig,
    ffi.Pointer<ma_lpf2> pLPF,
  ) {
    _ma_lpf2_init ??= _dylib
        .lookupFunction<_c_ma_lpf2_init, _dart_ma_lpf2_init>('ma_lpf2_init');
    return _ma_lpf2_init(
      pConfig,
      pLPF,
    );
  }

  _dart_ma_lpf2_init _ma_lpf2_init;

  int ma_lpf2_reinit(
    ffi.Pointer<ma_lpf2_config> pConfig,
    ffi.Pointer<ma_lpf2> pLPF,
  ) {
    _ma_lpf2_reinit ??=
        _dylib.lookupFunction<_c_ma_lpf2_reinit, _dart_ma_lpf2_reinit>(
            'ma_lpf2_reinit');
    return _ma_lpf2_reinit(
      pConfig,
      pLPF,
    );
  }

  _dart_ma_lpf2_reinit _ma_lpf2_reinit;

  int ma_lpf2_process_pcm_frames(
    ffi.Pointer<ma_lpf2> pLPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    _ma_lpf2_process_pcm_frames ??= _dylib.lookupFunction<
        _c_ma_lpf2_process_pcm_frames,
        _dart_ma_lpf2_process_pcm_frames>('ma_lpf2_process_pcm_frames');
    return _ma_lpf2_process_pcm_frames(
      pLPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  _dart_ma_lpf2_process_pcm_frames _ma_lpf2_process_pcm_frames;

  int ma_lpf2_get_latency(
    ffi.Pointer<ma_lpf2> pLPF,
  ) {
    _ma_lpf2_get_latency ??= _dylib.lookupFunction<_c_ma_lpf2_get_latency,
        _dart_ma_lpf2_get_latency>('ma_lpf2_get_latency');
    return _ma_lpf2_get_latency(
      pLPF,
    );
  }

  _dart_ma_lpf2_get_latency _ma_lpf2_get_latency;

  int ma_lpf_init(
    ffi.Pointer<ma_lpf_config> pConfig,
    ffi.Pointer<ma_lpf> pLPF,
  ) {
    _ma_lpf_init ??=
        _dylib.lookupFunction<_c_ma_lpf_init, _dart_ma_lpf_init>('ma_lpf_init');
    return _ma_lpf_init(
      pConfig,
      pLPF,
    );
  }

  _dart_ma_lpf_init _ma_lpf_init;

  int ma_lpf_reinit(
    ffi.Pointer<ma_lpf_config> pConfig,
    ffi.Pointer<ma_lpf> pLPF,
  ) {
    _ma_lpf_reinit ??= _dylib
        .lookupFunction<_c_ma_lpf_reinit, _dart_ma_lpf_reinit>('ma_lpf_reinit');
    return _ma_lpf_reinit(
      pConfig,
      pLPF,
    );
  }

  _dart_ma_lpf_reinit _ma_lpf_reinit;

  int ma_lpf_process_pcm_frames(
    ffi.Pointer<ma_lpf> pLPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    _ma_lpf_process_pcm_frames ??= _dylib.lookupFunction<
        _c_ma_lpf_process_pcm_frames,
        _dart_ma_lpf_process_pcm_frames>('ma_lpf_process_pcm_frames');
    return _ma_lpf_process_pcm_frames(
      pLPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  _dart_ma_lpf_process_pcm_frames _ma_lpf_process_pcm_frames;

  int ma_lpf_get_latency(
    ffi.Pointer<ma_lpf> pLPF,
  ) {
    _ma_lpf_get_latency ??=
        _dylib.lookupFunction<_c_ma_lpf_get_latency, _dart_ma_lpf_get_latency>(
            'ma_lpf_get_latency');
    return _ma_lpf_get_latency(
      pLPF,
    );
  }

  _dart_ma_lpf_get_latency _ma_lpf_get_latency;

  int ma_hpf1_init(
    ffi.Pointer<ma_hpf2_config> pConfig,
    ffi.Pointer<ma_hpf1> pHPF,
  ) {
    _ma_hpf1_init ??= _dylib
        .lookupFunction<_c_ma_hpf1_init, _dart_ma_hpf1_init>('ma_hpf1_init');
    return _ma_hpf1_init(
      pConfig,
      pHPF,
    );
  }

  _dart_ma_hpf1_init _ma_hpf1_init;

  int ma_hpf1_reinit(
    ffi.Pointer<ma_hpf2_config> pConfig,
    ffi.Pointer<ma_hpf1> pHPF,
  ) {
    _ma_hpf1_reinit ??=
        _dylib.lookupFunction<_c_ma_hpf1_reinit, _dart_ma_hpf1_reinit>(
            'ma_hpf1_reinit');
    return _ma_hpf1_reinit(
      pConfig,
      pHPF,
    );
  }

  _dart_ma_hpf1_reinit _ma_hpf1_reinit;

  int ma_hpf1_process_pcm_frames(
    ffi.Pointer<ma_hpf1> pHPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    _ma_hpf1_process_pcm_frames ??= _dylib.lookupFunction<
        _c_ma_hpf1_process_pcm_frames,
        _dart_ma_hpf1_process_pcm_frames>('ma_hpf1_process_pcm_frames');
    return _ma_hpf1_process_pcm_frames(
      pHPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  _dart_ma_hpf1_process_pcm_frames _ma_hpf1_process_pcm_frames;

  int ma_hpf1_get_latency(
    ffi.Pointer<ma_hpf1> pHPF,
  ) {
    _ma_hpf1_get_latency ??= _dylib.lookupFunction<_c_ma_hpf1_get_latency,
        _dart_ma_hpf1_get_latency>('ma_hpf1_get_latency');
    return _ma_hpf1_get_latency(
      pHPF,
    );
  }

  _dart_ma_hpf1_get_latency _ma_hpf1_get_latency;

  int ma_hpf2_init(
    ffi.Pointer<ma_hpf2_config> pConfig,
    ffi.Pointer<ma_hpf2> pHPF,
  ) {
    _ma_hpf2_init ??= _dylib
        .lookupFunction<_c_ma_hpf2_init, _dart_ma_hpf2_init>('ma_hpf2_init');
    return _ma_hpf2_init(
      pConfig,
      pHPF,
    );
  }

  _dart_ma_hpf2_init _ma_hpf2_init;

  int ma_hpf2_reinit(
    ffi.Pointer<ma_hpf2_config> pConfig,
    ffi.Pointer<ma_hpf2> pHPF,
  ) {
    _ma_hpf2_reinit ??=
        _dylib.lookupFunction<_c_ma_hpf2_reinit, _dart_ma_hpf2_reinit>(
            'ma_hpf2_reinit');
    return _ma_hpf2_reinit(
      pConfig,
      pHPF,
    );
  }

  _dart_ma_hpf2_reinit _ma_hpf2_reinit;

  int ma_hpf2_process_pcm_frames(
    ffi.Pointer<ma_hpf2> pHPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    _ma_hpf2_process_pcm_frames ??= _dylib.lookupFunction<
        _c_ma_hpf2_process_pcm_frames,
        _dart_ma_hpf2_process_pcm_frames>('ma_hpf2_process_pcm_frames');
    return _ma_hpf2_process_pcm_frames(
      pHPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  _dart_ma_hpf2_process_pcm_frames _ma_hpf2_process_pcm_frames;

  int ma_hpf2_get_latency(
    ffi.Pointer<ma_hpf2> pHPF,
  ) {
    _ma_hpf2_get_latency ??= _dylib.lookupFunction<_c_ma_hpf2_get_latency,
        _dart_ma_hpf2_get_latency>('ma_hpf2_get_latency');
    return _ma_hpf2_get_latency(
      pHPF,
    );
  }

  _dart_ma_hpf2_get_latency _ma_hpf2_get_latency;

  int ma_hpf_init(
    ffi.Pointer<ma_hpf_config> pConfig,
    ffi.Pointer<ma_hpf> pHPF,
  ) {
    _ma_hpf_init ??=
        _dylib.lookupFunction<_c_ma_hpf_init, _dart_ma_hpf_init>('ma_hpf_init');
    return _ma_hpf_init(
      pConfig,
      pHPF,
    );
  }

  _dart_ma_hpf_init _ma_hpf_init;

  int ma_hpf_reinit(
    ffi.Pointer<ma_hpf_config> pConfig,
    ffi.Pointer<ma_hpf> pHPF,
  ) {
    _ma_hpf_reinit ??= _dylib
        .lookupFunction<_c_ma_hpf_reinit, _dart_ma_hpf_reinit>('ma_hpf_reinit');
    return _ma_hpf_reinit(
      pConfig,
      pHPF,
    );
  }

  _dart_ma_hpf_reinit _ma_hpf_reinit;

  int ma_hpf_process_pcm_frames(
    ffi.Pointer<ma_hpf> pHPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    _ma_hpf_process_pcm_frames ??= _dylib.lookupFunction<
        _c_ma_hpf_process_pcm_frames,
        _dart_ma_hpf_process_pcm_frames>('ma_hpf_process_pcm_frames');
    return _ma_hpf_process_pcm_frames(
      pHPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  _dart_ma_hpf_process_pcm_frames _ma_hpf_process_pcm_frames;

  int ma_hpf_get_latency(
    ffi.Pointer<ma_hpf> pHPF,
  ) {
    _ma_hpf_get_latency ??=
        _dylib.lookupFunction<_c_ma_hpf_get_latency, _dart_ma_hpf_get_latency>(
            'ma_hpf_get_latency');
    return _ma_hpf_get_latency(
      pHPF,
    );
  }

  _dart_ma_hpf_get_latency _ma_hpf_get_latency;

  int ma_bpf2_init(
    ffi.Pointer<ma_bpf2_config> pConfig,
    ffi.Pointer<ma_bpf2> pBPF,
  ) {
    _ma_bpf2_init ??= _dylib
        .lookupFunction<_c_ma_bpf2_init, _dart_ma_bpf2_init>('ma_bpf2_init');
    return _ma_bpf2_init(
      pConfig,
      pBPF,
    );
  }

  _dart_ma_bpf2_init _ma_bpf2_init;

  int ma_bpf2_reinit(
    ffi.Pointer<ma_bpf2_config> pConfig,
    ffi.Pointer<ma_bpf2> pBPF,
  ) {
    _ma_bpf2_reinit ??=
        _dylib.lookupFunction<_c_ma_bpf2_reinit, _dart_ma_bpf2_reinit>(
            'ma_bpf2_reinit');
    return _ma_bpf2_reinit(
      pConfig,
      pBPF,
    );
  }

  _dart_ma_bpf2_reinit _ma_bpf2_reinit;

  int ma_bpf2_process_pcm_frames(
    ffi.Pointer<ma_bpf2> pBPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    _ma_bpf2_process_pcm_frames ??= _dylib.lookupFunction<
        _c_ma_bpf2_process_pcm_frames,
        _dart_ma_bpf2_process_pcm_frames>('ma_bpf2_process_pcm_frames');
    return _ma_bpf2_process_pcm_frames(
      pBPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  _dart_ma_bpf2_process_pcm_frames _ma_bpf2_process_pcm_frames;

  int ma_bpf2_get_latency(
    ffi.Pointer<ma_bpf2> pBPF,
  ) {
    _ma_bpf2_get_latency ??= _dylib.lookupFunction<_c_ma_bpf2_get_latency,
        _dart_ma_bpf2_get_latency>('ma_bpf2_get_latency');
    return _ma_bpf2_get_latency(
      pBPF,
    );
  }

  _dart_ma_bpf2_get_latency _ma_bpf2_get_latency;

  int ma_bpf_init(
    ffi.Pointer<ma_bpf_config> pConfig,
    ffi.Pointer<ma_bpf> pBPF,
  ) {
    _ma_bpf_init ??=
        _dylib.lookupFunction<_c_ma_bpf_init, _dart_ma_bpf_init>('ma_bpf_init');
    return _ma_bpf_init(
      pConfig,
      pBPF,
    );
  }

  _dart_ma_bpf_init _ma_bpf_init;

  int ma_bpf_reinit(
    ffi.Pointer<ma_bpf_config> pConfig,
    ffi.Pointer<ma_bpf> pBPF,
  ) {
    _ma_bpf_reinit ??= _dylib
        .lookupFunction<_c_ma_bpf_reinit, _dart_ma_bpf_reinit>('ma_bpf_reinit');
    return _ma_bpf_reinit(
      pConfig,
      pBPF,
    );
  }

  _dart_ma_bpf_reinit _ma_bpf_reinit;

  int ma_bpf_process_pcm_frames(
    ffi.Pointer<ma_bpf> pBPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    _ma_bpf_process_pcm_frames ??= _dylib.lookupFunction<
        _c_ma_bpf_process_pcm_frames,
        _dart_ma_bpf_process_pcm_frames>('ma_bpf_process_pcm_frames');
    return _ma_bpf_process_pcm_frames(
      pBPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  _dart_ma_bpf_process_pcm_frames _ma_bpf_process_pcm_frames;

  int ma_bpf_get_latency(
    ffi.Pointer<ma_bpf> pBPF,
  ) {
    _ma_bpf_get_latency ??=
        _dylib.lookupFunction<_c_ma_bpf_get_latency, _dart_ma_bpf_get_latency>(
            'ma_bpf_get_latency');
    return _ma_bpf_get_latency(
      pBPF,
    );
  }

  _dart_ma_bpf_get_latency _ma_bpf_get_latency;

  int ma_notch2_init(
    ffi.Pointer<ma_notch2_config> pConfig,
    ffi.Pointer<ma_notch2> pFilter,
  ) {
    _ma_notch2_init ??=
        _dylib.lookupFunction<_c_ma_notch2_init, _dart_ma_notch2_init>(
            'ma_notch2_init');
    return _ma_notch2_init(
      pConfig,
      pFilter,
    );
  }

  _dart_ma_notch2_init _ma_notch2_init;

  int ma_notch2_reinit(
    ffi.Pointer<ma_notch2_config> pConfig,
    ffi.Pointer<ma_notch2> pFilter,
  ) {
    _ma_notch2_reinit ??=
        _dylib.lookupFunction<_c_ma_notch2_reinit, _dart_ma_notch2_reinit>(
            'ma_notch2_reinit');
    return _ma_notch2_reinit(
      pConfig,
      pFilter,
    );
  }

  _dart_ma_notch2_reinit _ma_notch2_reinit;

  int ma_notch2_process_pcm_frames(
    ffi.Pointer<ma_notch2> pFilter,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    _ma_notch2_process_pcm_frames ??= _dylib.lookupFunction<
        _c_ma_notch2_process_pcm_frames,
        _dart_ma_notch2_process_pcm_frames>('ma_notch2_process_pcm_frames');
    return _ma_notch2_process_pcm_frames(
      pFilter,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  _dart_ma_notch2_process_pcm_frames _ma_notch2_process_pcm_frames;

  int ma_notch2_get_latency(
    ffi.Pointer<ma_notch2> pFilter,
  ) {
    _ma_notch2_get_latency ??= _dylib.lookupFunction<_c_ma_notch2_get_latency,
        _dart_ma_notch2_get_latency>('ma_notch2_get_latency');
    return _ma_notch2_get_latency(
      pFilter,
    );
  }

  _dart_ma_notch2_get_latency _ma_notch2_get_latency;

  int ma_peak2_init(
    ffi.Pointer<ma_peak2_config> pConfig,
    ffi.Pointer<ma_peak2> pFilter,
  ) {
    _ma_peak2_init ??= _dylib
        .lookupFunction<_c_ma_peak2_init, _dart_ma_peak2_init>('ma_peak2_init');
    return _ma_peak2_init(
      pConfig,
      pFilter,
    );
  }

  _dart_ma_peak2_init _ma_peak2_init;

  int ma_peak2_reinit(
    ffi.Pointer<ma_peak2_config> pConfig,
    ffi.Pointer<ma_peak2> pFilter,
  ) {
    _ma_peak2_reinit ??=
        _dylib.lookupFunction<_c_ma_peak2_reinit, _dart_ma_peak2_reinit>(
            'ma_peak2_reinit');
    return _ma_peak2_reinit(
      pConfig,
      pFilter,
    );
  }

  _dart_ma_peak2_reinit _ma_peak2_reinit;

  int ma_peak2_process_pcm_frames(
    ffi.Pointer<ma_peak2> pFilter,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    _ma_peak2_process_pcm_frames ??= _dylib.lookupFunction<
        _c_ma_peak2_process_pcm_frames,
        _dart_ma_peak2_process_pcm_frames>('ma_peak2_process_pcm_frames');
    return _ma_peak2_process_pcm_frames(
      pFilter,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  _dart_ma_peak2_process_pcm_frames _ma_peak2_process_pcm_frames;

  int ma_peak2_get_latency(
    ffi.Pointer<ma_peak2> pFilter,
  ) {
    _ma_peak2_get_latency ??= _dylib.lookupFunction<_c_ma_peak2_get_latency,
        _dart_ma_peak2_get_latency>('ma_peak2_get_latency');
    return _ma_peak2_get_latency(
      pFilter,
    );
  }

  _dart_ma_peak2_get_latency _ma_peak2_get_latency;

  int ma_loshelf2_init(
    ffi.Pointer<ma_loshelf2_config> pConfig,
    ffi.Pointer<ma_loshelf2> pFilter,
  ) {
    _ma_loshelf2_init ??=
        _dylib.lookupFunction<_c_ma_loshelf2_init, _dart_ma_loshelf2_init>(
            'ma_loshelf2_init');
    return _ma_loshelf2_init(
      pConfig,
      pFilter,
    );
  }

  _dart_ma_loshelf2_init _ma_loshelf2_init;

  int ma_loshelf2_reinit(
    ffi.Pointer<ma_loshelf2_config> pConfig,
    ffi.Pointer<ma_loshelf2> pFilter,
  ) {
    _ma_loshelf2_reinit ??=
        _dylib.lookupFunction<_c_ma_loshelf2_reinit, _dart_ma_loshelf2_reinit>(
            'ma_loshelf2_reinit');
    return _ma_loshelf2_reinit(
      pConfig,
      pFilter,
    );
  }

  _dart_ma_loshelf2_reinit _ma_loshelf2_reinit;

  int ma_loshelf2_process_pcm_frames(
    ffi.Pointer<ma_loshelf2> pFilter,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    _ma_loshelf2_process_pcm_frames ??= _dylib.lookupFunction<
        _c_ma_loshelf2_process_pcm_frames,
        _dart_ma_loshelf2_process_pcm_frames>('ma_loshelf2_process_pcm_frames');
    return _ma_loshelf2_process_pcm_frames(
      pFilter,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  _dart_ma_loshelf2_process_pcm_frames _ma_loshelf2_process_pcm_frames;

  int ma_loshelf2_get_latency(
    ffi.Pointer<ma_loshelf2> pFilter,
  ) {
    _ma_loshelf2_get_latency ??= _dylib.lookupFunction<
        _c_ma_loshelf2_get_latency,
        _dart_ma_loshelf2_get_latency>('ma_loshelf2_get_latency');
    return _ma_loshelf2_get_latency(
      pFilter,
    );
  }

  _dart_ma_loshelf2_get_latency _ma_loshelf2_get_latency;

  int ma_hishelf2_init(
    ffi.Pointer<ma_hishelf2_config> pConfig,
    ffi.Pointer<ma_hishelf2> pFilter,
  ) {
    _ma_hishelf2_init ??=
        _dylib.lookupFunction<_c_ma_hishelf2_init, _dart_ma_hishelf2_init>(
            'ma_hishelf2_init');
    return _ma_hishelf2_init(
      pConfig,
      pFilter,
    );
  }

  _dart_ma_hishelf2_init _ma_hishelf2_init;

  int ma_hishelf2_reinit(
    ffi.Pointer<ma_hishelf2_config> pConfig,
    ffi.Pointer<ma_hishelf2> pFilter,
  ) {
    _ma_hishelf2_reinit ??=
        _dylib.lookupFunction<_c_ma_hishelf2_reinit, _dart_ma_hishelf2_reinit>(
            'ma_hishelf2_reinit');
    return _ma_hishelf2_reinit(
      pConfig,
      pFilter,
    );
  }

  _dart_ma_hishelf2_reinit _ma_hishelf2_reinit;

  int ma_hishelf2_process_pcm_frames(
    ffi.Pointer<ma_hishelf2> pFilter,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    _ma_hishelf2_process_pcm_frames ??= _dylib.lookupFunction<
        _c_ma_hishelf2_process_pcm_frames,
        _dart_ma_hishelf2_process_pcm_frames>('ma_hishelf2_process_pcm_frames');
    return _ma_hishelf2_process_pcm_frames(
      pFilter,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  _dart_ma_hishelf2_process_pcm_frames _ma_hishelf2_process_pcm_frames;

  int ma_hishelf2_get_latency(
    ffi.Pointer<ma_hishelf2> pFilter,
  ) {
    _ma_hishelf2_get_latency ??= _dylib.lookupFunction<
        _c_ma_hishelf2_get_latency,
        _dart_ma_hishelf2_get_latency>('ma_hishelf2_get_latency');
    return _ma_hishelf2_get_latency(
      pFilter,
    );
  }

  _dart_ma_hishelf2_get_latency _ma_hishelf2_get_latency;

  int ma_linear_resampler_init(
    ffi.Pointer<ma_linear_resampler_config> pConfig,
    ffi.Pointer<ma_linear_resampler> pResampler,
  ) {
    _ma_linear_resampler_init ??= _dylib.lookupFunction<
        _c_ma_linear_resampler_init,
        _dart_ma_linear_resampler_init>('ma_linear_resampler_init');
    return _ma_linear_resampler_init(
      pConfig,
      pResampler,
    );
  }

  _dart_ma_linear_resampler_init _ma_linear_resampler_init;

  void ma_linear_resampler_uninit(
    ffi.Pointer<ma_linear_resampler> pResampler,
  ) {
    _ma_linear_resampler_uninit ??= _dylib.lookupFunction<
        _c_ma_linear_resampler_uninit,
        _dart_ma_linear_resampler_uninit>('ma_linear_resampler_uninit');
    return _ma_linear_resampler_uninit(
      pResampler,
    );
  }

  _dart_ma_linear_resampler_uninit _ma_linear_resampler_uninit;

  int ma_linear_resampler_process_pcm_frames(
    ffi.Pointer<ma_linear_resampler> pResampler,
    ffi.Pointer<ffi.Void> pFramesIn,
    ffi.Pointer<ffi.Uint64> pFrameCountIn,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Uint64> pFrameCountOut,
  ) {
    _ma_linear_resampler_process_pcm_frames ??= _dylib.lookupFunction<
            _c_ma_linear_resampler_process_pcm_frames,
            _dart_ma_linear_resampler_process_pcm_frames>(
        'ma_linear_resampler_process_pcm_frames');
    return _ma_linear_resampler_process_pcm_frames(
      pResampler,
      pFramesIn,
      pFrameCountIn,
      pFramesOut,
      pFrameCountOut,
    );
  }

  _dart_ma_linear_resampler_process_pcm_frames
      _ma_linear_resampler_process_pcm_frames;

  int ma_linear_resampler_set_rate(
    ffi.Pointer<ma_linear_resampler> pResampler,
    int sampleRateIn,
    int sampleRateOut,
  ) {
    _ma_linear_resampler_set_rate ??= _dylib.lookupFunction<
        _c_ma_linear_resampler_set_rate,
        _dart_ma_linear_resampler_set_rate>('ma_linear_resampler_set_rate');
    return _ma_linear_resampler_set_rate(
      pResampler,
      sampleRateIn,
      sampleRateOut,
    );
  }

  _dart_ma_linear_resampler_set_rate _ma_linear_resampler_set_rate;

  int ma_linear_resampler_set_rate_ratio(
    ffi.Pointer<ma_linear_resampler> pResampler,
    double ratioInOut,
  ) {
    _ma_linear_resampler_set_rate_ratio ??= _dylib.lookupFunction<
            _c_ma_linear_resampler_set_rate_ratio,
            _dart_ma_linear_resampler_set_rate_ratio>(
        'ma_linear_resampler_set_rate_ratio');
    return _ma_linear_resampler_set_rate_ratio(
      pResampler,
      ratioInOut,
    );
  }

  _dart_ma_linear_resampler_set_rate_ratio _ma_linear_resampler_set_rate_ratio;

  int ma_linear_resampler_get_required_input_frame_count(
    ffi.Pointer<ma_linear_resampler> pResampler,
    int outputFrameCount,
  ) {
    _ma_linear_resampler_get_required_input_frame_count ??=
        _dylib.lookupFunction<
                _c_ma_linear_resampler_get_required_input_frame_count,
                _dart_ma_linear_resampler_get_required_input_frame_count>(
            'ma_linear_resampler_get_required_input_frame_count');
    return _ma_linear_resampler_get_required_input_frame_count(
      pResampler,
      outputFrameCount,
    );
  }

  _dart_ma_linear_resampler_get_required_input_frame_count
      _ma_linear_resampler_get_required_input_frame_count;

  int ma_linear_resampler_get_expected_output_frame_count(
    ffi.Pointer<ma_linear_resampler> pResampler,
    int inputFrameCount,
  ) {
    _ma_linear_resampler_get_expected_output_frame_count ??=
        _dylib.lookupFunction<
                _c_ma_linear_resampler_get_expected_output_frame_count,
                _dart_ma_linear_resampler_get_expected_output_frame_count>(
            'ma_linear_resampler_get_expected_output_frame_count');
    return _ma_linear_resampler_get_expected_output_frame_count(
      pResampler,
      inputFrameCount,
    );
  }

  _dart_ma_linear_resampler_get_expected_output_frame_count
      _ma_linear_resampler_get_expected_output_frame_count;

  int ma_linear_resampler_get_input_latency(
    ffi.Pointer<ma_linear_resampler> pResampler,
  ) {
    _ma_linear_resampler_get_input_latency ??= _dylib.lookupFunction<
            _c_ma_linear_resampler_get_input_latency,
            _dart_ma_linear_resampler_get_input_latency>(
        'ma_linear_resampler_get_input_latency');
    return _ma_linear_resampler_get_input_latency(
      pResampler,
    );
  }

  _dart_ma_linear_resampler_get_input_latency
      _ma_linear_resampler_get_input_latency;

  int ma_linear_resampler_get_output_latency(
    ffi.Pointer<ma_linear_resampler> pResampler,
  ) {
    _ma_linear_resampler_get_output_latency ??= _dylib.lookupFunction<
            _c_ma_linear_resampler_get_output_latency,
            _dart_ma_linear_resampler_get_output_latency>(
        'ma_linear_resampler_get_output_latency');
    return _ma_linear_resampler_get_output_latency(
      pResampler,
    );
  }

  _dart_ma_linear_resampler_get_output_latency
      _ma_linear_resampler_get_output_latency;

  int ma_resampler_init(
    ffi.Pointer<ma_resampler_config> pConfig,
    ffi.Pointer<ma_resampler> pResampler,
  ) {
    _ma_resampler_init ??=
        _dylib.lookupFunction<_c_ma_resampler_init, _dart_ma_resampler_init>(
            'ma_resampler_init');
    return _ma_resampler_init(
      pConfig,
      pResampler,
    );
  }

  _dart_ma_resampler_init _ma_resampler_init;

  void ma_resampler_uninit(
    ffi.Pointer<ma_resampler> pResampler,
  ) {
    _ma_resampler_uninit ??= _dylib.lookupFunction<_c_ma_resampler_uninit,
        _dart_ma_resampler_uninit>('ma_resampler_uninit');
    return _ma_resampler_uninit(
      pResampler,
    );
  }

  _dart_ma_resampler_uninit _ma_resampler_uninit;

  int ma_resampler_process_pcm_frames(
    ffi.Pointer<ma_resampler> pResampler,
    ffi.Pointer<ffi.Void> pFramesIn,
    ffi.Pointer<ffi.Uint64> pFrameCountIn,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Uint64> pFrameCountOut,
  ) {
    _ma_resampler_process_pcm_frames ??= _dylib.lookupFunction<
            _c_ma_resampler_process_pcm_frames,
            _dart_ma_resampler_process_pcm_frames>(
        'ma_resampler_process_pcm_frames');
    return _ma_resampler_process_pcm_frames(
      pResampler,
      pFramesIn,
      pFrameCountIn,
      pFramesOut,
      pFrameCountOut,
    );
  }

  _dart_ma_resampler_process_pcm_frames _ma_resampler_process_pcm_frames;

  int ma_resampler_set_rate(
    ffi.Pointer<ma_resampler> pResampler,
    int sampleRateIn,
    int sampleRateOut,
  ) {
    _ma_resampler_set_rate ??= _dylib.lookupFunction<_c_ma_resampler_set_rate,
        _dart_ma_resampler_set_rate>('ma_resampler_set_rate');
    return _ma_resampler_set_rate(
      pResampler,
      sampleRateIn,
      sampleRateOut,
    );
  }

  _dart_ma_resampler_set_rate _ma_resampler_set_rate;

  int ma_resampler_set_rate_ratio(
    ffi.Pointer<ma_resampler> pResampler,
    double ratio,
  ) {
    _ma_resampler_set_rate_ratio ??= _dylib.lookupFunction<
        _c_ma_resampler_set_rate_ratio,
        _dart_ma_resampler_set_rate_ratio>('ma_resampler_set_rate_ratio');
    return _ma_resampler_set_rate_ratio(
      pResampler,
      ratio,
    );
  }

  _dart_ma_resampler_set_rate_ratio _ma_resampler_set_rate_ratio;

  int ma_resampler_get_required_input_frame_count(
    ffi.Pointer<ma_resampler> pResampler,
    int outputFrameCount,
  ) {
    _ma_resampler_get_required_input_frame_count ??= _dylib.lookupFunction<
            _c_ma_resampler_get_required_input_frame_count,
            _dart_ma_resampler_get_required_input_frame_count>(
        'ma_resampler_get_required_input_frame_count');
    return _ma_resampler_get_required_input_frame_count(
      pResampler,
      outputFrameCount,
    );
  }

  _dart_ma_resampler_get_required_input_frame_count
      _ma_resampler_get_required_input_frame_count;

  int ma_resampler_get_expected_output_frame_count(
    ffi.Pointer<ma_resampler> pResampler,
    int inputFrameCount,
  ) {
    _ma_resampler_get_expected_output_frame_count ??= _dylib.lookupFunction<
            _c_ma_resampler_get_expected_output_frame_count,
            _dart_ma_resampler_get_expected_output_frame_count>(
        'ma_resampler_get_expected_output_frame_count');
    return _ma_resampler_get_expected_output_frame_count(
      pResampler,
      inputFrameCount,
    );
  }

  _dart_ma_resampler_get_expected_output_frame_count
      _ma_resampler_get_expected_output_frame_count;

  int ma_resampler_get_input_latency(
    ffi.Pointer<ma_resampler> pResampler,
  ) {
    _ma_resampler_get_input_latency ??= _dylib.lookupFunction<
        _c_ma_resampler_get_input_latency,
        _dart_ma_resampler_get_input_latency>('ma_resampler_get_input_latency');
    return _ma_resampler_get_input_latency(
      pResampler,
    );
  }

  _dart_ma_resampler_get_input_latency _ma_resampler_get_input_latency;

  int ma_resampler_get_output_latency(
    ffi.Pointer<ma_resampler> pResampler,
  ) {
    _ma_resampler_get_output_latency ??= _dylib.lookupFunction<
            _c_ma_resampler_get_output_latency,
            _dart_ma_resampler_get_output_latency>(
        'ma_resampler_get_output_latency');
    return _ma_resampler_get_output_latency(
      pResampler,
    );
  }

  _dart_ma_resampler_get_output_latency _ma_resampler_get_output_latency;

  int ma_channel_converter_init(
    ffi.Pointer<ma_channel_converter_config> pConfig,
    ffi.Pointer<ma_channel_converter> pConverter,
  ) {
    _ma_channel_converter_init ??= _dylib.lookupFunction<
        _c_ma_channel_converter_init,
        _dart_ma_channel_converter_init>('ma_channel_converter_init');
    return _ma_channel_converter_init(
      pConfig,
      pConverter,
    );
  }

  _dart_ma_channel_converter_init _ma_channel_converter_init;

  void ma_channel_converter_uninit(
    ffi.Pointer<ma_channel_converter> pConverter,
  ) {
    _ma_channel_converter_uninit ??= _dylib.lookupFunction<
        _c_ma_channel_converter_uninit,
        _dart_ma_channel_converter_uninit>('ma_channel_converter_uninit');
    return _ma_channel_converter_uninit(
      pConverter,
    );
  }

  _dart_ma_channel_converter_uninit _ma_channel_converter_uninit;

  int ma_channel_converter_process_pcm_frames(
    ffi.Pointer<ma_channel_converter> pConverter,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    _ma_channel_converter_process_pcm_frames ??= _dylib.lookupFunction<
            _c_ma_channel_converter_process_pcm_frames,
            _dart_ma_channel_converter_process_pcm_frames>(
        'ma_channel_converter_process_pcm_frames');
    return _ma_channel_converter_process_pcm_frames(
      pConverter,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  _dart_ma_channel_converter_process_pcm_frames
      _ma_channel_converter_process_pcm_frames;

  int ma_data_converter_init(
    ffi.Pointer<ma_data_converter_config> pConfig,
    ffi.Pointer<ma_data_converter> pConverter,
  ) {
    _ma_data_converter_init ??= _dylib.lookupFunction<_c_ma_data_converter_init,
        _dart_ma_data_converter_init>('ma_data_converter_init');
    return _ma_data_converter_init(
      pConfig,
      pConverter,
    );
  }

  _dart_ma_data_converter_init _ma_data_converter_init;

  void ma_data_converter_uninit(
    ffi.Pointer<ma_data_converter> pConverter,
  ) {
    _ma_data_converter_uninit ??= _dylib.lookupFunction<
        _c_ma_data_converter_uninit,
        _dart_ma_data_converter_uninit>('ma_data_converter_uninit');
    return _ma_data_converter_uninit(
      pConverter,
    );
  }

  _dart_ma_data_converter_uninit _ma_data_converter_uninit;

  int ma_data_converter_process_pcm_frames(
    ffi.Pointer<ma_data_converter> pConverter,
    ffi.Pointer<ffi.Void> pFramesIn,
    ffi.Pointer<ffi.Uint64> pFrameCountIn,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Uint64> pFrameCountOut,
  ) {
    _ma_data_converter_process_pcm_frames ??= _dylib.lookupFunction<
            _c_ma_data_converter_process_pcm_frames,
            _dart_ma_data_converter_process_pcm_frames>(
        'ma_data_converter_process_pcm_frames');
    return _ma_data_converter_process_pcm_frames(
      pConverter,
      pFramesIn,
      pFrameCountIn,
      pFramesOut,
      pFrameCountOut,
    );
  }

  _dart_ma_data_converter_process_pcm_frames
      _ma_data_converter_process_pcm_frames;

  int ma_data_converter_set_rate(
    ffi.Pointer<ma_data_converter> pConverter,
    int sampleRateIn,
    int sampleRateOut,
  ) {
    _ma_data_converter_set_rate ??= _dylib.lookupFunction<
        _c_ma_data_converter_set_rate,
        _dart_ma_data_converter_set_rate>('ma_data_converter_set_rate');
    return _ma_data_converter_set_rate(
      pConverter,
      sampleRateIn,
      sampleRateOut,
    );
  }

  _dart_ma_data_converter_set_rate _ma_data_converter_set_rate;

  int ma_data_converter_set_rate_ratio(
    ffi.Pointer<ma_data_converter> pConverter,
    double ratioInOut,
  ) {
    _ma_data_converter_set_rate_ratio ??= _dylib.lookupFunction<
            _c_ma_data_converter_set_rate_ratio,
            _dart_ma_data_converter_set_rate_ratio>(
        'ma_data_converter_set_rate_ratio');
    return _ma_data_converter_set_rate_ratio(
      pConverter,
      ratioInOut,
    );
  }

  _dart_ma_data_converter_set_rate_ratio _ma_data_converter_set_rate_ratio;

  int ma_data_converter_get_required_input_frame_count(
    ffi.Pointer<ma_data_converter> pConverter,
    int outputFrameCount,
  ) {
    _ma_data_converter_get_required_input_frame_count ??= _dylib.lookupFunction<
            _c_ma_data_converter_get_required_input_frame_count,
            _dart_ma_data_converter_get_required_input_frame_count>(
        'ma_data_converter_get_required_input_frame_count');
    return _ma_data_converter_get_required_input_frame_count(
      pConverter,
      outputFrameCount,
    );
  }

  _dart_ma_data_converter_get_required_input_frame_count
      _ma_data_converter_get_required_input_frame_count;

  int ma_data_converter_get_expected_output_frame_count(
    ffi.Pointer<ma_data_converter> pConverter,
    int inputFrameCount,
  ) {
    _ma_data_converter_get_expected_output_frame_count ??=
        _dylib.lookupFunction<
                _c_ma_data_converter_get_expected_output_frame_count,
                _dart_ma_data_converter_get_expected_output_frame_count>(
            'ma_data_converter_get_expected_output_frame_count');
    return _ma_data_converter_get_expected_output_frame_count(
      pConverter,
      inputFrameCount,
    );
  }

  _dart_ma_data_converter_get_expected_output_frame_count
      _ma_data_converter_get_expected_output_frame_count;

  int ma_data_converter_get_input_latency(
    ffi.Pointer<ma_data_converter> pConverter,
  ) {
    _ma_data_converter_get_input_latency ??= _dylib.lookupFunction<
            _c_ma_data_converter_get_input_latency,
            _dart_ma_data_converter_get_input_latency>(
        'ma_data_converter_get_input_latency');
    return _ma_data_converter_get_input_latency(
      pConverter,
    );
  }

  _dart_ma_data_converter_get_input_latency
      _ma_data_converter_get_input_latency;

  int ma_data_converter_get_output_latency(
    ffi.Pointer<ma_data_converter> pConverter,
  ) {
    _ma_data_converter_get_output_latency ??= _dylib.lookupFunction<
            _c_ma_data_converter_get_output_latency,
            _dart_ma_data_converter_get_output_latency>(
        'ma_data_converter_get_output_latency');
    return _ma_data_converter_get_output_latency(
      pConverter,
    );
  }

  _dart_ma_data_converter_get_output_latency
      _ma_data_converter_get_output_latency;

  /// Format Conversion
  void ma_pcm_u8_to_s16(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    _ma_pcm_u8_to_s16 ??=
        _dylib.lookupFunction<_c_ma_pcm_u8_to_s16, _dart_ma_pcm_u8_to_s16>(
            'ma_pcm_u8_to_s16');
    return _ma_pcm_u8_to_s16(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  _dart_ma_pcm_u8_to_s16 _ma_pcm_u8_to_s16;

  void ma_pcm_u8_to_s24(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    _ma_pcm_u8_to_s24 ??=
        _dylib.lookupFunction<_c_ma_pcm_u8_to_s24, _dart_ma_pcm_u8_to_s24>(
            'ma_pcm_u8_to_s24');
    return _ma_pcm_u8_to_s24(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  _dart_ma_pcm_u8_to_s24 _ma_pcm_u8_to_s24;

  void ma_pcm_u8_to_s32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    _ma_pcm_u8_to_s32 ??=
        _dylib.lookupFunction<_c_ma_pcm_u8_to_s32, _dart_ma_pcm_u8_to_s32>(
            'ma_pcm_u8_to_s32');
    return _ma_pcm_u8_to_s32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  _dart_ma_pcm_u8_to_s32 _ma_pcm_u8_to_s32;

  void ma_pcm_u8_to_f32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    _ma_pcm_u8_to_f32 ??=
        _dylib.lookupFunction<_c_ma_pcm_u8_to_f32, _dart_ma_pcm_u8_to_f32>(
            'ma_pcm_u8_to_f32');
    return _ma_pcm_u8_to_f32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  _dart_ma_pcm_u8_to_f32 _ma_pcm_u8_to_f32;

  void ma_pcm_s16_to_u8(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    _ma_pcm_s16_to_u8 ??=
        _dylib.lookupFunction<_c_ma_pcm_s16_to_u8, _dart_ma_pcm_s16_to_u8>(
            'ma_pcm_s16_to_u8');
    return _ma_pcm_s16_to_u8(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  _dart_ma_pcm_s16_to_u8 _ma_pcm_s16_to_u8;

  void ma_pcm_s16_to_s24(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    _ma_pcm_s16_to_s24 ??=
        _dylib.lookupFunction<_c_ma_pcm_s16_to_s24, _dart_ma_pcm_s16_to_s24>(
            'ma_pcm_s16_to_s24');
    return _ma_pcm_s16_to_s24(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  _dart_ma_pcm_s16_to_s24 _ma_pcm_s16_to_s24;

  void ma_pcm_s16_to_s32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    _ma_pcm_s16_to_s32 ??=
        _dylib.lookupFunction<_c_ma_pcm_s16_to_s32, _dart_ma_pcm_s16_to_s32>(
            'ma_pcm_s16_to_s32');
    return _ma_pcm_s16_to_s32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  _dart_ma_pcm_s16_to_s32 _ma_pcm_s16_to_s32;

  void ma_pcm_s16_to_f32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    _ma_pcm_s16_to_f32 ??=
        _dylib.lookupFunction<_c_ma_pcm_s16_to_f32, _dart_ma_pcm_s16_to_f32>(
            'ma_pcm_s16_to_f32');
    return _ma_pcm_s16_to_f32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  _dart_ma_pcm_s16_to_f32 _ma_pcm_s16_to_f32;

  void ma_pcm_s24_to_u8(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    _ma_pcm_s24_to_u8 ??=
        _dylib.lookupFunction<_c_ma_pcm_s24_to_u8, _dart_ma_pcm_s24_to_u8>(
            'ma_pcm_s24_to_u8');
    return _ma_pcm_s24_to_u8(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  _dart_ma_pcm_s24_to_u8 _ma_pcm_s24_to_u8;

  void ma_pcm_s24_to_s16(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    _ma_pcm_s24_to_s16 ??=
        _dylib.lookupFunction<_c_ma_pcm_s24_to_s16, _dart_ma_pcm_s24_to_s16>(
            'ma_pcm_s24_to_s16');
    return _ma_pcm_s24_to_s16(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  _dart_ma_pcm_s24_to_s16 _ma_pcm_s24_to_s16;

  void ma_pcm_s24_to_s32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    _ma_pcm_s24_to_s32 ??=
        _dylib.lookupFunction<_c_ma_pcm_s24_to_s32, _dart_ma_pcm_s24_to_s32>(
            'ma_pcm_s24_to_s32');
    return _ma_pcm_s24_to_s32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  _dart_ma_pcm_s24_to_s32 _ma_pcm_s24_to_s32;

  void ma_pcm_s24_to_f32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    _ma_pcm_s24_to_f32 ??=
        _dylib.lookupFunction<_c_ma_pcm_s24_to_f32, _dart_ma_pcm_s24_to_f32>(
            'ma_pcm_s24_to_f32');
    return _ma_pcm_s24_to_f32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  _dart_ma_pcm_s24_to_f32 _ma_pcm_s24_to_f32;

  void ma_pcm_s32_to_u8(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    _ma_pcm_s32_to_u8 ??=
        _dylib.lookupFunction<_c_ma_pcm_s32_to_u8, _dart_ma_pcm_s32_to_u8>(
            'ma_pcm_s32_to_u8');
    return _ma_pcm_s32_to_u8(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  _dart_ma_pcm_s32_to_u8 _ma_pcm_s32_to_u8;

  void ma_pcm_s32_to_s16(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    _ma_pcm_s32_to_s16 ??=
        _dylib.lookupFunction<_c_ma_pcm_s32_to_s16, _dart_ma_pcm_s32_to_s16>(
            'ma_pcm_s32_to_s16');
    return _ma_pcm_s32_to_s16(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  _dart_ma_pcm_s32_to_s16 _ma_pcm_s32_to_s16;

  void ma_pcm_s32_to_s24(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    _ma_pcm_s32_to_s24 ??=
        _dylib.lookupFunction<_c_ma_pcm_s32_to_s24, _dart_ma_pcm_s32_to_s24>(
            'ma_pcm_s32_to_s24');
    return _ma_pcm_s32_to_s24(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  _dart_ma_pcm_s32_to_s24 _ma_pcm_s32_to_s24;

  void ma_pcm_s32_to_f32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    _ma_pcm_s32_to_f32 ??=
        _dylib.lookupFunction<_c_ma_pcm_s32_to_f32, _dart_ma_pcm_s32_to_f32>(
            'ma_pcm_s32_to_f32');
    return _ma_pcm_s32_to_f32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  _dart_ma_pcm_s32_to_f32 _ma_pcm_s32_to_f32;

  void ma_pcm_f32_to_u8(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    _ma_pcm_f32_to_u8 ??=
        _dylib.lookupFunction<_c_ma_pcm_f32_to_u8, _dart_ma_pcm_f32_to_u8>(
            'ma_pcm_f32_to_u8');
    return _ma_pcm_f32_to_u8(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  _dart_ma_pcm_f32_to_u8 _ma_pcm_f32_to_u8;

  void ma_pcm_f32_to_s16(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    _ma_pcm_f32_to_s16 ??=
        _dylib.lookupFunction<_c_ma_pcm_f32_to_s16, _dart_ma_pcm_f32_to_s16>(
            'ma_pcm_f32_to_s16');
    return _ma_pcm_f32_to_s16(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  _dart_ma_pcm_f32_to_s16 _ma_pcm_f32_to_s16;

  void ma_pcm_f32_to_s24(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    _ma_pcm_f32_to_s24 ??=
        _dylib.lookupFunction<_c_ma_pcm_f32_to_s24, _dart_ma_pcm_f32_to_s24>(
            'ma_pcm_f32_to_s24');
    return _ma_pcm_f32_to_s24(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  _dart_ma_pcm_f32_to_s24 _ma_pcm_f32_to_s24;

  void ma_pcm_f32_to_s32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    _ma_pcm_f32_to_s32 ??=
        _dylib.lookupFunction<_c_ma_pcm_f32_to_s32, _dart_ma_pcm_f32_to_s32>(
            'ma_pcm_f32_to_s32');
    return _ma_pcm_f32_to_s32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  _dart_ma_pcm_f32_to_s32 _ma_pcm_f32_to_s32;

  void ma_pcm_convert(
    ffi.Pointer<ffi.Void> pOut,
    int formatOut,
    ffi.Pointer<ffi.Void> pIn,
    int formatIn,
    int sampleCount,
    int ditherMode,
  ) {
    _ma_pcm_convert ??=
        _dylib.lookupFunction<_c_ma_pcm_convert, _dart_ma_pcm_convert>(
            'ma_pcm_convert');
    return _ma_pcm_convert(
      pOut,
      formatOut,
      pIn,
      formatIn,
      sampleCount,
      ditherMode,
    );
  }

  _dart_ma_pcm_convert _ma_pcm_convert;

  void ma_convert_pcm_frames_format(
    ffi.Pointer<ffi.Void> pOut,
    int formatOut,
    ffi.Pointer<ffi.Void> pIn,
    int formatIn,
    int frameCount,
    int channels,
    int ditherMode,
  ) {
    _ma_convert_pcm_frames_format ??= _dylib.lookupFunction<
        _c_ma_convert_pcm_frames_format,
        _dart_ma_convert_pcm_frames_format>('ma_convert_pcm_frames_format');
    return _ma_convert_pcm_frames_format(
      pOut,
      formatOut,
      pIn,
      formatIn,
      frameCount,
      channels,
      ditherMode,
    );
  }

  _dart_ma_convert_pcm_frames_format _ma_convert_pcm_frames_format;

  void ma_deinterleave_pcm_frames(
    int format,
    int channels,
    int frameCount,
    ffi.Pointer<ffi.Void> pInterleavedPCMFrames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppDeinterleavedPCMFrames,
  ) {
    _ma_deinterleave_pcm_frames ??= _dylib.lookupFunction<
        _c_ma_deinterleave_pcm_frames,
        _dart_ma_deinterleave_pcm_frames>('ma_deinterleave_pcm_frames');
    return _ma_deinterleave_pcm_frames(
      format,
      channels,
      frameCount,
      pInterleavedPCMFrames,
      ppDeinterleavedPCMFrames,
    );
  }

  _dart_ma_deinterleave_pcm_frames _ma_deinterleave_pcm_frames;

  void ma_interleave_pcm_frames(
    int format,
    int channels,
    int frameCount,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppDeinterleavedPCMFrames,
    ffi.Pointer<ffi.Void> pInterleavedPCMFrames,
  ) {
    _ma_interleave_pcm_frames ??= _dylib.lookupFunction<
        _c_ma_interleave_pcm_frames,
        _dart_ma_interleave_pcm_frames>('ma_interleave_pcm_frames');
    return _ma_interleave_pcm_frames(
      format,
      channels,
      frameCount,
      ppDeinterleavedPCMFrames,
      pInterleavedPCMFrames,
    );
  }

  _dart_ma_interleave_pcm_frames _ma_interleave_pcm_frames;

  /// Channel Maps
  void ma_channel_map_init_blank(
    int channels,
    ffi.Pointer<ffi.Uint8> pChannelMap,
  ) {
    _ma_channel_map_init_blank ??= _dylib.lookupFunction<
        _c_ma_channel_map_init_blank,
        _dart_ma_channel_map_init_blank>('ma_channel_map_init_blank');
    return _ma_channel_map_init_blank(
      channels,
      pChannelMap,
    );
  }

  _dart_ma_channel_map_init_blank _ma_channel_map_init_blank;

  void ma_get_standard_channel_map(
    int standardChannelMap,
    int channels,
    ffi.Pointer<ffi.Uint8> pChannelMap,
  ) {
    _ma_get_standard_channel_map ??= _dylib.lookupFunction<
        _c_ma_get_standard_channel_map,
        _dart_ma_get_standard_channel_map>('ma_get_standard_channel_map');
    return _ma_get_standard_channel_map(
      standardChannelMap,
      channels,
      pChannelMap,
    );
  }

  _dart_ma_get_standard_channel_map _ma_get_standard_channel_map;

  void ma_channel_map_copy(
    ffi.Pointer<ffi.Uint8> pOut,
    ffi.Pointer<ffi.Uint8> pIn,
    int channels,
  ) {
    _ma_channel_map_copy ??= _dylib.lookupFunction<_c_ma_channel_map_copy,
        _dart_ma_channel_map_copy>('ma_channel_map_copy');
    return _ma_channel_map_copy(
      pOut,
      pIn,
      channels,
    );
  }

  _dart_ma_channel_map_copy _ma_channel_map_copy;

  void ma_channel_map_copy_or_default(
    ffi.Pointer<ffi.Uint8> pOut,
    ffi.Pointer<ffi.Uint8> pIn,
    int channels,
  ) {
    _ma_channel_map_copy_or_default ??= _dylib.lookupFunction<
        _c_ma_channel_map_copy_or_default,
        _dart_ma_channel_map_copy_or_default>('ma_channel_map_copy_or_default');
    return _ma_channel_map_copy_or_default(
      pOut,
      pIn,
      channels,
    );
  }

  _dart_ma_channel_map_copy_or_default _ma_channel_map_copy_or_default;

  int ma_channel_map_valid(
    int channels,
    ffi.Pointer<ffi.Uint8> pChannelMap,
  ) {
    _ma_channel_map_valid ??= _dylib.lookupFunction<_c_ma_channel_map_valid,
        _dart_ma_channel_map_valid>('ma_channel_map_valid');
    return _ma_channel_map_valid(
      channels,
      pChannelMap,
    );
  }

  _dart_ma_channel_map_valid _ma_channel_map_valid;

  int ma_channel_map_equal(
    int channels,
    ffi.Pointer<ffi.Uint8> pChannelMapA,
    ffi.Pointer<ffi.Uint8> pChannelMapB,
  ) {
    _ma_channel_map_equal ??= _dylib.lookupFunction<_c_ma_channel_map_equal,
        _dart_ma_channel_map_equal>('ma_channel_map_equal');
    return _ma_channel_map_equal(
      channels,
      pChannelMapA,
      pChannelMapB,
    );
  }

  _dart_ma_channel_map_equal _ma_channel_map_equal;

  int ma_channel_map_blank(
    int channels,
    ffi.Pointer<ffi.Uint8> pChannelMap,
  ) {
    _ma_channel_map_blank ??= _dylib.lookupFunction<_c_ma_channel_map_blank,
        _dart_ma_channel_map_blank>('ma_channel_map_blank');
    return _ma_channel_map_blank(
      channels,
      pChannelMap,
    );
  }

  _dart_ma_channel_map_blank _ma_channel_map_blank;

  int ma_channel_map_contains_channel_position(
    int channels,
    ffi.Pointer<ffi.Uint8> pChannelMap,
    int channelPosition,
  ) {
    _ma_channel_map_contains_channel_position ??= _dylib.lookupFunction<
            _c_ma_channel_map_contains_channel_position,
            _dart_ma_channel_map_contains_channel_position>(
        'ma_channel_map_contains_channel_position');
    return _ma_channel_map_contains_channel_position(
      channels,
      pChannelMap,
      channelPosition,
    );
  }

  _dart_ma_channel_map_contains_channel_position
      _ma_channel_map_contains_channel_position;

  /// Conversion Helpers
  int ma_convert_frames(
    ffi.Pointer<ffi.Void> pOut,
    int frameCountOut,
    int formatOut,
    int channelsOut,
    int sampleRateOut,
    ffi.Pointer<ffi.Void> pIn,
    int frameCountIn,
    int formatIn,
    int channelsIn,
    int sampleRateIn,
  ) {
    _ma_convert_frames ??=
        _dylib.lookupFunction<_c_ma_convert_frames, _dart_ma_convert_frames>(
            'ma_convert_frames');
    return _ma_convert_frames(
      pOut,
      frameCountOut,
      formatOut,
      channelsOut,
      sampleRateOut,
      pIn,
      frameCountIn,
      formatIn,
      channelsIn,
      sampleRateIn,
    );
  }

  _dart_ma_convert_frames _ma_convert_frames;

  int ma_convert_frames_ex(
    ffi.Pointer<ffi.Void> pOut,
    int frameCountOut,
    ffi.Pointer<ffi.Void> pIn,
    int frameCountIn,
    ffi.Pointer<ma_data_converter_config> pConfig,
  ) {
    _ma_convert_frames_ex ??= _dylib.lookupFunction<_c_ma_convert_frames_ex,
        _dart_ma_convert_frames_ex>('ma_convert_frames_ex');
    return _ma_convert_frames_ex(
      pOut,
      frameCountOut,
      pIn,
      frameCountIn,
      pConfig,
    );
  }

  _dart_ma_convert_frames_ex _ma_convert_frames_ex;

  int ma_rb_init_ex(
    int subbufferSizeInBytes,
    int subbufferCount,
    int subbufferStrideInBytes,
    ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_rb> pRB,
  ) {
    _ma_rb_init_ex ??= _dylib
        .lookupFunction<_c_ma_rb_init_ex, _dart_ma_rb_init_ex>('ma_rb_init_ex');
    return _ma_rb_init_ex(
      subbufferSizeInBytes,
      subbufferCount,
      subbufferStrideInBytes,
      pOptionalPreallocatedBuffer,
      pAllocationCallbacks,
      pRB,
    );
  }

  _dart_ma_rb_init_ex _ma_rb_init_ex;

  int ma_rb_init(
    int bufferSizeInBytes,
    ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_rb> pRB,
  ) {
    _ma_rb_init ??=
        _dylib.lookupFunction<_c_ma_rb_init, _dart_ma_rb_init>('ma_rb_init');
    return _ma_rb_init(
      bufferSizeInBytes,
      pOptionalPreallocatedBuffer,
      pAllocationCallbacks,
      pRB,
    );
  }

  _dart_ma_rb_init _ma_rb_init;

  void ma_rb_uninit(
    ffi.Pointer<ma_rb> pRB,
  ) {
    _ma_rb_uninit ??= _dylib
        .lookupFunction<_c_ma_rb_uninit, _dart_ma_rb_uninit>('ma_rb_uninit');
    return _ma_rb_uninit(
      pRB,
    );
  }

  _dart_ma_rb_uninit _ma_rb_uninit;

  void ma_rb_reset(
    ffi.Pointer<ma_rb> pRB,
  ) {
    _ma_rb_reset ??=
        _dylib.lookupFunction<_c_ma_rb_reset, _dart_ma_rb_reset>('ma_rb_reset');
    return _ma_rb_reset(
      pRB,
    );
  }

  _dart_ma_rb_reset _ma_rb_reset;

  int ma_rb_acquire_read(
    ffi.Pointer<ma_rb> pRB,
    ffi.Pointer<ffi.Uint64> pSizeInBytes,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
  ) {
    _ma_rb_acquire_read ??=
        _dylib.lookupFunction<_c_ma_rb_acquire_read, _dart_ma_rb_acquire_read>(
            'ma_rb_acquire_read');
    return _ma_rb_acquire_read(
      pRB,
      pSizeInBytes,
      ppBufferOut,
    );
  }

  _dart_ma_rb_acquire_read _ma_rb_acquire_read;

  int ma_rb_commit_read(
    ffi.Pointer<ma_rb> pRB,
    int sizeInBytes,
    ffi.Pointer<ffi.Void> pBufferOut,
  ) {
    _ma_rb_commit_read ??=
        _dylib.lookupFunction<_c_ma_rb_commit_read, _dart_ma_rb_commit_read>(
            'ma_rb_commit_read');
    return _ma_rb_commit_read(
      pRB,
      sizeInBytes,
      pBufferOut,
    );
  }

  _dart_ma_rb_commit_read _ma_rb_commit_read;

  int ma_rb_acquire_write(
    ffi.Pointer<ma_rb> pRB,
    ffi.Pointer<ffi.Uint64> pSizeInBytes,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
  ) {
    _ma_rb_acquire_write ??= _dylib.lookupFunction<_c_ma_rb_acquire_write,
        _dart_ma_rb_acquire_write>('ma_rb_acquire_write');
    return _ma_rb_acquire_write(
      pRB,
      pSizeInBytes,
      ppBufferOut,
    );
  }

  _dart_ma_rb_acquire_write _ma_rb_acquire_write;

  int ma_rb_commit_write(
    ffi.Pointer<ma_rb> pRB,
    int sizeInBytes,
    ffi.Pointer<ffi.Void> pBufferOut,
  ) {
    _ma_rb_commit_write ??=
        _dylib.lookupFunction<_c_ma_rb_commit_write, _dart_ma_rb_commit_write>(
            'ma_rb_commit_write');
    return _ma_rb_commit_write(
      pRB,
      sizeInBytes,
      pBufferOut,
    );
  }

  _dart_ma_rb_commit_write _ma_rb_commit_write;

  int ma_rb_seek_read(
    ffi.Pointer<ma_rb> pRB,
    int offsetInBytes,
  ) {
    _ma_rb_seek_read ??=
        _dylib.lookupFunction<_c_ma_rb_seek_read, _dart_ma_rb_seek_read>(
            'ma_rb_seek_read');
    return _ma_rb_seek_read(
      pRB,
      offsetInBytes,
    );
  }

  _dart_ma_rb_seek_read _ma_rb_seek_read;

  int ma_rb_seek_write(
    ffi.Pointer<ma_rb> pRB,
    int offsetInBytes,
  ) {
    _ma_rb_seek_write ??=
        _dylib.lookupFunction<_c_ma_rb_seek_write, _dart_ma_rb_seek_write>(
            'ma_rb_seek_write');
    return _ma_rb_seek_write(
      pRB,
      offsetInBytes,
    );
  }

  _dart_ma_rb_seek_write _ma_rb_seek_write;

  int ma_rb_pointer_distance(
    ffi.Pointer<ma_rb> pRB,
  ) {
    _ma_rb_pointer_distance ??= _dylib.lookupFunction<_c_ma_rb_pointer_distance,
        _dart_ma_rb_pointer_distance>('ma_rb_pointer_distance');
    return _ma_rb_pointer_distance(
      pRB,
    );
  }

  _dart_ma_rb_pointer_distance _ma_rb_pointer_distance;

  int ma_rb_available_read(
    ffi.Pointer<ma_rb> pRB,
  ) {
    _ma_rb_available_read ??= _dylib.lookupFunction<_c_ma_rb_available_read,
        _dart_ma_rb_available_read>('ma_rb_available_read');
    return _ma_rb_available_read(
      pRB,
    );
  }

  _dart_ma_rb_available_read _ma_rb_available_read;

  int ma_rb_available_write(
    ffi.Pointer<ma_rb> pRB,
  ) {
    _ma_rb_available_write ??= _dylib.lookupFunction<_c_ma_rb_available_write,
        _dart_ma_rb_available_write>('ma_rb_available_write');
    return _ma_rb_available_write(
      pRB,
    );
  }

  _dart_ma_rb_available_write _ma_rb_available_write;

  int ma_rb_get_subbuffer_size(
    ffi.Pointer<ma_rb> pRB,
  ) {
    _ma_rb_get_subbuffer_size ??= _dylib.lookupFunction<
        _c_ma_rb_get_subbuffer_size,
        _dart_ma_rb_get_subbuffer_size>('ma_rb_get_subbuffer_size');
    return _ma_rb_get_subbuffer_size(
      pRB,
    );
  }

  _dart_ma_rb_get_subbuffer_size _ma_rb_get_subbuffer_size;

  int ma_rb_get_subbuffer_stride(
    ffi.Pointer<ma_rb> pRB,
  ) {
    _ma_rb_get_subbuffer_stride ??= _dylib.lookupFunction<
        _c_ma_rb_get_subbuffer_stride,
        _dart_ma_rb_get_subbuffer_stride>('ma_rb_get_subbuffer_stride');
    return _ma_rb_get_subbuffer_stride(
      pRB,
    );
  }

  _dart_ma_rb_get_subbuffer_stride _ma_rb_get_subbuffer_stride;

  int ma_rb_get_subbuffer_offset(
    ffi.Pointer<ma_rb> pRB,
    int subbufferIndex,
  ) {
    _ma_rb_get_subbuffer_offset ??= _dylib.lookupFunction<
        _c_ma_rb_get_subbuffer_offset,
        _dart_ma_rb_get_subbuffer_offset>('ma_rb_get_subbuffer_offset');
    return _ma_rb_get_subbuffer_offset(
      pRB,
      subbufferIndex,
    );
  }

  _dart_ma_rb_get_subbuffer_offset _ma_rb_get_subbuffer_offset;

  ffi.Pointer<ffi.Void> ma_rb_get_subbuffer_ptr(
    ffi.Pointer<ma_rb> pRB,
    int subbufferIndex,
    ffi.Pointer<ffi.Void> pBuffer,
  ) {
    _ma_rb_get_subbuffer_ptr ??= _dylib.lookupFunction<
        _c_ma_rb_get_subbuffer_ptr,
        _dart_ma_rb_get_subbuffer_ptr>('ma_rb_get_subbuffer_ptr');
    return _ma_rb_get_subbuffer_ptr(
      pRB,
      subbufferIndex,
      pBuffer,
    );
  }

  _dart_ma_rb_get_subbuffer_ptr _ma_rb_get_subbuffer_ptr;

  int ma_pcm_rb_init_ex(
    int format,
    int channels,
    int subbufferSizeInFrames,
    int subbufferCount,
    int subbufferStrideInFrames,
    ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    _ma_pcm_rb_init_ex ??=
        _dylib.lookupFunction<_c_ma_pcm_rb_init_ex, _dart_ma_pcm_rb_init_ex>(
            'ma_pcm_rb_init_ex');
    return _ma_pcm_rb_init_ex(
      format,
      channels,
      subbufferSizeInFrames,
      subbufferCount,
      subbufferStrideInFrames,
      pOptionalPreallocatedBuffer,
      pAllocationCallbacks,
      pRB,
    );
  }

  _dart_ma_pcm_rb_init_ex _ma_pcm_rb_init_ex;

  int ma_pcm_rb_init(
    int format,
    int channels,
    int bufferSizeInFrames,
    ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    _ma_pcm_rb_init ??=
        _dylib.lookupFunction<_c_ma_pcm_rb_init, _dart_ma_pcm_rb_init>(
            'ma_pcm_rb_init');
    return _ma_pcm_rb_init(
      format,
      channels,
      bufferSizeInFrames,
      pOptionalPreallocatedBuffer,
      pAllocationCallbacks,
      pRB,
    );
  }

  _dart_ma_pcm_rb_init _ma_pcm_rb_init;

  void ma_pcm_rb_uninit(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    _ma_pcm_rb_uninit ??=
        _dylib.lookupFunction<_c_ma_pcm_rb_uninit, _dart_ma_pcm_rb_uninit>(
            'ma_pcm_rb_uninit');
    return _ma_pcm_rb_uninit(
      pRB,
    );
  }

  _dart_ma_pcm_rb_uninit _ma_pcm_rb_uninit;

  void ma_pcm_rb_reset(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    _ma_pcm_rb_reset ??=
        _dylib.lookupFunction<_c_ma_pcm_rb_reset, _dart_ma_pcm_rb_reset>(
            'ma_pcm_rb_reset');
    return _ma_pcm_rb_reset(
      pRB,
    );
  }

  _dart_ma_pcm_rb_reset _ma_pcm_rb_reset;

  int ma_pcm_rb_acquire_read(
    ffi.Pointer<ma_pcm_rb> pRB,
    ffi.Pointer<ffi.Uint32> pSizeInFrames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
  ) {
    _ma_pcm_rb_acquire_read ??= _dylib.lookupFunction<_c_ma_pcm_rb_acquire_read,
        _dart_ma_pcm_rb_acquire_read>('ma_pcm_rb_acquire_read');
    return _ma_pcm_rb_acquire_read(
      pRB,
      pSizeInFrames,
      ppBufferOut,
    );
  }

  _dart_ma_pcm_rb_acquire_read _ma_pcm_rb_acquire_read;

  int ma_pcm_rb_commit_read(
    ffi.Pointer<ma_pcm_rb> pRB,
    int sizeInFrames,
    ffi.Pointer<ffi.Void> pBufferOut,
  ) {
    _ma_pcm_rb_commit_read ??= _dylib.lookupFunction<_c_ma_pcm_rb_commit_read,
        _dart_ma_pcm_rb_commit_read>('ma_pcm_rb_commit_read');
    return _ma_pcm_rb_commit_read(
      pRB,
      sizeInFrames,
      pBufferOut,
    );
  }

  _dart_ma_pcm_rb_commit_read _ma_pcm_rb_commit_read;

  int ma_pcm_rb_acquire_write(
    ffi.Pointer<ma_pcm_rb> pRB,
    ffi.Pointer<ffi.Uint32> pSizeInFrames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
  ) {
    _ma_pcm_rb_acquire_write ??= _dylib.lookupFunction<
        _c_ma_pcm_rb_acquire_write,
        _dart_ma_pcm_rb_acquire_write>('ma_pcm_rb_acquire_write');
    return _ma_pcm_rb_acquire_write(
      pRB,
      pSizeInFrames,
      ppBufferOut,
    );
  }

  _dart_ma_pcm_rb_acquire_write _ma_pcm_rb_acquire_write;

  int ma_pcm_rb_commit_write(
    ffi.Pointer<ma_pcm_rb> pRB,
    int sizeInFrames,
    ffi.Pointer<ffi.Void> pBufferOut,
  ) {
    _ma_pcm_rb_commit_write ??= _dylib.lookupFunction<_c_ma_pcm_rb_commit_write,
        _dart_ma_pcm_rb_commit_write>('ma_pcm_rb_commit_write');
    return _ma_pcm_rb_commit_write(
      pRB,
      sizeInFrames,
      pBufferOut,
    );
  }

  _dart_ma_pcm_rb_commit_write _ma_pcm_rb_commit_write;

  int ma_pcm_rb_seek_read(
    ffi.Pointer<ma_pcm_rb> pRB,
    int offsetInFrames,
  ) {
    _ma_pcm_rb_seek_read ??= _dylib.lookupFunction<_c_ma_pcm_rb_seek_read,
        _dart_ma_pcm_rb_seek_read>('ma_pcm_rb_seek_read');
    return _ma_pcm_rb_seek_read(
      pRB,
      offsetInFrames,
    );
  }

  _dart_ma_pcm_rb_seek_read _ma_pcm_rb_seek_read;

  int ma_pcm_rb_seek_write(
    ffi.Pointer<ma_pcm_rb> pRB,
    int offsetInFrames,
  ) {
    _ma_pcm_rb_seek_write ??= _dylib.lookupFunction<_c_ma_pcm_rb_seek_write,
        _dart_ma_pcm_rb_seek_write>('ma_pcm_rb_seek_write');
    return _ma_pcm_rb_seek_write(
      pRB,
      offsetInFrames,
    );
  }

  _dart_ma_pcm_rb_seek_write _ma_pcm_rb_seek_write;

  int ma_pcm_rb_pointer_distance(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    _ma_pcm_rb_pointer_distance ??= _dylib.lookupFunction<
        _c_ma_pcm_rb_pointer_distance,
        _dart_ma_pcm_rb_pointer_distance>('ma_pcm_rb_pointer_distance');
    return _ma_pcm_rb_pointer_distance(
      pRB,
    );
  }

  _dart_ma_pcm_rb_pointer_distance _ma_pcm_rb_pointer_distance;

  int ma_pcm_rb_available_read(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    _ma_pcm_rb_available_read ??= _dylib.lookupFunction<
        _c_ma_pcm_rb_available_read,
        _dart_ma_pcm_rb_available_read>('ma_pcm_rb_available_read');
    return _ma_pcm_rb_available_read(
      pRB,
    );
  }

  _dart_ma_pcm_rb_available_read _ma_pcm_rb_available_read;

  int ma_pcm_rb_available_write(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    _ma_pcm_rb_available_write ??= _dylib.lookupFunction<
        _c_ma_pcm_rb_available_write,
        _dart_ma_pcm_rb_available_write>('ma_pcm_rb_available_write');
    return _ma_pcm_rb_available_write(
      pRB,
    );
  }

  _dart_ma_pcm_rb_available_write _ma_pcm_rb_available_write;

  int ma_pcm_rb_get_subbuffer_size(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    _ma_pcm_rb_get_subbuffer_size ??= _dylib.lookupFunction<
        _c_ma_pcm_rb_get_subbuffer_size,
        _dart_ma_pcm_rb_get_subbuffer_size>('ma_pcm_rb_get_subbuffer_size');
    return _ma_pcm_rb_get_subbuffer_size(
      pRB,
    );
  }

  _dart_ma_pcm_rb_get_subbuffer_size _ma_pcm_rb_get_subbuffer_size;

  int ma_pcm_rb_get_subbuffer_stride(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    _ma_pcm_rb_get_subbuffer_stride ??= _dylib.lookupFunction<
        _c_ma_pcm_rb_get_subbuffer_stride,
        _dart_ma_pcm_rb_get_subbuffer_stride>('ma_pcm_rb_get_subbuffer_stride');
    return _ma_pcm_rb_get_subbuffer_stride(
      pRB,
    );
  }

  _dart_ma_pcm_rb_get_subbuffer_stride _ma_pcm_rb_get_subbuffer_stride;

  int ma_pcm_rb_get_subbuffer_offset(
    ffi.Pointer<ma_pcm_rb> pRB,
    int subbufferIndex,
  ) {
    _ma_pcm_rb_get_subbuffer_offset ??= _dylib.lookupFunction<
        _c_ma_pcm_rb_get_subbuffer_offset,
        _dart_ma_pcm_rb_get_subbuffer_offset>('ma_pcm_rb_get_subbuffer_offset');
    return _ma_pcm_rb_get_subbuffer_offset(
      pRB,
      subbufferIndex,
    );
  }

  _dart_ma_pcm_rb_get_subbuffer_offset _ma_pcm_rb_get_subbuffer_offset;

  ffi.Pointer<ffi.Void> ma_pcm_rb_get_subbuffer_ptr(
    ffi.Pointer<ma_pcm_rb> pRB,
    int subbufferIndex,
    ffi.Pointer<ffi.Void> pBuffer,
  ) {
    _ma_pcm_rb_get_subbuffer_ptr ??= _dylib.lookupFunction<
        _c_ma_pcm_rb_get_subbuffer_ptr,
        _dart_ma_pcm_rb_get_subbuffer_ptr>('ma_pcm_rb_get_subbuffer_ptr');
    return _ma_pcm_rb_get_subbuffer_ptr(
      pRB,
      subbufferIndex,
      pBuffer,
    );
  }

  _dart_ma_pcm_rb_get_subbuffer_ptr _ma_pcm_rb_get_subbuffer_ptr;

  int ma_duplex_rb_init(
    int inputSampleRate,
    int captureFormat,
    int captureChannels,
    int captureSampleRate,
    int capturePeriodSizeInFrames,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_duplex_rb> pRB,
  ) {
    _ma_duplex_rb_init ??=
        _dylib.lookupFunction<_c_ma_duplex_rb_init, _dart_ma_duplex_rb_init>(
            'ma_duplex_rb_init');
    return _ma_duplex_rb_init(
      inputSampleRate,
      captureFormat,
      captureChannels,
      captureSampleRate,
      capturePeriodSizeInFrames,
      pAllocationCallbacks,
      pRB,
    );
  }

  _dart_ma_duplex_rb_init _ma_duplex_rb_init;

  int ma_duplex_rb_uninit(
    ffi.Pointer<ma_duplex_rb> pRB,
  ) {
    _ma_duplex_rb_uninit ??= _dylib.lookupFunction<_c_ma_duplex_rb_uninit,
        _dart_ma_duplex_rb_uninit>('ma_duplex_rb_uninit');
    return _ma_duplex_rb_uninit(
      pRB,
    );
  }

  _dart_ma_duplex_rb_uninit _ma_duplex_rb_uninit;

  /// Miscellaneous Helpers
  ffi.Pointer<ffi.Int8> ma_result_description(
    int result,
  ) {
    _ma_result_description ??= _dylib.lookupFunction<_c_ma_result_description,
        _dart_ma_result_description>('ma_result_description');
    return _ma_result_description(
      result,
    );
  }

  _dart_ma_result_description _ma_result_description;

  ffi.Pointer<ffi.Void> ma_malloc(
    int sz,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    _ma_malloc ??=
        _dylib.lookupFunction<_c_ma_malloc, _dart_ma_malloc>('ma_malloc');
    return _ma_malloc(
      sz,
      pAllocationCallbacks,
    );
  }

  _dart_ma_malloc _ma_malloc;

  ffi.Pointer<ffi.Void> ma_realloc(
    ffi.Pointer<ffi.Void> p,
    int sz,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    _ma_realloc ??=
        _dylib.lookupFunction<_c_ma_realloc, _dart_ma_realloc>('ma_realloc');
    return _ma_realloc(
      p,
      sz,
      pAllocationCallbacks,
    );
  }

  _dart_ma_realloc _ma_realloc;

  void ma_free(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    _ma_free ??= _dylib.lookupFunction<_c_ma_free, _dart_ma_free>('ma_free');
    return _ma_free(
      p,
      pAllocationCallbacks,
    );
  }

  _dart_ma_free _ma_free;

  ffi.Pointer<ffi.Void> ma_aligned_malloc(
    int sz,
    int alignment,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    _ma_aligned_malloc ??=
        _dylib.lookupFunction<_c_ma_aligned_malloc, _dart_ma_aligned_malloc>(
            'ma_aligned_malloc');
    return _ma_aligned_malloc(
      sz,
      alignment,
      pAllocationCallbacks,
    );
  }

  _dart_ma_aligned_malloc _ma_aligned_malloc;

  void ma_aligned_free(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    _ma_aligned_free ??=
        _dylib.lookupFunction<_c_ma_aligned_free, _dart_ma_aligned_free>(
            'ma_aligned_free');
    return _ma_aligned_free(
      p,
      pAllocationCallbacks,
    );
  }

  _dart_ma_aligned_free _ma_aligned_free;

  ffi.Pointer<ffi.Int8> ma_get_format_name(
    int format,
  ) {
    _ma_get_format_name ??=
        _dylib.lookupFunction<_c_ma_get_format_name, _dart_ma_get_format_name>(
            'ma_get_format_name');
    return _ma_get_format_name(
      format,
    );
  }

  _dart_ma_get_format_name _ma_get_format_name;

  void ma_blend_f32(
    ffi.Pointer<ffi.Float> pOut,
    ffi.Pointer<ffi.Float> pInA,
    ffi.Pointer<ffi.Float> pInB,
    double factor,
    int channels,
  ) {
    _ma_blend_f32 ??= _dylib
        .lookupFunction<_c_ma_blend_f32, _dart_ma_blend_f32>('ma_blend_f32');
    return _ma_blend_f32(
      pOut,
      pInA,
      pInB,
      factor,
      channels,
    );
  }

  _dart_ma_blend_f32 _ma_blend_f32;

  int ma_get_bytes_per_sample(
    int format,
  ) {
    _ma_get_bytes_per_sample ??= _dylib.lookupFunction<
        _c_ma_get_bytes_per_sample,
        _dart_ma_get_bytes_per_sample>('ma_get_bytes_per_sample');
    return _ma_get_bytes_per_sample(
      format,
    );
  }

  _dart_ma_get_bytes_per_sample _ma_get_bytes_per_sample;

  int ma_get_bytes_per_frame(
    int format,
    int channels,
  ) {
    _ma_get_bytes_per_frame ??= _dylib.lookupFunction<_c_ma_get_bytes_per_frame,
        _dart_ma_get_bytes_per_frame>('ma_get_bytes_per_frame');
    return _ma_get_bytes_per_frame(
      format,
      channels,
    );
  }

  _dart_ma_get_bytes_per_frame _ma_get_bytes_per_frame;

  ffi.Pointer<ffi.Int8> ma_log_level_to_string(
    int logLevel,
  ) {
    _ma_log_level_to_string ??= _dylib.lookupFunction<_c_ma_log_level_to_string,
        _dart_ma_log_level_to_string>('ma_log_level_to_string');
    return _ma_log_level_to_string(
      logLevel,
    );
  }

  _dart_ma_log_level_to_string _ma_log_level_to_string;

  int ma_context_init(
    ffi.Pointer<ffi.Int32> backends,
    int backendCount,
    ffi.Pointer<ma_context_config> pConfig,
    ffi.Pointer<ma_context> pContext,
  ) {
    _ma_context_init ??=
        _dylib.lookupFunction<_c_ma_context_init, _dart_ma_context_init>(
            'ma_context_init');
    return _ma_context_init(
      backends,
      backendCount,
      pConfig,
      pContext,
    );
  }

  _dart_ma_context_init _ma_context_init;

  int ma_context_uninit(
    ffi.Pointer<ma_context> pContext,
  ) {
    _ma_context_uninit ??=
        _dylib.lookupFunction<_c_ma_context_uninit, _dart_ma_context_uninit>(
            'ma_context_uninit');
    return _ma_context_uninit(
      pContext,
    );
  }

  _dart_ma_context_uninit _ma_context_uninit;

  int ma_context_sizeof() {
    _ma_context_sizeof ??=
        _dylib.lookupFunction<_c_ma_context_sizeof, _dart_ma_context_sizeof>(
            'ma_context_sizeof');
    return _ma_context_sizeof();
  }

  _dart_ma_context_sizeof _ma_context_sizeof;

  int ma_context_enumerate_devices(
    ffi.Pointer<ma_context> pContext,
    ffi.Pointer<ffi.NativeFunction<ma_enum_devices_callback_proc>> callback,
    ffi.Pointer<ffi.Void> pUserData,
  ) {
    _ma_context_enumerate_devices ??= _dylib.lookupFunction<
        _c_ma_context_enumerate_devices,
        _dart_ma_context_enumerate_devices>('ma_context_enumerate_devices');
    return _ma_context_enumerate_devices(
      pContext,
      callback,
      pUserData,
    );
  }

  _dart_ma_context_enumerate_devices _ma_context_enumerate_devices;

  int ma_context_get_devices(
    ffi.Pointer<ma_context> pContext,
    ffi.Pointer<ffi.Pointer<ma_device_info>> ppPlaybackDeviceInfos,
    ffi.Pointer<ffi.Uint32> pPlaybackDeviceCount,
    ffi.Pointer<ffi.Pointer<ma_device_info>> ppCaptureDeviceInfos,
    ffi.Pointer<ffi.Uint32> pCaptureDeviceCount,
  ) {
    _ma_context_get_devices ??= _dylib.lookupFunction<_c_ma_context_get_devices,
        _dart_ma_context_get_devices>('ma_context_get_devices');
    return _ma_context_get_devices(
      pContext,
      ppPlaybackDeviceInfos,
      pPlaybackDeviceCount,
      ppCaptureDeviceInfos,
      pCaptureDeviceCount,
    );
  }

  _dart_ma_context_get_devices _ma_context_get_devices;

  int ma_context_is_loopback_supported(
    ffi.Pointer<ma_context> pContext,
  ) {
    _ma_context_is_loopback_supported ??= _dylib.lookupFunction<
            _c_ma_context_is_loopback_supported,
            _dart_ma_context_is_loopback_supported>(
        'ma_context_is_loopback_supported');
    return _ma_context_is_loopback_supported(
      pContext,
    );
  }

  _dart_ma_context_is_loopback_supported _ma_context_is_loopback_supported;

  int ma_device_init(
    ffi.Pointer<ma_context> pContext,
    ffi.Pointer<ma_device_config> pConfig,
    ffi.Pointer<ma_device> pDevice,
  ) {
    _ma_device_init ??=
        _dylib.lookupFunction<_c_ma_device_init, _dart_ma_device_init>(
            'ma_device_init');
    return _ma_device_init(
      pContext,
      pConfig,
      pDevice,
    );
  }

  _dart_ma_device_init _ma_device_init;

  int ma_device_init_ex(
    ffi.Pointer<ffi.Int32> backends,
    int backendCount,
    ffi.Pointer<ma_context_config> pContextConfig,
    ffi.Pointer<ma_device_config> pConfig,
    ffi.Pointer<ma_device> pDevice,
  ) {
    _ma_device_init_ex ??=
        _dylib.lookupFunction<_c_ma_device_init_ex, _dart_ma_device_init_ex>(
            'ma_device_init_ex');
    return _ma_device_init_ex(
      backends,
      backendCount,
      pContextConfig,
      pConfig,
      pDevice,
    );
  }

  _dart_ma_device_init_ex _ma_device_init_ex;

  void ma_device_uninit(
    ffi.Pointer<ma_device> pDevice,
  ) {
    _ma_device_uninit ??=
        _dylib.lookupFunction<_c_ma_device_uninit, _dart_ma_device_uninit>(
            'ma_device_uninit');
    return _ma_device_uninit(
      pDevice,
    );
  }

  _dart_ma_device_uninit _ma_device_uninit;

  int ma_device_start(
    ffi.Pointer<ma_device> pDevice,
  ) {
    _ma_device_start ??=
        _dylib.lookupFunction<_c_ma_device_start, _dart_ma_device_start>(
            'ma_device_start');
    return _ma_device_start(
      pDevice,
    );
  }

  _dart_ma_device_start _ma_device_start;

  int ma_device_stop(
    ffi.Pointer<ma_device> pDevice,
  ) {
    _ma_device_stop ??=
        _dylib.lookupFunction<_c_ma_device_stop, _dart_ma_device_stop>(
            'ma_device_stop');
    return _ma_device_stop(
      pDevice,
    );
  }

  _dart_ma_device_stop _ma_device_stop;

  int ma_device_is_started(
    ffi.Pointer<ma_device> pDevice,
  ) {
    _ma_device_is_started ??= _dylib.lookupFunction<_c_ma_device_is_started,
        _dart_ma_device_is_started>('ma_device_is_started');
    return _ma_device_is_started(
      pDevice,
    );
  }

  _dart_ma_device_is_started _ma_device_is_started;

  int ma_device_get_state(
    ffi.Pointer<ma_device> pDevice,
  ) {
    _ma_device_get_state ??= _dylib.lookupFunction<_c_ma_device_get_state,
        _dart_ma_device_get_state>('ma_device_get_state');
    return _ma_device_get_state(
      pDevice,
    );
  }

  _dart_ma_device_get_state _ma_device_get_state;

  int ma_device_set_master_volume(
    ffi.Pointer<ma_device> pDevice,
    double volume,
  ) {
    _ma_device_set_master_volume ??= _dylib.lookupFunction<
        _c_ma_device_set_master_volume,
        _dart_ma_device_set_master_volume>('ma_device_set_master_volume');
    return _ma_device_set_master_volume(
      pDevice,
      volume,
    );
  }

  _dart_ma_device_set_master_volume _ma_device_set_master_volume;

  int ma_device_get_master_volume(
    ffi.Pointer<ma_device> pDevice,
    ffi.Pointer<ffi.Float> pVolume,
  ) {
    _ma_device_get_master_volume ??= _dylib.lookupFunction<
        _c_ma_device_get_master_volume,
        _dart_ma_device_get_master_volume>('ma_device_get_master_volume');
    return _ma_device_get_master_volume(
      pDevice,
      pVolume,
    );
  }

  _dart_ma_device_get_master_volume _ma_device_get_master_volume;

  int ma_device_set_master_gain_db(
    ffi.Pointer<ma_device> pDevice,
    double gainDB,
  ) {
    _ma_device_set_master_gain_db ??= _dylib.lookupFunction<
        _c_ma_device_set_master_gain_db,
        _dart_ma_device_set_master_gain_db>('ma_device_set_master_gain_db');
    return _ma_device_set_master_gain_db(
      pDevice,
      gainDB,
    );
  }

  _dart_ma_device_set_master_gain_db _ma_device_set_master_gain_db;

  int ma_device_get_master_gain_db(
    ffi.Pointer<ma_device> pDevice,
    ffi.Pointer<ffi.Float> pGainDB,
  ) {
    _ma_device_get_master_gain_db ??= _dylib.lookupFunction<
        _c_ma_device_get_master_gain_db,
        _dart_ma_device_get_master_gain_db>('ma_device_get_master_gain_db');
    return _ma_device_get_master_gain_db(
      pDevice,
      pGainDB,
    );
  }

  _dart_ma_device_get_master_gain_db _ma_device_get_master_gain_db;

  int ma_device_handle_backend_data_callback(
    ffi.Pointer<ma_device> pDevice,
    ffi.Pointer<ffi.Void> pOutput,
    ffi.Pointer<ffi.Void> pInput,
    int frameCount,
  ) {
    _ma_device_handle_backend_data_callback ??= _dylib.lookupFunction<
            _c_ma_device_handle_backend_data_callback,
            _dart_ma_device_handle_backend_data_callback>(
        'ma_device_handle_backend_data_callback');
    return _ma_device_handle_backend_data_callback(
      pDevice,
      pOutput,
      pInput,
      frameCount,
    );
  }

  _dart_ma_device_handle_backend_data_callback
      _ma_device_handle_backend_data_callback;

  ffi.Pointer<ffi.Int8> ma_get_backend_name(
    int backend,
  ) {
    _ma_get_backend_name ??= _dylib.lookupFunction<_c_ma_get_backend_name,
        _dart_ma_get_backend_name>('ma_get_backend_name');
    return _ma_get_backend_name(
      backend,
    );
  }

  _dart_ma_get_backend_name _ma_get_backend_name;

  int ma_is_backend_enabled(
    int backend,
  ) {
    _ma_is_backend_enabled ??= _dylib.lookupFunction<_c_ma_is_backend_enabled,
        _dart_ma_is_backend_enabled>('ma_is_backend_enabled');
    return _ma_is_backend_enabled(
      backend,
    );
  }

  _dart_ma_is_backend_enabled _ma_is_backend_enabled;

  int ma_get_enabled_backends(
    ffi.Pointer<ffi.Int32> pBackends,
    int backendCap,
    ffi.Pointer<ffi.Uint64> pBackendCount,
  ) {
    _ma_get_enabled_backends ??= _dylib.lookupFunction<
        _c_ma_get_enabled_backends,
        _dart_ma_get_enabled_backends>('ma_get_enabled_backends');
    return _ma_get_enabled_backends(
      pBackends,
      backendCap,
      pBackendCount,
    );
  }

  _dart_ma_get_enabled_backends _ma_get_enabled_backends;

  int ma_is_loopback_supported(
    int backend,
  ) {
    _ma_is_loopback_supported ??= _dylib.lookupFunction<
        _c_ma_is_loopback_supported,
        _dart_ma_is_loopback_supported>('ma_is_loopback_supported');
    return _ma_is_loopback_supported(
      backend,
    );
  }

  _dart_ma_is_loopback_supported _ma_is_loopback_supported;

  int ma_spinlock_lock(
    ffi.Pointer<ffi.Uint8> pSpinlock,
  ) {
    _ma_spinlock_lock ??=
        _dylib.lookupFunction<_c_ma_spinlock_lock, _dart_ma_spinlock_lock>(
            'ma_spinlock_lock');
    return _ma_spinlock_lock(
      pSpinlock,
    );
  }

  _dart_ma_spinlock_lock _ma_spinlock_lock;

  int ma_spinlock_lock_noyield(
    ffi.Pointer<ffi.Uint8> pSpinlock,
  ) {
    _ma_spinlock_lock_noyield ??= _dylib.lookupFunction<
        _c_ma_spinlock_lock_noyield,
        _dart_ma_spinlock_lock_noyield>('ma_spinlock_lock_noyield');
    return _ma_spinlock_lock_noyield(
      pSpinlock,
    );
  }

  _dart_ma_spinlock_lock_noyield _ma_spinlock_lock_noyield;

  int ma_spinlock_unlock(
    ffi.Pointer<ffi.Uint8> pSpinlock,
  ) {
    _ma_spinlock_unlock ??=
        _dylib.lookupFunction<_c_ma_spinlock_unlock, _dart_ma_spinlock_unlock>(
            'ma_spinlock_unlock');
    return _ma_spinlock_unlock(
      pSpinlock,
    );
  }

  _dart_ma_spinlock_unlock _ma_spinlock_unlock;

  int ma_mutex_init(
    ffi.Pointer<_opaque_pthread_mutex_t> pMutex,
  ) {
    _ma_mutex_init ??= _dylib
        .lookupFunction<_c_ma_mutex_init, _dart_ma_mutex_init>('ma_mutex_init');
    return _ma_mutex_init(
      pMutex,
    );
  }

  _dart_ma_mutex_init _ma_mutex_init;

  void ma_mutex_uninit(
    ffi.Pointer<_opaque_pthread_mutex_t> pMutex,
  ) {
    _ma_mutex_uninit ??=
        _dylib.lookupFunction<_c_ma_mutex_uninit, _dart_ma_mutex_uninit>(
            'ma_mutex_uninit');
    return _ma_mutex_uninit(
      pMutex,
    );
  }

  _dart_ma_mutex_uninit _ma_mutex_uninit;

  void ma_mutex_lock(
    ffi.Pointer<_opaque_pthread_mutex_t> pMutex,
  ) {
    _ma_mutex_lock ??= _dylib
        .lookupFunction<_c_ma_mutex_lock, _dart_ma_mutex_lock>('ma_mutex_lock');
    return _ma_mutex_lock(
      pMutex,
    );
  }

  _dart_ma_mutex_lock _ma_mutex_lock;

  void ma_mutex_unlock(
    ffi.Pointer<_opaque_pthread_mutex_t> pMutex,
  ) {
    _ma_mutex_unlock ??=
        _dylib.lookupFunction<_c_ma_mutex_unlock, _dart_ma_mutex_unlock>(
            'ma_mutex_unlock');
    return _ma_mutex_unlock(
      pMutex,
    );
  }

  _dart_ma_mutex_unlock _ma_mutex_unlock;

  int ma_event_init(
    ffi.Pointer<ma_event> pEvent,
  ) {
    _ma_event_init ??= _dylib
        .lookupFunction<_c_ma_event_init, _dart_ma_event_init>('ma_event_init');
    return _ma_event_init(
      pEvent,
    );
  }

  _dart_ma_event_init _ma_event_init;

  void ma_event_uninit(
    ffi.Pointer<ma_event> pEvent,
  ) {
    _ma_event_uninit ??=
        _dylib.lookupFunction<_c_ma_event_uninit, _dart_ma_event_uninit>(
            'ma_event_uninit');
    return _ma_event_uninit(
      pEvent,
    );
  }

  _dart_ma_event_uninit _ma_event_uninit;

  int ma_event_wait(
    ffi.Pointer<ma_event> pEvent,
  ) {
    _ma_event_wait ??= _dylib
        .lookupFunction<_c_ma_event_wait, _dart_ma_event_wait>('ma_event_wait');
    return _ma_event_wait(
      pEvent,
    );
  }

  _dart_ma_event_wait _ma_event_wait;

  int ma_event_signal(
    ffi.Pointer<ma_event> pEvent,
  ) {
    _ma_event_signal ??=
        _dylib.lookupFunction<_c_ma_event_signal, _dart_ma_event_signal>(
            'ma_event_signal');
    return _ma_event_signal(
      pEvent,
    );
  }

  _dart_ma_event_signal _ma_event_signal;

  /// Utiltities
  int ma_scale_buffer_size(
    int baseBufferSize,
    double scale,
  ) {
    _ma_scale_buffer_size ??= _dylib.lookupFunction<_c_ma_scale_buffer_size,
        _dart_ma_scale_buffer_size>('ma_scale_buffer_size');
    return _ma_scale_buffer_size(
      baseBufferSize,
      scale,
    );
  }

  _dart_ma_scale_buffer_size _ma_scale_buffer_size;

  int ma_calculate_buffer_size_in_milliseconds_from_frames(
    int bufferSizeInFrames,
    int sampleRate,
  ) {
    _ma_calculate_buffer_size_in_milliseconds_from_frames ??=
        _dylib.lookupFunction<
                _c_ma_calculate_buffer_size_in_milliseconds_from_frames,
                _dart_ma_calculate_buffer_size_in_milliseconds_from_frames>(
            'ma_calculate_buffer_size_in_milliseconds_from_frames');
    return _ma_calculate_buffer_size_in_milliseconds_from_frames(
      bufferSizeInFrames,
      sampleRate,
    );
  }

  _dart_ma_calculate_buffer_size_in_milliseconds_from_frames
      _ma_calculate_buffer_size_in_milliseconds_from_frames;

  int ma_calculate_buffer_size_in_frames_from_milliseconds(
    int bufferSizeInMilliseconds,
    int sampleRate,
  ) {
    _ma_calculate_buffer_size_in_frames_from_milliseconds ??=
        _dylib.lookupFunction<
                _c_ma_calculate_buffer_size_in_frames_from_milliseconds,
                _dart_ma_calculate_buffer_size_in_frames_from_milliseconds>(
            'ma_calculate_buffer_size_in_frames_from_milliseconds');
    return _ma_calculate_buffer_size_in_frames_from_milliseconds(
      bufferSizeInMilliseconds,
      sampleRate,
    );
  }

  _dart_ma_calculate_buffer_size_in_frames_from_milliseconds
      _ma_calculate_buffer_size_in_frames_from_milliseconds;

  void ma_copy_pcm_frames(
    ffi.Pointer<ffi.Void> dst,
    ffi.Pointer<ffi.Void> src,
    int frameCount,
    int format,
    int channels,
  ) {
    _ma_copy_pcm_frames ??=
        _dylib.lookupFunction<_c_ma_copy_pcm_frames, _dart_ma_copy_pcm_frames>(
            'ma_copy_pcm_frames');
    return _ma_copy_pcm_frames(
      dst,
      src,
      frameCount,
      format,
      channels,
    );
  }

  _dart_ma_copy_pcm_frames _ma_copy_pcm_frames;

  void ma_silence_pcm_frames(
    ffi.Pointer<ffi.Void> p,
    int frameCount,
    int format,
    int channels,
  ) {
    _ma_silence_pcm_frames ??= _dylib.lookupFunction<_c_ma_silence_pcm_frames,
        _dart_ma_silence_pcm_frames>('ma_silence_pcm_frames');
    return _ma_silence_pcm_frames(
      p,
      frameCount,
      format,
      channels,
    );
  }

  _dart_ma_silence_pcm_frames _ma_silence_pcm_frames;

  void ma_zero_pcm_frames(
    ffi.Pointer<ffi.Void> p,
    int frameCount,
    int format,
    int channels,
  ) {
    _ma_zero_pcm_frames ??=
        _dylib.lookupFunction<_c_ma_zero_pcm_frames, _dart_ma_zero_pcm_frames>(
            'ma_zero_pcm_frames');
    return _ma_zero_pcm_frames(
      p,
      frameCount,
      format,
      channels,
    );
  }

  _dart_ma_zero_pcm_frames _ma_zero_pcm_frames;

  ffi.Pointer<ffi.Void> ma_offset_pcm_frames_ptr(
    ffi.Pointer<ffi.Void> p,
    int offsetInFrames,
    int format,
    int channels,
  ) {
    _ma_offset_pcm_frames_ptr ??= _dylib.lookupFunction<
        _c_ma_offset_pcm_frames_ptr,
        _dart_ma_offset_pcm_frames_ptr>('ma_offset_pcm_frames_ptr');
    return _ma_offset_pcm_frames_ptr(
      p,
      offsetInFrames,
      format,
      channels,
    );
  }

  _dart_ma_offset_pcm_frames_ptr _ma_offset_pcm_frames_ptr;

  ffi.Pointer<ffi.Void> ma_offset_pcm_frames_const_ptr(
    ffi.Pointer<ffi.Void> p,
    int offsetInFrames,
    int format,
    int channels,
  ) {
    _ma_offset_pcm_frames_const_ptr ??= _dylib.lookupFunction<
        _c_ma_offset_pcm_frames_const_ptr,
        _dart_ma_offset_pcm_frames_const_ptr>('ma_offset_pcm_frames_const_ptr');
    return _ma_offset_pcm_frames_const_ptr(
      p,
      offsetInFrames,
      format,
      channels,
    );
  }

  _dart_ma_offset_pcm_frames_const_ptr _ma_offset_pcm_frames_const_ptr;

  void ma_clip_samples_f32(
    ffi.Pointer<ffi.Float> p,
    int sampleCount,
  ) {
    _ma_clip_samples_f32 ??= _dylib.lookupFunction<_c_ma_clip_samples_f32,
        _dart_ma_clip_samples_f32>('ma_clip_samples_f32');
    return _ma_clip_samples_f32(
      p,
      sampleCount,
    );
  }

  _dart_ma_clip_samples_f32 _ma_clip_samples_f32;

  void ma_clip_pcm_frames_f32(
    ffi.Pointer<ffi.Float> p,
    int frameCount,
    int channels,
  ) {
    _ma_clip_pcm_frames_f32 ??= _dylib.lookupFunction<_c_ma_clip_pcm_frames_f32,
        _dart_ma_clip_pcm_frames_f32>('ma_clip_pcm_frames_f32');
    return _ma_clip_pcm_frames_f32(
      p,
      frameCount,
      channels,
    );
  }

  _dart_ma_clip_pcm_frames_f32 _ma_clip_pcm_frames_f32;

  void ma_copy_and_apply_volume_factor_u8(
    ffi.Pointer<ffi.Uint8> pSamplesOut,
    ffi.Pointer<ffi.Uint8> pSamplesIn,
    int sampleCount,
    double factor,
  ) {
    _ma_copy_and_apply_volume_factor_u8 ??= _dylib.lookupFunction<
            _c_ma_copy_and_apply_volume_factor_u8,
            _dart_ma_copy_and_apply_volume_factor_u8>(
        'ma_copy_and_apply_volume_factor_u8');
    return _ma_copy_and_apply_volume_factor_u8(
      pSamplesOut,
      pSamplesIn,
      sampleCount,
      factor,
    );
  }

  _dart_ma_copy_and_apply_volume_factor_u8 _ma_copy_and_apply_volume_factor_u8;

  void ma_copy_and_apply_volume_factor_s16(
    ffi.Pointer<ffi.Int16> pSamplesOut,
    ffi.Pointer<ffi.Int16> pSamplesIn,
    int sampleCount,
    double factor,
  ) {
    _ma_copy_and_apply_volume_factor_s16 ??= _dylib.lookupFunction<
            _c_ma_copy_and_apply_volume_factor_s16,
            _dart_ma_copy_and_apply_volume_factor_s16>(
        'ma_copy_and_apply_volume_factor_s16');
    return _ma_copy_and_apply_volume_factor_s16(
      pSamplesOut,
      pSamplesIn,
      sampleCount,
      factor,
    );
  }

  _dart_ma_copy_and_apply_volume_factor_s16
      _ma_copy_and_apply_volume_factor_s16;

  void ma_copy_and_apply_volume_factor_s24(
    ffi.Pointer<ffi.Void> pSamplesOut,
    ffi.Pointer<ffi.Void> pSamplesIn,
    int sampleCount,
    double factor,
  ) {
    _ma_copy_and_apply_volume_factor_s24 ??= _dylib.lookupFunction<
            _c_ma_copy_and_apply_volume_factor_s24,
            _dart_ma_copy_and_apply_volume_factor_s24>(
        'ma_copy_and_apply_volume_factor_s24');
    return _ma_copy_and_apply_volume_factor_s24(
      pSamplesOut,
      pSamplesIn,
      sampleCount,
      factor,
    );
  }

  _dart_ma_copy_and_apply_volume_factor_s24
      _ma_copy_and_apply_volume_factor_s24;

  void ma_copy_and_apply_volume_factor_s32(
    ffi.Pointer<ffi.Int32> pSamplesOut,
    ffi.Pointer<ffi.Int32> pSamplesIn,
    int sampleCount,
    double factor,
  ) {
    _ma_copy_and_apply_volume_factor_s32 ??= _dylib.lookupFunction<
            _c_ma_copy_and_apply_volume_factor_s32,
            _dart_ma_copy_and_apply_volume_factor_s32>(
        'ma_copy_and_apply_volume_factor_s32');
    return _ma_copy_and_apply_volume_factor_s32(
      pSamplesOut,
      pSamplesIn,
      sampleCount,
      factor,
    );
  }

  _dart_ma_copy_and_apply_volume_factor_s32
      _ma_copy_and_apply_volume_factor_s32;

  void ma_copy_and_apply_volume_factor_f32(
    ffi.Pointer<ffi.Float> pSamplesOut,
    ffi.Pointer<ffi.Float> pSamplesIn,
    int sampleCount,
    double factor,
  ) {
    _ma_copy_and_apply_volume_factor_f32 ??= _dylib.lookupFunction<
            _c_ma_copy_and_apply_volume_factor_f32,
            _dart_ma_copy_and_apply_volume_factor_f32>(
        'ma_copy_and_apply_volume_factor_f32');
    return _ma_copy_and_apply_volume_factor_f32(
      pSamplesOut,
      pSamplesIn,
      sampleCount,
      factor,
    );
  }

  _dart_ma_copy_and_apply_volume_factor_f32
      _ma_copy_and_apply_volume_factor_f32;

  void ma_apply_volume_factor_u8(
    ffi.Pointer<ffi.Uint8> pSamples,
    int sampleCount,
    double factor,
  ) {
    _ma_apply_volume_factor_u8 ??= _dylib.lookupFunction<
        _c_ma_apply_volume_factor_u8,
        _dart_ma_apply_volume_factor_u8>('ma_apply_volume_factor_u8');
    return _ma_apply_volume_factor_u8(
      pSamples,
      sampleCount,
      factor,
    );
  }

  _dart_ma_apply_volume_factor_u8 _ma_apply_volume_factor_u8;

  void ma_apply_volume_factor_s16(
    ffi.Pointer<ffi.Int16> pSamples,
    int sampleCount,
    double factor,
  ) {
    _ma_apply_volume_factor_s16 ??= _dylib.lookupFunction<
        _c_ma_apply_volume_factor_s16,
        _dart_ma_apply_volume_factor_s16>('ma_apply_volume_factor_s16');
    return _ma_apply_volume_factor_s16(
      pSamples,
      sampleCount,
      factor,
    );
  }

  _dart_ma_apply_volume_factor_s16 _ma_apply_volume_factor_s16;

  void ma_apply_volume_factor_s24(
    ffi.Pointer<ffi.Void> pSamples,
    int sampleCount,
    double factor,
  ) {
    _ma_apply_volume_factor_s24 ??= _dylib.lookupFunction<
        _c_ma_apply_volume_factor_s24,
        _dart_ma_apply_volume_factor_s24>('ma_apply_volume_factor_s24');
    return _ma_apply_volume_factor_s24(
      pSamples,
      sampleCount,
      factor,
    );
  }

  _dart_ma_apply_volume_factor_s24 _ma_apply_volume_factor_s24;

  void ma_apply_volume_factor_s32(
    ffi.Pointer<ffi.Int32> pSamples,
    int sampleCount,
    double factor,
  ) {
    _ma_apply_volume_factor_s32 ??= _dylib.lookupFunction<
        _c_ma_apply_volume_factor_s32,
        _dart_ma_apply_volume_factor_s32>('ma_apply_volume_factor_s32');
    return _ma_apply_volume_factor_s32(
      pSamples,
      sampleCount,
      factor,
    );
  }

  _dart_ma_apply_volume_factor_s32 _ma_apply_volume_factor_s32;

  void ma_apply_volume_factor_f32(
    ffi.Pointer<ffi.Float> pSamples,
    int sampleCount,
    double factor,
  ) {
    _ma_apply_volume_factor_f32 ??= _dylib.lookupFunction<
        _c_ma_apply_volume_factor_f32,
        _dart_ma_apply_volume_factor_f32>('ma_apply_volume_factor_f32');
    return _ma_apply_volume_factor_f32(
      pSamples,
      sampleCount,
      factor,
    );
  }

  _dart_ma_apply_volume_factor_f32 _ma_apply_volume_factor_f32;

  void ma_copy_and_apply_volume_factor_pcm_frames_u8(
    ffi.Pointer<ffi.Uint8> pPCMFramesOut,
    ffi.Pointer<ffi.Uint8> pPCMFramesIn,
    int frameCount,
    int channels,
    double factor,
  ) {
    _ma_copy_and_apply_volume_factor_pcm_frames_u8 ??= _dylib.lookupFunction<
            _c_ma_copy_and_apply_volume_factor_pcm_frames_u8,
            _dart_ma_copy_and_apply_volume_factor_pcm_frames_u8>(
        'ma_copy_and_apply_volume_factor_pcm_frames_u8');
    return _ma_copy_and_apply_volume_factor_pcm_frames_u8(
      pPCMFramesOut,
      pPCMFramesIn,
      frameCount,
      channels,
      factor,
    );
  }

  _dart_ma_copy_and_apply_volume_factor_pcm_frames_u8
      _ma_copy_and_apply_volume_factor_pcm_frames_u8;

  void ma_copy_and_apply_volume_factor_pcm_frames_s16(
    ffi.Pointer<ffi.Int16> pPCMFramesOut,
    ffi.Pointer<ffi.Int16> pPCMFramesIn,
    int frameCount,
    int channels,
    double factor,
  ) {
    _ma_copy_and_apply_volume_factor_pcm_frames_s16 ??= _dylib.lookupFunction<
            _c_ma_copy_and_apply_volume_factor_pcm_frames_s16,
            _dart_ma_copy_and_apply_volume_factor_pcm_frames_s16>(
        'ma_copy_and_apply_volume_factor_pcm_frames_s16');
    return _ma_copy_and_apply_volume_factor_pcm_frames_s16(
      pPCMFramesOut,
      pPCMFramesIn,
      frameCount,
      channels,
      factor,
    );
  }

  _dart_ma_copy_and_apply_volume_factor_pcm_frames_s16
      _ma_copy_and_apply_volume_factor_pcm_frames_s16;

  void ma_copy_and_apply_volume_factor_pcm_frames_s24(
    ffi.Pointer<ffi.Void> pPCMFramesOut,
    ffi.Pointer<ffi.Void> pPCMFramesIn,
    int frameCount,
    int channels,
    double factor,
  ) {
    _ma_copy_and_apply_volume_factor_pcm_frames_s24 ??= _dylib.lookupFunction<
            _c_ma_copy_and_apply_volume_factor_pcm_frames_s24,
            _dart_ma_copy_and_apply_volume_factor_pcm_frames_s24>(
        'ma_copy_and_apply_volume_factor_pcm_frames_s24');
    return _ma_copy_and_apply_volume_factor_pcm_frames_s24(
      pPCMFramesOut,
      pPCMFramesIn,
      frameCount,
      channels,
      factor,
    );
  }

  _dart_ma_copy_and_apply_volume_factor_pcm_frames_s24
      _ma_copy_and_apply_volume_factor_pcm_frames_s24;

  void ma_copy_and_apply_volume_factor_pcm_frames_s32(
    ffi.Pointer<ffi.Int32> pPCMFramesOut,
    ffi.Pointer<ffi.Int32> pPCMFramesIn,
    int frameCount,
    int channels,
    double factor,
  ) {
    _ma_copy_and_apply_volume_factor_pcm_frames_s32 ??= _dylib.lookupFunction<
            _c_ma_copy_and_apply_volume_factor_pcm_frames_s32,
            _dart_ma_copy_and_apply_volume_factor_pcm_frames_s32>(
        'ma_copy_and_apply_volume_factor_pcm_frames_s32');
    return _ma_copy_and_apply_volume_factor_pcm_frames_s32(
      pPCMFramesOut,
      pPCMFramesIn,
      frameCount,
      channels,
      factor,
    );
  }

  _dart_ma_copy_and_apply_volume_factor_pcm_frames_s32
      _ma_copy_and_apply_volume_factor_pcm_frames_s32;

  void ma_copy_and_apply_volume_factor_pcm_frames_f32(
    ffi.Pointer<ffi.Float> pPCMFramesOut,
    ffi.Pointer<ffi.Float> pPCMFramesIn,
    int frameCount,
    int channels,
    double factor,
  ) {
    _ma_copy_and_apply_volume_factor_pcm_frames_f32 ??= _dylib.lookupFunction<
            _c_ma_copy_and_apply_volume_factor_pcm_frames_f32,
            _dart_ma_copy_and_apply_volume_factor_pcm_frames_f32>(
        'ma_copy_and_apply_volume_factor_pcm_frames_f32');
    return _ma_copy_and_apply_volume_factor_pcm_frames_f32(
      pPCMFramesOut,
      pPCMFramesIn,
      frameCount,
      channels,
      factor,
    );
  }

  _dart_ma_copy_and_apply_volume_factor_pcm_frames_f32
      _ma_copy_and_apply_volume_factor_pcm_frames_f32;

  void ma_copy_and_apply_volume_factor_pcm_frames(
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
    int format,
    int channels,
    double factor,
  ) {
    _ma_copy_and_apply_volume_factor_pcm_frames ??= _dylib.lookupFunction<
            _c_ma_copy_and_apply_volume_factor_pcm_frames,
            _dart_ma_copy_and_apply_volume_factor_pcm_frames>(
        'ma_copy_and_apply_volume_factor_pcm_frames');
    return _ma_copy_and_apply_volume_factor_pcm_frames(
      pFramesOut,
      pFramesIn,
      frameCount,
      format,
      channels,
      factor,
    );
  }

  _dart_ma_copy_and_apply_volume_factor_pcm_frames
      _ma_copy_and_apply_volume_factor_pcm_frames;

  void ma_apply_volume_factor_pcm_frames_u8(
    ffi.Pointer<ffi.Uint8> pFrames,
    int frameCount,
    int channels,
    double factor,
  ) {
    _ma_apply_volume_factor_pcm_frames_u8 ??= _dylib.lookupFunction<
            _c_ma_apply_volume_factor_pcm_frames_u8,
            _dart_ma_apply_volume_factor_pcm_frames_u8>(
        'ma_apply_volume_factor_pcm_frames_u8');
    return _ma_apply_volume_factor_pcm_frames_u8(
      pFrames,
      frameCount,
      channels,
      factor,
    );
  }

  _dart_ma_apply_volume_factor_pcm_frames_u8
      _ma_apply_volume_factor_pcm_frames_u8;

  void ma_apply_volume_factor_pcm_frames_s16(
    ffi.Pointer<ffi.Int16> pFrames,
    int frameCount,
    int channels,
    double factor,
  ) {
    _ma_apply_volume_factor_pcm_frames_s16 ??= _dylib.lookupFunction<
            _c_ma_apply_volume_factor_pcm_frames_s16,
            _dart_ma_apply_volume_factor_pcm_frames_s16>(
        'ma_apply_volume_factor_pcm_frames_s16');
    return _ma_apply_volume_factor_pcm_frames_s16(
      pFrames,
      frameCount,
      channels,
      factor,
    );
  }

  _dart_ma_apply_volume_factor_pcm_frames_s16
      _ma_apply_volume_factor_pcm_frames_s16;

  void ma_apply_volume_factor_pcm_frames_s24(
    ffi.Pointer<ffi.Void> pFrames,
    int frameCount,
    int channels,
    double factor,
  ) {
    _ma_apply_volume_factor_pcm_frames_s24 ??= _dylib.lookupFunction<
            _c_ma_apply_volume_factor_pcm_frames_s24,
            _dart_ma_apply_volume_factor_pcm_frames_s24>(
        'ma_apply_volume_factor_pcm_frames_s24');
    return _ma_apply_volume_factor_pcm_frames_s24(
      pFrames,
      frameCount,
      channels,
      factor,
    );
  }

  _dart_ma_apply_volume_factor_pcm_frames_s24
      _ma_apply_volume_factor_pcm_frames_s24;

  void ma_apply_volume_factor_pcm_frames_s32(
    ffi.Pointer<ffi.Int32> pFrames,
    int frameCount,
    int channels,
    double factor,
  ) {
    _ma_apply_volume_factor_pcm_frames_s32 ??= _dylib.lookupFunction<
            _c_ma_apply_volume_factor_pcm_frames_s32,
            _dart_ma_apply_volume_factor_pcm_frames_s32>(
        'ma_apply_volume_factor_pcm_frames_s32');
    return _ma_apply_volume_factor_pcm_frames_s32(
      pFrames,
      frameCount,
      channels,
      factor,
    );
  }

  _dart_ma_apply_volume_factor_pcm_frames_s32
      _ma_apply_volume_factor_pcm_frames_s32;

  void ma_apply_volume_factor_pcm_frames_f32(
    ffi.Pointer<ffi.Float> pFrames,
    int frameCount,
    int channels,
    double factor,
  ) {
    _ma_apply_volume_factor_pcm_frames_f32 ??= _dylib.lookupFunction<
            _c_ma_apply_volume_factor_pcm_frames_f32,
            _dart_ma_apply_volume_factor_pcm_frames_f32>(
        'ma_apply_volume_factor_pcm_frames_f32');
    return _ma_apply_volume_factor_pcm_frames_f32(
      pFrames,
      frameCount,
      channels,
      factor,
    );
  }

  _dart_ma_apply_volume_factor_pcm_frames_f32
      _ma_apply_volume_factor_pcm_frames_f32;

  void ma_apply_volume_factor_pcm_frames(
    ffi.Pointer<ffi.Void> pFrames,
    int frameCount,
    int format,
    int channels,
    double factor,
  ) {
    _ma_apply_volume_factor_pcm_frames ??= _dylib.lookupFunction<
            _c_ma_apply_volume_factor_pcm_frames,
            _dart_ma_apply_volume_factor_pcm_frames>(
        'ma_apply_volume_factor_pcm_frames');
    return _ma_apply_volume_factor_pcm_frames(
      pFrames,
      frameCount,
      format,
      channels,
      factor,
    );
  }

  _dart_ma_apply_volume_factor_pcm_frames _ma_apply_volume_factor_pcm_frames;

  double ma_factor_to_gain_db(
    double factor,
  ) {
    _ma_factor_to_gain_db ??= _dylib.lookupFunction<_c_ma_factor_to_gain_db,
        _dart_ma_factor_to_gain_db>('ma_factor_to_gain_db');
    return _ma_factor_to_gain_db(
      factor,
    );
  }

  _dart_ma_factor_to_gain_db _ma_factor_to_gain_db;

  double ma_gain_db_to_factor(
    double gain,
  ) {
    _ma_gain_db_to_factor ??= _dylib.lookupFunction<_c_ma_gain_db_to_factor,
        _dart_ma_gain_db_to_factor>('ma_gain_db_to_factor');
    return _ma_gain_db_to_factor(
      gain,
    );
  }

  _dart_ma_gain_db_to_factor _ma_gain_db_to_factor;

  int ma_data_source_read_pcm_frames(
    ffi.Pointer<ffi.Void> pDataSource,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    ffi.Pointer<ffi.Uint64> pFramesRead,
    int loop,
  ) {
    _ma_data_source_read_pcm_frames ??= _dylib.lookupFunction<
        _c_ma_data_source_read_pcm_frames,
        _dart_ma_data_source_read_pcm_frames>('ma_data_source_read_pcm_frames');
    return _ma_data_source_read_pcm_frames(
      pDataSource,
      pFramesOut,
      frameCount,
      pFramesRead,
      loop,
    );
  }

  _dart_ma_data_source_read_pcm_frames _ma_data_source_read_pcm_frames;

  int ma_data_source_seek_pcm_frames(
    ffi.Pointer<ffi.Void> pDataSource,
    int frameCount,
    ffi.Pointer<ffi.Uint64> pFramesSeeked,
    int loop,
  ) {
    _ma_data_source_seek_pcm_frames ??= _dylib.lookupFunction<
        _c_ma_data_source_seek_pcm_frames,
        _dart_ma_data_source_seek_pcm_frames>('ma_data_source_seek_pcm_frames');
    return _ma_data_source_seek_pcm_frames(
      pDataSource,
      frameCount,
      pFramesSeeked,
      loop,
    );
  }

  _dart_ma_data_source_seek_pcm_frames _ma_data_source_seek_pcm_frames;

  int ma_data_source_seek_to_pcm_frame(
    ffi.Pointer<ffi.Void> pDataSource,
    int frameIndex,
  ) {
    _ma_data_source_seek_to_pcm_frame ??= _dylib.lookupFunction<
            _c_ma_data_source_seek_to_pcm_frame,
            _dart_ma_data_source_seek_to_pcm_frame>(
        'ma_data_source_seek_to_pcm_frame');
    return _ma_data_source_seek_to_pcm_frame(
      pDataSource,
      frameIndex,
    );
  }

  _dart_ma_data_source_seek_to_pcm_frame _ma_data_source_seek_to_pcm_frame;

  int ma_data_source_map(
    ffi.Pointer<ffi.Void> pDataSource,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppFramesOut,
    ffi.Pointer<ffi.Uint64> pFrameCount,
  ) {
    _ma_data_source_map ??=
        _dylib.lookupFunction<_c_ma_data_source_map, _dart_ma_data_source_map>(
            'ma_data_source_map');
    return _ma_data_source_map(
      pDataSource,
      ppFramesOut,
      pFrameCount,
    );
  }

  _dart_ma_data_source_map _ma_data_source_map;

  int ma_data_source_unmap(
    ffi.Pointer<ffi.Void> pDataSource,
    int frameCount,
  ) {
    _ma_data_source_unmap ??= _dylib.lookupFunction<_c_ma_data_source_unmap,
        _dart_ma_data_source_unmap>('ma_data_source_unmap');
    return _ma_data_source_unmap(
      pDataSource,
      frameCount,
    );
  }

  _dart_ma_data_source_unmap _ma_data_source_unmap;

  int ma_data_source_get_data_format(
    ffi.Pointer<ffi.Void> pDataSource,
    ffi.Pointer<ffi.Int32> pFormat,
    ffi.Pointer<ffi.Uint32> pChannels,
    ffi.Pointer<ffi.Uint32> pSampleRate,
  ) {
    _ma_data_source_get_data_format ??= _dylib.lookupFunction<
        _c_ma_data_source_get_data_format,
        _dart_ma_data_source_get_data_format>('ma_data_source_get_data_format');
    return _ma_data_source_get_data_format(
      pDataSource,
      pFormat,
      pChannels,
      pSampleRate,
    );
  }

  _dart_ma_data_source_get_data_format _ma_data_source_get_data_format;

  int ma_data_source_get_cursor_in_pcm_frames(
    ffi.Pointer<ffi.Void> pDataSource,
    ffi.Pointer<ffi.Uint64> pCursor,
  ) {
    _ma_data_source_get_cursor_in_pcm_frames ??= _dylib.lookupFunction<
            _c_ma_data_source_get_cursor_in_pcm_frames,
            _dart_ma_data_source_get_cursor_in_pcm_frames>(
        'ma_data_source_get_cursor_in_pcm_frames');
    return _ma_data_source_get_cursor_in_pcm_frames(
      pDataSource,
      pCursor,
    );
  }

  _dart_ma_data_source_get_cursor_in_pcm_frames
      _ma_data_source_get_cursor_in_pcm_frames;

  int ma_data_source_get_length_in_pcm_frames(
    ffi.Pointer<ffi.Void> pDataSource,
    ffi.Pointer<ffi.Uint64> pLength,
  ) {
    _ma_data_source_get_length_in_pcm_frames ??= _dylib.lookupFunction<
            _c_ma_data_source_get_length_in_pcm_frames,
            _dart_ma_data_source_get_length_in_pcm_frames>(
        'ma_data_source_get_length_in_pcm_frames');
    return _ma_data_source_get_length_in_pcm_frames(
      pDataSource,
      pLength,
    );
  }

  _dart_ma_data_source_get_length_in_pcm_frames
      _ma_data_source_get_length_in_pcm_frames;

  int ma_audio_buffer_init(
    ffi.Pointer<ma_audio_buffer_config> pConfig,
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ) {
    _ma_audio_buffer_init ??= _dylib.lookupFunction<_c_ma_audio_buffer_init,
        _dart_ma_audio_buffer_init>('ma_audio_buffer_init');
    return _ma_audio_buffer_init(
      pConfig,
      pAudioBuffer,
    );
  }

  _dart_ma_audio_buffer_init _ma_audio_buffer_init;

  int ma_audio_buffer_init_copy(
    ffi.Pointer<ma_audio_buffer_config> pConfig,
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ) {
    _ma_audio_buffer_init_copy ??= _dylib.lookupFunction<
        _c_ma_audio_buffer_init_copy,
        _dart_ma_audio_buffer_init_copy>('ma_audio_buffer_init_copy');
    return _ma_audio_buffer_init_copy(
      pConfig,
      pAudioBuffer,
    );
  }

  _dart_ma_audio_buffer_init_copy _ma_audio_buffer_init_copy;

  int ma_audio_buffer_alloc_and_init(
    ffi.Pointer<ma_audio_buffer_config> pConfig,
    ffi.Pointer<ffi.Pointer<ma_audio_buffer>> ppAudioBuffer,
  ) {
    _ma_audio_buffer_alloc_and_init ??= _dylib.lookupFunction<
        _c_ma_audio_buffer_alloc_and_init,
        _dart_ma_audio_buffer_alloc_and_init>('ma_audio_buffer_alloc_and_init');
    return _ma_audio_buffer_alloc_and_init(
      pConfig,
      ppAudioBuffer,
    );
  }

  _dart_ma_audio_buffer_alloc_and_init _ma_audio_buffer_alloc_and_init;

  void ma_audio_buffer_uninit(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ) {
    _ma_audio_buffer_uninit ??= _dylib.lookupFunction<_c_ma_audio_buffer_uninit,
        _dart_ma_audio_buffer_uninit>('ma_audio_buffer_uninit');
    return _ma_audio_buffer_uninit(
      pAudioBuffer,
    );
  }

  _dart_ma_audio_buffer_uninit _ma_audio_buffer_uninit;

  void ma_audio_buffer_uninit_and_free(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ) {
    _ma_audio_buffer_uninit_and_free ??= _dylib.lookupFunction<
            _c_ma_audio_buffer_uninit_and_free,
            _dart_ma_audio_buffer_uninit_and_free>(
        'ma_audio_buffer_uninit_and_free');
    return _ma_audio_buffer_uninit_and_free(
      pAudioBuffer,
    );
  }

  _dart_ma_audio_buffer_uninit_and_free _ma_audio_buffer_uninit_and_free;

  int ma_audio_buffer_read_pcm_frames(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    int loop,
  ) {
    _ma_audio_buffer_read_pcm_frames ??= _dylib.lookupFunction<
            _c_ma_audio_buffer_read_pcm_frames,
            _dart_ma_audio_buffer_read_pcm_frames>(
        'ma_audio_buffer_read_pcm_frames');
    return _ma_audio_buffer_read_pcm_frames(
      pAudioBuffer,
      pFramesOut,
      frameCount,
      loop,
    );
  }

  _dart_ma_audio_buffer_read_pcm_frames _ma_audio_buffer_read_pcm_frames;

  int ma_audio_buffer_seek_to_pcm_frame(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    int frameIndex,
  ) {
    _ma_audio_buffer_seek_to_pcm_frame ??= _dylib.lookupFunction<
            _c_ma_audio_buffer_seek_to_pcm_frame,
            _dart_ma_audio_buffer_seek_to_pcm_frame>(
        'ma_audio_buffer_seek_to_pcm_frame');
    return _ma_audio_buffer_seek_to_pcm_frame(
      pAudioBuffer,
      frameIndex,
    );
  }

  _dart_ma_audio_buffer_seek_to_pcm_frame _ma_audio_buffer_seek_to_pcm_frame;

  int ma_audio_buffer_map(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppFramesOut,
    ffi.Pointer<ffi.Uint64> pFrameCount,
  ) {
    _ma_audio_buffer_map ??= _dylib.lookupFunction<_c_ma_audio_buffer_map,
        _dart_ma_audio_buffer_map>('ma_audio_buffer_map');
    return _ma_audio_buffer_map(
      pAudioBuffer,
      ppFramesOut,
      pFrameCount,
    );
  }

  _dart_ma_audio_buffer_map _ma_audio_buffer_map;

  int ma_audio_buffer_unmap(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    int frameCount,
  ) {
    _ma_audio_buffer_unmap ??= _dylib.lookupFunction<_c_ma_audio_buffer_unmap,
        _dart_ma_audio_buffer_unmap>('ma_audio_buffer_unmap');
    return _ma_audio_buffer_unmap(
      pAudioBuffer,
      frameCount,
    );
  }

  _dart_ma_audio_buffer_unmap _ma_audio_buffer_unmap;

  int ma_audio_buffer_at_end(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ) {
    _ma_audio_buffer_at_end ??= _dylib.lookupFunction<_c_ma_audio_buffer_at_end,
        _dart_ma_audio_buffer_at_end>('ma_audio_buffer_at_end');
    return _ma_audio_buffer_at_end(
      pAudioBuffer,
    );
  }

  _dart_ma_audio_buffer_at_end _ma_audio_buffer_at_end;

  int ma_audio_buffer_get_available_frames(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    ffi.Pointer<ffi.Uint64> pAvailableFrames,
  ) {
    _ma_audio_buffer_get_available_frames ??= _dylib.lookupFunction<
            _c_ma_audio_buffer_get_available_frames,
            _dart_ma_audio_buffer_get_available_frames>(
        'ma_audio_buffer_get_available_frames');
    return _ma_audio_buffer_get_available_frames(
      pAudioBuffer,
      pAvailableFrames,
    );
  }

  _dart_ma_audio_buffer_get_available_frames
      _ma_audio_buffer_get_available_frames;

  int ma_vfs_open(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int8> pFilePath,
    int openMode,
    ffi.Pointer<ffi.Pointer<ffi.Void>> pFile,
  ) {
    _ma_vfs_open ??=
        _dylib.lookupFunction<_c_ma_vfs_open, _dart_ma_vfs_open>('ma_vfs_open');
    return _ma_vfs_open(
      pVFS,
      pFilePath,
      openMode,
      pFile,
    );
  }

  _dart_ma_vfs_open _ma_vfs_open;

  int ma_vfs_open_w(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int32> pFilePath,
    int openMode,
    ffi.Pointer<ffi.Pointer<ffi.Void>> pFile,
  ) {
    _ma_vfs_open_w ??= _dylib
        .lookupFunction<_c_ma_vfs_open_w, _dart_ma_vfs_open_w>('ma_vfs_open_w');
    return _ma_vfs_open_w(
      pVFS,
      pFilePath,
      openMode,
      pFile,
    );
  }

  _dart_ma_vfs_open_w _ma_vfs_open_w;

  int ma_vfs_close(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Void> file,
  ) {
    _ma_vfs_close ??= _dylib
        .lookupFunction<_c_ma_vfs_close, _dart_ma_vfs_close>('ma_vfs_close');
    return _ma_vfs_close(
      pVFS,
      file,
    );
  }

  _dart_ma_vfs_close _ma_vfs_close;

  int ma_vfs_read(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Void> file,
    ffi.Pointer<ffi.Void> pDst,
    int sizeInBytes,
    ffi.Pointer<ffi.Uint64> pBytesRead,
  ) {
    _ma_vfs_read ??=
        _dylib.lookupFunction<_c_ma_vfs_read, _dart_ma_vfs_read>('ma_vfs_read');
    return _ma_vfs_read(
      pVFS,
      file,
      pDst,
      sizeInBytes,
      pBytesRead,
    );
  }

  _dart_ma_vfs_read _ma_vfs_read;

  int ma_vfs_write(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Void> file,
    ffi.Pointer<ffi.Void> pSrc,
    int sizeInBytes,
    ffi.Pointer<ffi.Uint64> pBytesWritten,
  ) {
    _ma_vfs_write ??= _dylib
        .lookupFunction<_c_ma_vfs_write, _dart_ma_vfs_write>('ma_vfs_write');
    return _ma_vfs_write(
      pVFS,
      file,
      pSrc,
      sizeInBytes,
      pBytesWritten,
    );
  }

  _dart_ma_vfs_write _ma_vfs_write;

  int ma_vfs_seek(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Void> file,
    int offset,
    int origin,
  ) {
    _ma_vfs_seek ??=
        _dylib.lookupFunction<_c_ma_vfs_seek, _dart_ma_vfs_seek>('ma_vfs_seek');
    return _ma_vfs_seek(
      pVFS,
      file,
      offset,
      origin,
    );
  }

  _dart_ma_vfs_seek _ma_vfs_seek;

  int ma_vfs_tell(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Void> file,
    ffi.Pointer<ffi.Int64> pCursor,
  ) {
    _ma_vfs_tell ??=
        _dylib.lookupFunction<_c_ma_vfs_tell, _dart_ma_vfs_tell>('ma_vfs_tell');
    return _ma_vfs_tell(
      pVFS,
      file,
      pCursor,
    );
  }

  _dart_ma_vfs_tell _ma_vfs_tell;

  int ma_vfs_info(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Void> file,
    ffi.Pointer<ma_file_info> pInfo,
  ) {
    _ma_vfs_info ??=
        _dylib.lookupFunction<_c_ma_vfs_info, _dart_ma_vfs_info>('ma_vfs_info');
    return _ma_vfs_info(
      pVFS,
      file,
      pInfo,
    );
  }

  _dart_ma_vfs_info _ma_vfs_info;

  int ma_vfs_open_and_read_file(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppData,
    ffi.Pointer<ffi.Uint64> pSize,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    _ma_vfs_open_and_read_file ??= _dylib.lookupFunction<
        _c_ma_vfs_open_and_read_file,
        _dart_ma_vfs_open_and_read_file>('ma_vfs_open_and_read_file');
    return _ma_vfs_open_and_read_file(
      pVFS,
      pFilePath,
      ppData,
      pSize,
      pAllocationCallbacks,
    );
  }

  _dart_ma_vfs_open_and_read_file _ma_vfs_open_and_read_file;

  int ma_default_vfs_init(
    ffi.Pointer<ma_default_vfs> pVFS,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    _ma_default_vfs_init ??= _dylib.lookupFunction<_c_ma_default_vfs_init,
        _dart_ma_default_vfs_init>('ma_default_vfs_init');
    return _ma_default_vfs_init(
      pVFS,
      pAllocationCallbacks,
    );
  }

  _dart_ma_default_vfs_init _ma_default_vfs_init;

  int ma_decoder_init(
    ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
    ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init ??=
        _dylib.lookupFunction<_c_ma_decoder_init, _dart_ma_decoder_init>(
            'ma_decoder_init');
    return _ma_decoder_init(
      onRead,
      onSeek,
      pUserData,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init _ma_decoder_init;

  int ma_decoder_init_wav(
    ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
    ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_wav ??= _dylib.lookupFunction<_c_ma_decoder_init_wav,
        _dart_ma_decoder_init_wav>('ma_decoder_init_wav');
    return _ma_decoder_init_wav(
      onRead,
      onSeek,
      pUserData,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_wav _ma_decoder_init_wav;

  int ma_decoder_init_flac(
    ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
    ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_flac ??= _dylib.lookupFunction<_c_ma_decoder_init_flac,
        _dart_ma_decoder_init_flac>('ma_decoder_init_flac');
    return _ma_decoder_init_flac(
      onRead,
      onSeek,
      pUserData,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_flac _ma_decoder_init_flac;

  int ma_decoder_init_mp3(
    ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
    ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_mp3 ??= _dylib.lookupFunction<_c_ma_decoder_init_mp3,
        _dart_ma_decoder_init_mp3>('ma_decoder_init_mp3');
    return _ma_decoder_init_mp3(
      onRead,
      onSeek,
      pUserData,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_mp3 _ma_decoder_init_mp3;

  int ma_decoder_init_vorbis(
    ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
    ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_vorbis ??= _dylib.lookupFunction<_c_ma_decoder_init_vorbis,
        _dart_ma_decoder_init_vorbis>('ma_decoder_init_vorbis');
    return _ma_decoder_init_vorbis(
      onRead,
      onSeek,
      pUserData,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_vorbis _ma_decoder_init_vorbis;

  int ma_decoder_init_raw(
    ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
    ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ma_decoder_config> pConfigIn,
    ffi.Pointer<ma_decoder_config> pConfigOut,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_raw ??= _dylib.lookupFunction<_c_ma_decoder_init_raw,
        _dart_ma_decoder_init_raw>('ma_decoder_init_raw');
    return _ma_decoder_init_raw(
      onRead,
      onSeek,
      pUserData,
      pConfigIn,
      pConfigOut,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_raw _ma_decoder_init_raw;

  int ma_decoder_init_memory(
    ffi.Pointer<ffi.Void> pData,
    int dataSize,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_memory ??= _dylib.lookupFunction<_c_ma_decoder_init_memory,
        _dart_ma_decoder_init_memory>('ma_decoder_init_memory');
    return _ma_decoder_init_memory(
      pData,
      dataSize,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_memory _ma_decoder_init_memory;

  int ma_decoder_init_memory_wav(
    ffi.Pointer<ffi.Void> pData,
    int dataSize,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_memory_wav ??= _dylib.lookupFunction<
        _c_ma_decoder_init_memory_wav,
        _dart_ma_decoder_init_memory_wav>('ma_decoder_init_memory_wav');
    return _ma_decoder_init_memory_wav(
      pData,
      dataSize,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_memory_wav _ma_decoder_init_memory_wav;

  int ma_decoder_init_memory_flac(
    ffi.Pointer<ffi.Void> pData,
    int dataSize,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_memory_flac ??= _dylib.lookupFunction<
        _c_ma_decoder_init_memory_flac,
        _dart_ma_decoder_init_memory_flac>('ma_decoder_init_memory_flac');
    return _ma_decoder_init_memory_flac(
      pData,
      dataSize,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_memory_flac _ma_decoder_init_memory_flac;

  int ma_decoder_init_memory_mp3(
    ffi.Pointer<ffi.Void> pData,
    int dataSize,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_memory_mp3 ??= _dylib.lookupFunction<
        _c_ma_decoder_init_memory_mp3,
        _dart_ma_decoder_init_memory_mp3>('ma_decoder_init_memory_mp3');
    return _ma_decoder_init_memory_mp3(
      pData,
      dataSize,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_memory_mp3 _ma_decoder_init_memory_mp3;

  int ma_decoder_init_memory_vorbis(
    ffi.Pointer<ffi.Void> pData,
    int dataSize,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_memory_vorbis ??= _dylib.lookupFunction<
        _c_ma_decoder_init_memory_vorbis,
        _dart_ma_decoder_init_memory_vorbis>('ma_decoder_init_memory_vorbis');
    return _ma_decoder_init_memory_vorbis(
      pData,
      dataSize,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_memory_vorbis _ma_decoder_init_memory_vorbis;

  int ma_decoder_init_memory_raw(
    ffi.Pointer<ffi.Void> pData,
    int dataSize,
    ffi.Pointer<ma_decoder_config> pConfigIn,
    ffi.Pointer<ma_decoder_config> pConfigOut,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_memory_raw ??= _dylib.lookupFunction<
        _c_ma_decoder_init_memory_raw,
        _dart_ma_decoder_init_memory_raw>('ma_decoder_init_memory_raw');
    return _ma_decoder_init_memory_raw(
      pData,
      dataSize,
      pConfigIn,
      pConfigOut,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_memory_raw _ma_decoder_init_memory_raw;

  int ma_decoder_init_vfs(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_vfs ??= _dylib.lookupFunction<_c_ma_decoder_init_vfs,
        _dart_ma_decoder_init_vfs>('ma_decoder_init_vfs');
    return _ma_decoder_init_vfs(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_vfs _ma_decoder_init_vfs;

  int ma_decoder_init_vfs_wav(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_vfs_wav ??= _dylib.lookupFunction<
        _c_ma_decoder_init_vfs_wav,
        _dart_ma_decoder_init_vfs_wav>('ma_decoder_init_vfs_wav');
    return _ma_decoder_init_vfs_wav(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_vfs_wav _ma_decoder_init_vfs_wav;

  int ma_decoder_init_vfs_flac(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_vfs_flac ??= _dylib.lookupFunction<
        _c_ma_decoder_init_vfs_flac,
        _dart_ma_decoder_init_vfs_flac>('ma_decoder_init_vfs_flac');
    return _ma_decoder_init_vfs_flac(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_vfs_flac _ma_decoder_init_vfs_flac;

  int ma_decoder_init_vfs_mp3(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_vfs_mp3 ??= _dylib.lookupFunction<
        _c_ma_decoder_init_vfs_mp3,
        _dart_ma_decoder_init_vfs_mp3>('ma_decoder_init_vfs_mp3');
    return _ma_decoder_init_vfs_mp3(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_vfs_mp3 _ma_decoder_init_vfs_mp3;

  int ma_decoder_init_vfs_vorbis(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_vfs_vorbis ??= _dylib.lookupFunction<
        _c_ma_decoder_init_vfs_vorbis,
        _dart_ma_decoder_init_vfs_vorbis>('ma_decoder_init_vfs_vorbis');
    return _ma_decoder_init_vfs_vorbis(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_vfs_vorbis _ma_decoder_init_vfs_vorbis;

  int ma_decoder_init_vfs_w(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int32> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_vfs_w ??= _dylib.lookupFunction<_c_ma_decoder_init_vfs_w,
        _dart_ma_decoder_init_vfs_w>('ma_decoder_init_vfs_w');
    return _ma_decoder_init_vfs_w(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_vfs_w _ma_decoder_init_vfs_w;

  int ma_decoder_init_vfs_wav_w(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int32> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_vfs_wav_w ??= _dylib.lookupFunction<
        _c_ma_decoder_init_vfs_wav_w,
        _dart_ma_decoder_init_vfs_wav_w>('ma_decoder_init_vfs_wav_w');
    return _ma_decoder_init_vfs_wav_w(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_vfs_wav_w _ma_decoder_init_vfs_wav_w;

  int ma_decoder_init_vfs_flac_w(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int32> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_vfs_flac_w ??= _dylib.lookupFunction<
        _c_ma_decoder_init_vfs_flac_w,
        _dart_ma_decoder_init_vfs_flac_w>('ma_decoder_init_vfs_flac_w');
    return _ma_decoder_init_vfs_flac_w(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_vfs_flac_w _ma_decoder_init_vfs_flac_w;

  int ma_decoder_init_vfs_mp3_w(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int32> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_vfs_mp3_w ??= _dylib.lookupFunction<
        _c_ma_decoder_init_vfs_mp3_w,
        _dart_ma_decoder_init_vfs_mp3_w>('ma_decoder_init_vfs_mp3_w');
    return _ma_decoder_init_vfs_mp3_w(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_vfs_mp3_w _ma_decoder_init_vfs_mp3_w;

  int ma_decoder_init_vfs_vorbis_w(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int32> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_vfs_vorbis_w ??= _dylib.lookupFunction<
        _c_ma_decoder_init_vfs_vorbis_w,
        _dart_ma_decoder_init_vfs_vorbis_w>('ma_decoder_init_vfs_vorbis_w');
    return _ma_decoder_init_vfs_vorbis_w(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_vfs_vorbis_w _ma_decoder_init_vfs_vorbis_w;

  int ma_decoder_init_file(
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_file ??= _dylib.lookupFunction<_c_ma_decoder_init_file,
        _dart_ma_decoder_init_file>('ma_decoder_init_file');
    return _ma_decoder_init_file(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_file _ma_decoder_init_file;

  int ma_decoder_init_file_wav(
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_file_wav ??= _dylib.lookupFunction<
        _c_ma_decoder_init_file_wav,
        _dart_ma_decoder_init_file_wav>('ma_decoder_init_file_wav');
    return _ma_decoder_init_file_wav(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_file_wav _ma_decoder_init_file_wav;

  int ma_decoder_init_file_flac(
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_file_flac ??= _dylib.lookupFunction<
        _c_ma_decoder_init_file_flac,
        _dart_ma_decoder_init_file_flac>('ma_decoder_init_file_flac');
    return _ma_decoder_init_file_flac(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_file_flac _ma_decoder_init_file_flac;

  int ma_decoder_init_file_mp3(
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_file_mp3 ??= _dylib.lookupFunction<
        _c_ma_decoder_init_file_mp3,
        _dart_ma_decoder_init_file_mp3>('ma_decoder_init_file_mp3');
    return _ma_decoder_init_file_mp3(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_file_mp3 _ma_decoder_init_file_mp3;

  int ma_decoder_init_file_vorbis(
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_file_vorbis ??= _dylib.lookupFunction<
        _c_ma_decoder_init_file_vorbis,
        _dart_ma_decoder_init_file_vorbis>('ma_decoder_init_file_vorbis');
    return _ma_decoder_init_file_vorbis(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_file_vorbis _ma_decoder_init_file_vorbis;

  int ma_decoder_init_file_w(
    ffi.Pointer<ffi.Int32> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_file_w ??= _dylib.lookupFunction<_c_ma_decoder_init_file_w,
        _dart_ma_decoder_init_file_w>('ma_decoder_init_file_w');
    return _ma_decoder_init_file_w(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_file_w _ma_decoder_init_file_w;

  int ma_decoder_init_file_wav_w(
    ffi.Pointer<ffi.Int32> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_file_wav_w ??= _dylib.lookupFunction<
        _c_ma_decoder_init_file_wav_w,
        _dart_ma_decoder_init_file_wav_w>('ma_decoder_init_file_wav_w');
    return _ma_decoder_init_file_wav_w(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_file_wav_w _ma_decoder_init_file_wav_w;

  int ma_decoder_init_file_flac_w(
    ffi.Pointer<ffi.Int32> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_file_flac_w ??= _dylib.lookupFunction<
        _c_ma_decoder_init_file_flac_w,
        _dart_ma_decoder_init_file_flac_w>('ma_decoder_init_file_flac_w');
    return _ma_decoder_init_file_flac_w(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_file_flac_w _ma_decoder_init_file_flac_w;

  int ma_decoder_init_file_mp3_w(
    ffi.Pointer<ffi.Int32> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_file_mp3_w ??= _dylib.lookupFunction<
        _c_ma_decoder_init_file_mp3_w,
        _dart_ma_decoder_init_file_mp3_w>('ma_decoder_init_file_mp3_w');
    return _ma_decoder_init_file_mp3_w(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_file_mp3_w _ma_decoder_init_file_mp3_w;

  int ma_decoder_init_file_vorbis_w(
    ffi.Pointer<ffi.Int32> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_init_file_vorbis_w ??= _dylib.lookupFunction<
        _c_ma_decoder_init_file_vorbis_w,
        _dart_ma_decoder_init_file_vorbis_w>('ma_decoder_init_file_vorbis_w');
    return _ma_decoder_init_file_vorbis_w(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  _dart_ma_decoder_init_file_vorbis_w _ma_decoder_init_file_vorbis_w;

  int ma_decoder_uninit(
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_uninit ??=
        _dylib.lookupFunction<_c_ma_decoder_uninit, _dart_ma_decoder_uninit>(
            'ma_decoder_uninit');
    return _ma_decoder_uninit(
      pDecoder,
    );
  }

  _dart_ma_decoder_uninit _ma_decoder_uninit;

  int ma_decoder_get_cursor_in_pcm_frames(
    ffi.Pointer<ma_decoder> pDecoder,
    ffi.Pointer<ffi.Uint64> pCursor,
  ) {
    _ma_decoder_get_cursor_in_pcm_frames ??= _dylib.lookupFunction<
            _c_ma_decoder_get_cursor_in_pcm_frames,
            _dart_ma_decoder_get_cursor_in_pcm_frames>(
        'ma_decoder_get_cursor_in_pcm_frames');
    return _ma_decoder_get_cursor_in_pcm_frames(
      pDecoder,
      pCursor,
    );
  }

  _dart_ma_decoder_get_cursor_in_pcm_frames
      _ma_decoder_get_cursor_in_pcm_frames;

  int ma_decoder_get_length_in_pcm_frames(
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    _ma_decoder_get_length_in_pcm_frames ??= _dylib.lookupFunction<
            _c_ma_decoder_get_length_in_pcm_frames,
            _dart_ma_decoder_get_length_in_pcm_frames>(
        'ma_decoder_get_length_in_pcm_frames');
    return _ma_decoder_get_length_in_pcm_frames(
      pDecoder,
    );
  }

  _dart_ma_decoder_get_length_in_pcm_frames
      _ma_decoder_get_length_in_pcm_frames;

  int ma_decoder_read_pcm_frames(
    ffi.Pointer<ma_decoder> pDecoder,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
  ) {
    _ma_decoder_read_pcm_frames ??= _dylib.lookupFunction<
        _c_ma_decoder_read_pcm_frames,
        _dart_ma_decoder_read_pcm_frames>('ma_decoder_read_pcm_frames');
    return _ma_decoder_read_pcm_frames(
      pDecoder,
      pFramesOut,
      frameCount,
    );
  }

  _dart_ma_decoder_read_pcm_frames _ma_decoder_read_pcm_frames;

  int ma_decoder_seek_to_pcm_frame(
    ffi.Pointer<ma_decoder> pDecoder,
    int frameIndex,
  ) {
    _ma_decoder_seek_to_pcm_frame ??= _dylib.lookupFunction<
        _c_ma_decoder_seek_to_pcm_frame,
        _dart_ma_decoder_seek_to_pcm_frame>('ma_decoder_seek_to_pcm_frame');
    return _ma_decoder_seek_to_pcm_frame(
      pDecoder,
      frameIndex,
    );
  }

  _dart_ma_decoder_seek_to_pcm_frame _ma_decoder_seek_to_pcm_frame;

  int ma_decoder_get_available_frames(
    ffi.Pointer<ma_decoder> pDecoder,
    ffi.Pointer<ffi.Uint64> pAvailableFrames,
  ) {
    _ma_decoder_get_available_frames ??= _dylib.lookupFunction<
            _c_ma_decoder_get_available_frames,
            _dart_ma_decoder_get_available_frames>(
        'ma_decoder_get_available_frames');
    return _ma_decoder_get_available_frames(
      pDecoder,
      pAvailableFrames,
    );
  }

  _dart_ma_decoder_get_available_frames _ma_decoder_get_available_frames;

  int ma_decode_from_vfs(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ffi.Uint64> pFrameCountOut,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
  ) {
    _ma_decode_from_vfs ??=
        _dylib.lookupFunction<_c_ma_decode_from_vfs, _dart_ma_decode_from_vfs>(
            'ma_decode_from_vfs');
    return _ma_decode_from_vfs(
      pVFS,
      pFilePath,
      pConfig,
      pFrameCountOut,
      ppPCMFramesOut,
    );
  }

  _dart_ma_decode_from_vfs _ma_decode_from_vfs;

  int ma_decode_file(
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ffi.Uint64> pFrameCountOut,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
  ) {
    _ma_decode_file ??=
        _dylib.lookupFunction<_c_ma_decode_file, _dart_ma_decode_file>(
            'ma_decode_file');
    return _ma_decode_file(
      pFilePath,
      pConfig,
      pFrameCountOut,
      ppPCMFramesOut,
    );
  }

  _dart_ma_decode_file _ma_decode_file;

  int ma_decode_memory(
    ffi.Pointer<ffi.Void> pData,
    int dataSize,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ffi.Uint64> pFrameCountOut,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
  ) {
    _ma_decode_memory ??=
        _dylib.lookupFunction<_c_ma_decode_memory, _dart_ma_decode_memory>(
            'ma_decode_memory');
    return _ma_decode_memory(
      pData,
      dataSize,
      pConfig,
      pFrameCountOut,
      ppPCMFramesOut,
    );
  }

  _dart_ma_decode_memory _ma_decode_memory;

  int ma_encoder_init(
    ffi.Pointer<ffi.NativeFunction<ma_encoder_write_proc>> onWrite,
    ffi.Pointer<ffi.NativeFunction<ma_encoder_seek_proc>> onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ma_encoder_config> pConfig,
    ffi.Pointer<ma_encoder> pEncoder,
  ) {
    _ma_encoder_init ??=
        _dylib.lookupFunction<_c_ma_encoder_init, _dart_ma_encoder_init>(
            'ma_encoder_init');
    return _ma_encoder_init(
      onWrite,
      onSeek,
      pUserData,
      pConfig,
      pEncoder,
    );
  }

  _dart_ma_encoder_init _ma_encoder_init;

  int ma_encoder_init_file(
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_encoder_config> pConfig,
    ffi.Pointer<ma_encoder> pEncoder,
  ) {
    _ma_encoder_init_file ??= _dylib.lookupFunction<_c_ma_encoder_init_file,
        _dart_ma_encoder_init_file>('ma_encoder_init_file');
    return _ma_encoder_init_file(
      pFilePath,
      pConfig,
      pEncoder,
    );
  }

  _dart_ma_encoder_init_file _ma_encoder_init_file;

  int ma_encoder_init_file_w(
    ffi.Pointer<ffi.Int32> pFilePath,
    ffi.Pointer<ma_encoder_config> pConfig,
    ffi.Pointer<ma_encoder> pEncoder,
  ) {
    _ma_encoder_init_file_w ??= _dylib.lookupFunction<_c_ma_encoder_init_file_w,
        _dart_ma_encoder_init_file_w>('ma_encoder_init_file_w');
    return _ma_encoder_init_file_w(
      pFilePath,
      pConfig,
      pEncoder,
    );
  }

  _dart_ma_encoder_init_file_w _ma_encoder_init_file_w;

  void ma_encoder_uninit(
    ffi.Pointer<ma_encoder> pEncoder,
  ) {
    _ma_encoder_uninit ??=
        _dylib.lookupFunction<_c_ma_encoder_uninit, _dart_ma_encoder_uninit>(
            'ma_encoder_uninit');
    return _ma_encoder_uninit(
      pEncoder,
    );
  }

  _dart_ma_encoder_uninit _ma_encoder_uninit;

  int ma_encoder_write_pcm_frames(
    ffi.Pointer<ma_encoder> pEncoder,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    _ma_encoder_write_pcm_frames ??= _dylib.lookupFunction<
        _c_ma_encoder_write_pcm_frames,
        _dart_ma_encoder_write_pcm_frames>('ma_encoder_write_pcm_frames');
    return _ma_encoder_write_pcm_frames(
      pEncoder,
      pFramesIn,
      frameCount,
    );
  }

  _dart_ma_encoder_write_pcm_frames _ma_encoder_write_pcm_frames;

  int ma_waveform_init(
    ffi.Pointer<ma_waveform_config> pConfig,
    ffi.Pointer<ma_waveform> pWaveform,
  ) {
    _ma_waveform_init ??=
        _dylib.lookupFunction<_c_ma_waveform_init, _dart_ma_waveform_init>(
            'ma_waveform_init');
    return _ma_waveform_init(
      pConfig,
      pWaveform,
    );
  }

  _dart_ma_waveform_init _ma_waveform_init;

  int ma_waveform_read_pcm_frames(
    ffi.Pointer<ma_waveform> pWaveform,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
  ) {
    _ma_waveform_read_pcm_frames ??= _dylib.lookupFunction<
        _c_ma_waveform_read_pcm_frames,
        _dart_ma_waveform_read_pcm_frames>('ma_waveform_read_pcm_frames');
    return _ma_waveform_read_pcm_frames(
      pWaveform,
      pFramesOut,
      frameCount,
    );
  }

  _dart_ma_waveform_read_pcm_frames _ma_waveform_read_pcm_frames;

  int ma_waveform_seek_to_pcm_frame(
    ffi.Pointer<ma_waveform> pWaveform,
    int frameIndex,
  ) {
    _ma_waveform_seek_to_pcm_frame ??= _dylib.lookupFunction<
        _c_ma_waveform_seek_to_pcm_frame,
        _dart_ma_waveform_seek_to_pcm_frame>('ma_waveform_seek_to_pcm_frame');
    return _ma_waveform_seek_to_pcm_frame(
      pWaveform,
      frameIndex,
    );
  }

  _dart_ma_waveform_seek_to_pcm_frame _ma_waveform_seek_to_pcm_frame;

  int ma_waveform_set_amplitude(
    ffi.Pointer<ma_waveform> pWaveform,
    double amplitude,
  ) {
    _ma_waveform_set_amplitude ??= _dylib.lookupFunction<
        _c_ma_waveform_set_amplitude,
        _dart_ma_waveform_set_amplitude>('ma_waveform_set_amplitude');
    return _ma_waveform_set_amplitude(
      pWaveform,
      amplitude,
    );
  }

  _dart_ma_waveform_set_amplitude _ma_waveform_set_amplitude;

  int ma_waveform_set_frequency(
    ffi.Pointer<ma_waveform> pWaveform,
    double frequency,
  ) {
    _ma_waveform_set_frequency ??= _dylib.lookupFunction<
        _c_ma_waveform_set_frequency,
        _dart_ma_waveform_set_frequency>('ma_waveform_set_frequency');
    return _ma_waveform_set_frequency(
      pWaveform,
      frequency,
    );
  }

  _dart_ma_waveform_set_frequency _ma_waveform_set_frequency;

  int ma_waveform_set_type(
    ffi.Pointer<ma_waveform> pWaveform,
    int type,
  ) {
    _ma_waveform_set_type ??= _dylib.lookupFunction<_c_ma_waveform_set_type,
        _dart_ma_waveform_set_type>('ma_waveform_set_type');
    return _ma_waveform_set_type(
      pWaveform,
      type,
    );
  }

  _dart_ma_waveform_set_type _ma_waveform_set_type;

  int ma_waveform_set_sample_rate(
    ffi.Pointer<ma_waveform> pWaveform,
    int sampleRate,
  ) {
    _ma_waveform_set_sample_rate ??= _dylib.lookupFunction<
        _c_ma_waveform_set_sample_rate,
        _dart_ma_waveform_set_sample_rate>('ma_waveform_set_sample_rate');
    return _ma_waveform_set_sample_rate(
      pWaveform,
      sampleRate,
    );
  }

  _dart_ma_waveform_set_sample_rate _ma_waveform_set_sample_rate;

  int ma_noise_init(
    ffi.Pointer<ma_noise_config> pConfig,
    ffi.Pointer<ma_noise> pNoise,
  ) {
    _ma_noise_init ??= _dylib
        .lookupFunction<_c_ma_noise_init, _dart_ma_noise_init>('ma_noise_init');
    return _ma_noise_init(
      pConfig,
      pNoise,
    );
  }

  _dart_ma_noise_init _ma_noise_init;

  int ma_noise_read_pcm_frames(
    ffi.Pointer<ma_noise> pNoise,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
  ) {
    _ma_noise_read_pcm_frames ??= _dylib.lookupFunction<
        _c_ma_noise_read_pcm_frames,
        _dart_ma_noise_read_pcm_frames>('ma_noise_read_pcm_frames');
    return _ma_noise_read_pcm_frames(
      pNoise,
      pFramesOut,
      frameCount,
    );
  }

  _dart_ma_noise_read_pcm_frames _ma_noise_read_pcm_frames;

  int ma_noise_set_amplitude(
    ffi.Pointer<ma_noise> pNoise,
    double amplitude,
  ) {
    _ma_noise_set_amplitude ??= _dylib.lookupFunction<_c_ma_noise_set_amplitude,
        _dart_ma_noise_set_amplitude>('ma_noise_set_amplitude');
    return _ma_noise_set_amplitude(
      pNoise,
      amplitude,
    );
  }

  _dart_ma_noise_set_amplitude _ma_noise_set_amplitude;

  int ma_noise_set_seed(
    ffi.Pointer<ma_noise> pNoise,
    int seed,
  ) {
    _ma_noise_set_seed ??=
        _dylib.lookupFunction<_c_ma_noise_set_seed, _dart_ma_noise_set_seed>(
            'ma_noise_set_seed');
    return _ma_noise_set_seed(
      pNoise,
      seed,
    );
  }

  _dart_ma_noise_set_seed _ma_noise_set_seed;

  int ma_noise_set_type(
    ffi.Pointer<ma_noise> pNoise,
    int type,
  ) {
    _ma_noise_set_type ??=
        _dylib.lookupFunction<_c_ma_noise_set_type, _dart_ma_noise_set_type>(
            'ma_noise_set_type');
    return _ma_noise_set_type(
      pNoise,
      type,
    );
  }

  _dart_ma_noise_set_type _ma_noise_set_type;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __routine;

  ffi.Pointer<ffi.Void> __arg;

  ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {}

class _opaque_pthread_cond_t extends ffi.Struct {}

class _opaque_pthread_condattr_t extends ffi.Struct {}

class _opaque_pthread_mutex_t extends ffi.Struct {}

class _opaque_pthread_mutexattr_t extends ffi.Struct {}

class _opaque_pthread_once_t extends ffi.Struct {}

class _opaque_pthread_rwlock_t extends ffi.Struct {}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {}

class _opaque_pthread_t extends ffi.Struct {}

class sched_param extends ffi.Struct {}

class timespec extends ffi.Struct {
  @ffi.Int64()
  int tv_sec;

  @ffi.Int64()
  int tv_nsec;
}

class tm extends ffi.Struct {
  @ffi.Int32()
  int tm_sec;

  @ffi.Int32()
  int tm_min;

  @ffi.Int32()
  int tm_hour;

  @ffi.Int32()
  int tm_mday;

  @ffi.Int32()
  int tm_mon;

  @ffi.Int32()
  int tm_year;

  @ffi.Int32()
  int tm_wday;

  @ffi.Int32()
  int tm_yday;

  @ffi.Int32()
  int tm_isdst;

  @ffi.Int64()
  int tm_gmtoff;

  ffi.Pointer<ffi.Int8> tm_zone;
}

abstract class clockid_t {
  static const int _CLOCK_REALTIME = 0;
  static const int _CLOCK_MONOTONIC = 6;
  static const int _CLOCK_MONOTONIC_RAW = 4;
  static const int _CLOCK_MONOTONIC_RAW_APPROX = 5;
  static const int _CLOCK_UPTIME_RAW = 8;
  static const int _CLOCK_UPTIME_RAW_APPROX = 9;
  static const int _CLOCK_PROCESS_CPUTIME_ID = 12;
  static const int _CLOCK_THREAD_CPUTIME_ID = 16;
}

class pthread_override_s extends ffi.Struct {}

class ma_context extends ffi.Struct {}

class ma_device extends ffi.Struct {}

abstract class ma_stream_format {
  static const int ma_stream_format_pcm = 0;
}

abstract class ma_stream_layout {
  static const int ma_stream_layout_interleaved = 0;
  static const int ma_stream_layout_deinterleaved = 1;
}

abstract class ma_dither_mode {
  static const int ma_dither_mode_none = 0;
  static const int ma_dither_mode_rectangle = 1;
  static const int ma_dither_mode_triangle = 2;
}

abstract class ma_format {
  static const int ma_format_unknown = 0;
  static const int ma_format_u8 = 1;
  static const int ma_format_s16 = 2;
  static const int ma_format_s24 = 3;
  static const int ma_format_s32 = 4;
  static const int ma_format_f32 = 5;
  static const int ma_format_count = 6;
}

abstract class ma_channel_mix_mode {
  static const int ma_channel_mix_mode_rectangular = 0;
  static const int ma_channel_mix_mode_simple = 1;
  static const int ma_channel_mix_mode_custom_weights = 2;
  static const int ma_channel_mix_mode_planar_blend = 0;
  static const int ma_channel_mix_mode_default = 0;
}

abstract class ma_standard_channel_map {
  static const int ma_standard_channel_map_microsoft = 0;
  static const int ma_standard_channel_map_alsa = 1;
  static const int ma_standard_channel_map_rfc3551 = 2;
  static const int ma_standard_channel_map_flac = 3;
  static const int ma_standard_channel_map_vorbis = 4;
  static const int ma_standard_channel_map_sound4 = 5;
  static const int ma_standard_channel_map_sndio = 6;
  static const int ma_standard_channel_map_webaudio = 3;
  static const int ma_standard_channel_map_default = 0;
}

abstract class ma_performance_profile {
  static const int ma_performance_profile_low_latency = 0;
  static const int ma_performance_profile_conservative = 1;
}

class ma_allocation_callbacks extends ffi.Struct {
  ffi.Pointer<ffi.Void> pUserData;

  ffi.Pointer<ffi.NativeFunction<_typedefC_9>> onMalloc;

  ffi.Pointer<ffi.NativeFunction<_typedefC_10>> onRealloc;

  ffi.Pointer<ffi.NativeFunction<_typedefC_11>> onFree;
}

class ma_lcg extends ffi.Struct {
  @ffi.Int32()
  int state;
}

abstract class ma_thread_priority {
  static const int ma_thread_priority_idle = -5;
  static const int ma_thread_priority_lowest = -4;
  static const int ma_thread_priority_low = -3;
  static const int ma_thread_priority_normal = -2;
  static const int ma_thread_priority_high = -1;
  static const int ma_thread_priority_highest = 0;
  static const int ma_thread_priority_realtime = 1;
  static const int ma_thread_priority_default = 0;
}

class ma_event extends ffi.Struct {}

class ma_semaphore extends ffi.Struct {}

class ma_biquad_config extends ffi.Struct {
  @ffi.Int32()
  int format;

  @ffi.Uint32()
  int channels;

  @ffi.Double()
  double b0;

  @ffi.Double()
  double b1;

  @ffi.Double()
  double b2;

  @ffi.Double()
  double a0;

  @ffi.Double()
  double a1;

  @ffi.Double()
  double a2;
}

class ma_biquad extends ffi.Struct {}

/// Low-Pass Filtering
class ma_lpf2_config extends ffi.Struct {
  @ffi.Int32()
  int format;

  @ffi.Uint32()
  int channels;

  @ffi.Uint32()
  int sampleRate;

  @ffi.Double()
  double cutoffFrequency;

  @ffi.Double()
  double q;
}

class ma_lpf1 extends ffi.Struct {}

class ma_lpf2 extends ffi.Struct {}

class ma_lpf_config extends ffi.Struct {
  @ffi.Int32()
  int format;

  @ffi.Uint32()
  int channels;

  @ffi.Uint32()
  int sampleRate;

  @ffi.Double()
  double cutoffFrequency;

  @ffi.Uint32()
  int order;
}

class ma_lpf extends ffi.Struct {}

/// High-Pass Filtering
class ma_hpf2_config extends ffi.Struct {
  @ffi.Int32()
  int format;

  @ffi.Uint32()
  int channels;

  @ffi.Uint32()
  int sampleRate;

  @ffi.Double()
  double cutoffFrequency;

  @ffi.Double()
  double q;
}

class ma_hpf1 extends ffi.Struct {}

class ma_hpf2 extends ffi.Struct {}

class ma_hpf_config extends ffi.Struct {
  @ffi.Int32()
  int format;

  @ffi.Uint32()
  int channels;

  @ffi.Uint32()
  int sampleRate;

  @ffi.Double()
  double cutoffFrequency;

  @ffi.Uint32()
  int order;
}

class ma_hpf extends ffi.Struct {}

/// Band-Pass Filtering
class ma_bpf2_config extends ffi.Struct {
  @ffi.Int32()
  int format;

  @ffi.Uint32()
  int channels;

  @ffi.Uint32()
  int sampleRate;

  @ffi.Double()
  double cutoffFrequency;

  @ffi.Double()
  double q;
}

class ma_bpf2 extends ffi.Struct {}

class ma_bpf_config extends ffi.Struct {
  @ffi.Int32()
  int format;

  @ffi.Uint32()
  int channels;

  @ffi.Uint32()
  int sampleRate;

  @ffi.Double()
  double cutoffFrequency;

  @ffi.Uint32()
  int order;
}

class ma_bpf extends ffi.Struct {}

/// Notching Filter
class ma_notch2_config extends ffi.Struct {
  @ffi.Int32()
  int format;

  @ffi.Uint32()
  int channels;

  @ffi.Uint32()
  int sampleRate;

  @ffi.Double()
  double q;

  @ffi.Double()
  double frequency;
}

class ma_notch2 extends ffi.Struct {}

/// Peaking EQ Filter
class ma_peak2_config extends ffi.Struct {
  @ffi.Int32()
  int format;

  @ffi.Uint32()
  int channels;

  @ffi.Uint32()
  int sampleRate;

  @ffi.Double()
  double gainDB;

  @ffi.Double()
  double q;

  @ffi.Double()
  double frequency;
}

class ma_peak2 extends ffi.Struct {}

/// Low Shelf Filter
class ma_loshelf2_config extends ffi.Struct {
  @ffi.Int32()
  int format;

  @ffi.Uint32()
  int channels;

  @ffi.Uint32()
  int sampleRate;

  @ffi.Double()
  double gainDB;

  @ffi.Double()
  double shelfSlope;

  @ffi.Double()
  double frequency;
}

class ma_loshelf2 extends ffi.Struct {}

/// High Shelf Filter
class ma_hishelf2_config extends ffi.Struct {
  @ffi.Int32()
  int format;

  @ffi.Uint32()
  int channels;

  @ffi.Uint32()
  int sampleRate;

  @ffi.Double()
  double gainDB;

  @ffi.Double()
  double shelfSlope;

  @ffi.Double()
  double frequency;
}

class ma_hishelf2 extends ffi.Struct {}

/// Resampling
class ma_linear_resampler_config extends ffi.Struct {
  @ffi.Int32()
  int format;

  @ffi.Uint32()
  int channels;

  @ffi.Uint32()
  int sampleRateIn;

  @ffi.Uint32()
  int sampleRateOut;

  @ffi.Uint32()
  int lpfOrder;

  @ffi.Double()
  double lpfNyquistFactor;
}

class ma_linear_resampler extends ffi.Struct {}

abstract class ma_resample_algorithm {
  static const int ma_resample_algorithm_linear = 0;
  static const int ma_resample_algorithm_speex = 1;
}

class ma_resampler_config extends ffi.Struct {}

class ma_resampler extends ffi.Struct {}

/// Channel Conversion
class ma_channel_converter_config extends ffi.Struct {}

class ma_channel_converter extends ffi.Struct {}

/// Data Conversion
class ma_data_converter_config extends ffi.Struct {}

class ma_data_converter extends ffi.Struct {}

/// Ring Buffer
class ma_rb extends ffi.Struct {}

class ma_pcm_rb extends ffi.Struct {}

class ma_duplex_rb extends ffi.Struct {}

abstract class ma_backend {
  static const int ma_backend_wasapi = 0;
  static const int ma_backend_dsound = 1;
  static const int ma_backend_winmm = 2;
  static const int ma_backend_coreaudio = 3;
  static const int ma_backend_sndio = 4;
  static const int ma_backend_audio4 = 5;
  static const int ma_backend_oss = 6;
  static const int ma_backend_pulseaudio = 7;
  static const int ma_backend_alsa = 8;
  static const int ma_backend_jack = 9;
  static const int ma_backend_aaudio = 10;
  static const int ma_backend_opensl = 11;
  static const int ma_backend_webaudio = 12;
  static const int ma_backend_custom = 13;
  static const int ma_backend_null = 14;
}

abstract class ma_device_type {
  static const int ma_device_type_playback = 1;
  static const int ma_device_type_capture = 2;
  static const int ma_device_type_duplex = 3;
  static const int ma_device_type_loopback = 4;
}

abstract class ma_share_mode {
  static const int ma_share_mode_shared = 0;
  static const int ma_share_mode_exclusive = 1;
}

abstract class ma_ios_session_category {
  static const int ma_ios_session_category_default = 0;
  static const int ma_ios_session_category_none = 1;
  static const int ma_ios_session_category_ambient = 2;
  static const int ma_ios_session_category_solo_ambient = 3;
  static const int ma_ios_session_category_playback = 4;
  static const int ma_ios_session_category_record = 5;
  static const int ma_ios_session_category_play_and_record = 6;
  static const int ma_ios_session_category_multi_route = 7;
}

abstract class ma_ios_session_category_option {
  static const int ma_ios_session_category_option_mix_with_others = 1;
  static const int ma_ios_session_category_option_duck_others = 2;
  static const int ma_ios_session_category_option_allow_bluetooth = 4;
  static const int ma_ios_session_category_option_default_to_speaker = 8;
  static const int
      ma_ios_session_category_option_interrupt_spoken_audio_and_mix_with_others =
      17;
  static const int ma_ios_session_category_option_allow_bluetooth_a2dp = 32;
  static const int ma_ios_session_category_option_allow_air_play = 64;
}

abstract class ma_opensl_stream_type {
  static const int ma_opensl_stream_type_default = 0;
  static const int ma_opensl_stream_type_voice = 1;
  static const int ma_opensl_stream_type_system = 2;
  static const int ma_opensl_stream_type_ring = 3;
  static const int ma_opensl_stream_type_media = 4;
  static const int ma_opensl_stream_type_alarm = 5;
  static const int ma_opensl_stream_type_notification = 6;
}

abstract class ma_opensl_recording_preset {
  static const int ma_opensl_recording_preset_default = 0;
  static const int ma_opensl_recording_preset_generic = 1;
  static const int ma_opensl_recording_preset_camcorder = 2;
  static const int ma_opensl_recording_preset_voice_recognition = 3;
  static const int ma_opensl_recording_preset_voice_communication = 4;
  static const int ma_opensl_recording_preset_voice_unprocessed = 5;
}

abstract class ma_aaudio_usage {
  static const int ma_aaudio_usage_default = 0;
  static const int ma_aaudio_usage_announcement = 1;
  static const int ma_aaudio_usage_emergency = 2;
  static const int ma_aaudio_usage_safety = 3;
  static const int ma_aaudio_usage_vehicle_status = 4;
  static const int ma_aaudio_usage_alarm = 5;
  static const int ma_aaudio_usage_assistance_accessibility = 6;
  static const int ma_aaudio_usage_assistance_navigation_guidance = 7;
  static const int ma_aaudio_usage_assistance_sonification = 8;
  static const int ma_aaudio_usage_assitant = 9;
  static const int ma_aaudio_usage_game = 10;
  static const int ma_aaudio_usage_media = 11;
  static const int ma_aaudio_usage_notification = 12;
  static const int ma_aaudio_usage_notification_event = 13;
  static const int ma_aaudio_usage_notification_ringtone = 14;
  static const int ma_aaudio_usage_voice_communication = 15;
  static const int ma_aaudio_usage_voice_communication_signalling = 16;
}

abstract class ma_aaudio_content_type {
  static const int ma_aaudio_content_type_default = 0;
  static const int ma_aaudio_content_type_movie = 1;
  static const int ma_aaudio_content_type_music = 2;
  static const int ma_aaudio_content_type_sonification = 3;
  static const int ma_aaudio_content_type_speech = 4;
}

abstract class ma_aaudio_input_preset {
  static const int ma_aaudio_input_preset_default = 0;
  static const int ma_aaudio_input_preset_generic = 1;
  static const int ma_aaudio_input_preset_camcorder = 2;
  static const int ma_aaudio_input_preset_unprocessed = 3;
  static const int ma_aaudio_input_preset_voice_recognition = 4;
  static const int ma_aaudio_input_preset_voice_communication = 5;
  static const int ma_aaudio_input_preset_voice_performance = 6;
}

class ma_context_config extends ffi.Struct {}

class ma_device_config extends ffi.Struct {}

class ma_backend_callbacks extends ffi.Struct {}

class ma_device_info extends ffi.Struct {}

class ma_device_descriptor extends ffi.Struct {}

class ma_data_source_callbacks extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_12>> onRead;

  ffi.Pointer<ffi.NativeFunction<_typedefC_13>> onSeek;

  ffi.Pointer<ffi.NativeFunction<_typedefC_14>> onMap;

  ffi.Pointer<ffi.NativeFunction<_typedefC_15>> onUnmap;

  ffi.Pointer<ffi.NativeFunction<_typedefC_16>> onGetDataFormat;

  ffi.Pointer<ffi.NativeFunction<_typedefC_17>> onGetCursor;

  ffi.Pointer<ffi.NativeFunction<_typedefC_18>> onGetLength;
}

class ma_audio_buffer_config extends ffi.Struct {}

class ma_audio_buffer extends ffi.Struct {}

abstract class ma_seek_origin {
  static const int ma_seek_origin_start = 0;
  static const int ma_seek_origin_current = 1;
  static const int ma_seek_origin_end = 2;
}

class ma_file_info extends ffi.Struct {
  @ffi.Uint64()
  int sizeInBytes;
}

class ma_vfs_callbacks extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_19>> onOpen;

  ffi.Pointer<ffi.NativeFunction<_typedefC_20>> onOpenW;

  ffi.Pointer<ffi.NativeFunction<_typedefC_21>> onClose;

  ffi.Pointer<ffi.NativeFunction<_typedefC_22>> onRead;

  ffi.Pointer<ffi.NativeFunction<_typedefC_23>> onWrite;

  ffi.Pointer<ffi.NativeFunction<_typedefC_24>> onSeek;

  ffi.Pointer<ffi.NativeFunction<_typedefC_25>> onTell;

  ffi.Pointer<ffi.NativeFunction<_typedefC_26>> onInfo;
}

class ma_default_vfs extends ffi.Struct {}

abstract class ma_resource_format {
  static const int ma_resource_format_wav = 0;
}

class ma_decoder extends ffi.Struct {}

class ma_decoder_config extends ffi.Struct {}

class ma_encoder extends ffi.Struct {}

class ma_encoder_config extends ffi.Struct {}

abstract class ma_waveform_type {
  static const int ma_waveform_type_sine = 0;
  static const int ma_waveform_type_square = 1;
  static const int ma_waveform_type_triangle = 2;
  static const int ma_waveform_type_sawtooth = 3;
}

class ma_waveform_config extends ffi.Struct {
  @ffi.Int32()
  int format;

  @ffi.Uint32()
  int channels;

  @ffi.Uint32()
  int sampleRate;

  @ffi.Int32()
  int type;

  @ffi.Double()
  double amplitude;

  @ffi.Double()
  double frequency;
}

class ma_waveform extends ffi.Struct {}

abstract class ma_noise_type {
  static const int ma_noise_type_white = 0;
  static const int ma_noise_type_pink = 1;
  static const int ma_noise_type_brownian = 2;
}

class ma_noise_config extends ffi.Struct {
  @ffi.Int32()
  int format;

  @ffi.Uint32()
  int channels;

  @ffi.Int32()
  int type;

  @ffi.Int32()
  int seed;

  @ffi.Double()
  double amplitude;

  @ffi.Uint32()
  int duplicateChannels;
}

class ma_noise extends ffi.Struct {}

const int QOS_CLASS_USER_INTERACTIVE = 33;

const int QOS_CLASS_USER_INITIATED = 25;

const int QOS_CLASS_DEFAULT = 21;

const int QOS_CLASS_UTILITY = 17;

const int QOS_CLASS_BACKGROUND = 9;

const int QOS_CLASS_UNSPECIFIED = 0;

const int MA_VERSION_MAJOR = 0;

const int MA_VERSION_MINOR = 10;

const int MA_VERSION_REVISION = 29;

const String MA_VERSION_STRING = '0.10.29';

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int _PTHREAD_MUTEX_SIG_init = 850045863;

const int _PTHREAD_ERRORCHECK_MUTEX_SIG_init = 850045857;

const int _PTHREAD_RECURSIVE_MUTEX_SIG_init = 850045858;

const int _PTHREAD_FIRSTFIT_MUTEX_SIG_init = 850045859;

const int _PTHREAD_COND_SIG_init = 1018212795;

const int _PTHREAD_ONCE_SIG_init = 816954554;

const int _PTHREAD_RWLOCK_SIG_init = 766030772;

const int SCHED_OTHER = 1;

const int SCHED_FIFO = 4;

const int SCHED_RR = 2;

const int __SCHED_PARAM_SIZE__ = 4;

const int __API_TO_BE_DEPRECATED = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 101500;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 110000;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int USER_ADDR_NULL = 0;

const int NULL = 0;

const int CLOCKS_PER_SEC = 1000000;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 6;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_MONOTONIC_RAW_APPROX = 5;

const int CLOCK_UPTIME_RAW = 8;

const int CLOCK_UPTIME_RAW_APPROX = 9;

const int CLOCK_PROCESS_CPUTIME_ID = 12;

const int CLOCK_THREAD_CPUTIME_ID = 16;

const int QOS_MIN_RELATIVE_PRIORITY = -15;

const int PTHREAD_CREATE_JOINABLE = 1;

const int PTHREAD_CREATE_DETACHED = 2;

const int PTHREAD_INHERIT_SCHED = 1;

const int PTHREAD_EXPLICIT_SCHED = 2;

const int PTHREAD_CANCEL_ENABLE = 1;

const int PTHREAD_CANCEL_DISABLE = 0;

const int PTHREAD_CANCEL_DEFERRED = 2;

const int PTHREAD_CANCEL_ASYNCHRONOUS = 0;

const int PTHREAD_SCOPE_SYSTEM = 1;

const int PTHREAD_SCOPE_PROCESS = 2;

const int PTHREAD_PROCESS_SHARED = 1;

const int PTHREAD_PROCESS_PRIVATE = 2;

const int PTHREAD_PRIO_NONE = 0;

const int PTHREAD_PRIO_INHERIT = 1;

const int PTHREAD_PRIO_PROTECT = 2;

const int PTHREAD_MUTEX_NORMAL = 0;

const int PTHREAD_MUTEX_ERRORCHECK = 1;

const int PTHREAD_MUTEX_RECURSIVE = 2;

const int PTHREAD_MUTEX_DEFAULT = 0;

const int PTHREAD_MUTEX_POLICY_FAIRSHARE_NP = 1;

const int PTHREAD_MUTEX_POLICY_FIRSTFIT_NP = 3;

const int MA_TRUE = 1;

const int MA_FALSE = 0;

const int MA_SIZE_MAX = 4294967295;

const int MA_SIMD_ALIGNMENT = 64;

const int MA_LOG_LEVEL_VERBOSE = 4;

const int MA_LOG_LEVEL_INFO = 3;

const int MA_LOG_LEVEL_WARNING = 2;

const int MA_LOG_LEVEL_ERROR = 1;

const int MA_LOG_LEVEL = 1;

const int MA_CHANNEL_NONE = 0;

const int MA_CHANNEL_MONO = 1;

const int MA_CHANNEL_FRONT_LEFT = 2;

const int MA_CHANNEL_FRONT_RIGHT = 3;

const int MA_CHANNEL_FRONT_CENTER = 4;

const int MA_CHANNEL_LFE = 5;

const int MA_CHANNEL_BACK_LEFT = 6;

const int MA_CHANNEL_BACK_RIGHT = 7;

const int MA_CHANNEL_FRONT_LEFT_CENTER = 8;

const int MA_CHANNEL_FRONT_RIGHT_CENTER = 9;

const int MA_CHANNEL_BACK_CENTER = 10;

const int MA_CHANNEL_SIDE_LEFT = 11;

const int MA_CHANNEL_SIDE_RIGHT = 12;

const int MA_CHANNEL_TOP_CENTER = 13;

const int MA_CHANNEL_TOP_FRONT_LEFT = 14;

const int MA_CHANNEL_TOP_FRONT_CENTER = 15;

const int MA_CHANNEL_TOP_FRONT_RIGHT = 16;

const int MA_CHANNEL_TOP_BACK_LEFT = 17;

const int MA_CHANNEL_TOP_BACK_CENTER = 18;

const int MA_CHANNEL_TOP_BACK_RIGHT = 19;

const int MA_CHANNEL_AUX_0 = 20;

const int MA_CHANNEL_AUX_1 = 21;

const int MA_CHANNEL_AUX_2 = 22;

const int MA_CHANNEL_AUX_3 = 23;

const int MA_CHANNEL_AUX_4 = 24;

const int MA_CHANNEL_AUX_5 = 25;

const int MA_CHANNEL_AUX_6 = 26;

const int MA_CHANNEL_AUX_7 = 27;

const int MA_CHANNEL_AUX_8 = 28;

const int MA_CHANNEL_AUX_9 = 29;

const int MA_CHANNEL_AUX_10 = 30;

const int MA_CHANNEL_AUX_11 = 31;

const int MA_CHANNEL_AUX_12 = 32;

const int MA_CHANNEL_AUX_13 = 33;

const int MA_CHANNEL_AUX_14 = 34;

const int MA_CHANNEL_AUX_15 = 35;

const int MA_CHANNEL_AUX_16 = 36;

const int MA_CHANNEL_AUX_17 = 37;

const int MA_CHANNEL_AUX_18 = 38;

const int MA_CHANNEL_AUX_19 = 39;

const int MA_CHANNEL_AUX_20 = 40;

const int MA_CHANNEL_AUX_21 = 41;

const int MA_CHANNEL_AUX_22 = 42;

const int MA_CHANNEL_AUX_23 = 43;

const int MA_CHANNEL_AUX_24 = 44;

const int MA_CHANNEL_AUX_25 = 45;

const int MA_CHANNEL_AUX_26 = 46;

const int MA_CHANNEL_AUX_27 = 47;

const int MA_CHANNEL_AUX_28 = 48;

const int MA_CHANNEL_AUX_29 = 49;

const int MA_CHANNEL_AUX_30 = 50;

const int MA_CHANNEL_AUX_31 = 51;

const int MA_CHANNEL_LEFT = 2;

const int MA_CHANNEL_RIGHT = 3;

const int MA_CHANNEL_POSITION_COUNT = 52;

const int MA_SUCCESS = 0;

const int MA_ERROR = -1;

const int MA_INVALID_ARGS = -2;

const int MA_INVALID_OPERATION = -3;

const int MA_OUT_OF_MEMORY = -4;

const int MA_OUT_OF_RANGE = -5;

const int MA_ACCESS_DENIED = -6;

const int MA_DOES_NOT_EXIST = -7;

const int MA_ALREADY_EXISTS = -8;

const int MA_TOO_MANY_OPEN_FILES = -9;

const int MA_INVALID_FILE = -10;

const int MA_TOO_BIG = -11;

const int MA_PATH_TOO_LONG = -12;

const int MA_NAME_TOO_LONG = -13;

const int MA_NOT_DIRECTORY = -14;

const int MA_IS_DIRECTORY = -15;

const int MA_DIRECTORY_NOT_EMPTY = -16;

const int MA_END_OF_FILE = -17;

const int MA_NO_SPACE = -18;

const int MA_BUSY = -19;

const int MA_IO_ERROR = -20;

const int MA_INTERRUPT = -21;

const int MA_UNAVAILABLE = -22;

const int MA_ALREADY_IN_USE = -23;

const int MA_BAD_ADDRESS = -24;

const int MA_BAD_SEEK = -25;

const int MA_BAD_PIPE = -26;

const int MA_DEADLOCK = -27;

const int MA_TOO_MANY_LINKS = -28;

const int MA_NOT_IMPLEMENTED = -29;

const int MA_NO_MESSAGE = -30;

const int MA_BAD_MESSAGE = -31;

const int MA_NO_DATA_AVAILABLE = -32;

const int MA_INVALID_DATA = -33;

const int MA_TIMEOUT = -34;

const int MA_NO_NETWORK = -35;

const int MA_NOT_UNIQUE = -36;

const int MA_NOT_SOCKET = -37;

const int MA_NO_ADDRESS = -38;

const int MA_BAD_PROTOCOL = -39;

const int MA_PROTOCOL_UNAVAILABLE = -40;

const int MA_PROTOCOL_NOT_SUPPORTED = -41;

const int MA_PROTOCOL_FAMILY_NOT_SUPPORTED = -42;

const int MA_ADDRESS_FAMILY_NOT_SUPPORTED = -43;

const int MA_SOCKET_NOT_SUPPORTED = -44;

const int MA_CONNECTION_RESET = -45;

const int MA_ALREADY_CONNECTED = -46;

const int MA_NOT_CONNECTED = -47;

const int MA_CONNECTION_REFUSED = -48;

const int MA_NO_HOST = -49;

const int MA_IN_PROGRESS = -50;

const int MA_CANCELLED = -51;

const int MA_MEMORY_ALREADY_MAPPED = -52;

const int MA_AT_END = -53;

const int MA_FORMAT_NOT_SUPPORTED = -100;

const int MA_DEVICE_TYPE_NOT_SUPPORTED = -101;

const int MA_SHARE_MODE_NOT_SUPPORTED = -102;

const int MA_NO_BACKEND = -103;

const int MA_NO_DEVICE = -104;

const int MA_API_NOT_FOUND = -105;

const int MA_INVALID_DEVICE_CONFIG = -106;

const int MA_DEVICE_NOT_INITIALIZED = -200;

const int MA_DEVICE_ALREADY_INITIALIZED = -201;

const int MA_DEVICE_NOT_STARTED = -202;

const int MA_DEVICE_NOT_STOPPED = -203;

const int MA_FAILED_TO_INIT_BACKEND = -300;

const int MA_FAILED_TO_OPEN_BACKEND_DEVICE = -301;

const int MA_FAILED_TO_START_BACKEND_DEVICE = -302;

const int MA_FAILED_TO_STOP_BACKEND_DEVICE = -303;

const int MA_SAMPLE_RATE_8000 = 8000;

const int MA_SAMPLE_RATE_11025 = 11025;

const int MA_SAMPLE_RATE_16000 = 16000;

const int MA_SAMPLE_RATE_22050 = 22050;

const int MA_SAMPLE_RATE_24000 = 24000;

const int MA_SAMPLE_RATE_32000 = 32000;

const int MA_SAMPLE_RATE_44100 = 44100;

const int MA_SAMPLE_RATE_48000 = 48000;

const int MA_SAMPLE_RATE_88200 = 88200;

const int MA_SAMPLE_RATE_96000 = 96000;

const int MA_SAMPLE_RATE_176400 = 176400;

const int MA_SAMPLE_RATE_192000 = 192000;

const int MA_SAMPLE_RATE_352800 = 352800;

const int MA_SAMPLE_RATE_384000 = 384000;

const int MA_MIN_CHANNELS = 1;

const int MA_MAX_CHANNELS = 32;

const int MA_MIN_SAMPLE_RATE = 8000;

const int MA_MAX_SAMPLE_RATE = 384000;

const int MA_MAX_FILTER_ORDER = 8;

const int MA_STATE_UNINITIALIZED = 0;

const int MA_STATE_STOPPED = 1;

const int MA_STATE_STARTED = 2;

const int MA_STATE_STARTING = 3;

const int MA_STATE_STOPPING = 4;

const int MA_BACKEND_COUNT = 15;

const int MA_DATA_FORMAT_FLAG_EXCLUSIVE_MODE = 2;

const int MA_OPEN_MODE_READ = 1;

const int MA_OPEN_MODE_WRITE = 2;

typedef _c_sched_yield = ffi.Int32 Function();

typedef _dart_sched_yield = int Function();

typedef _c_sched_get_priority_min = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_sched_get_priority_min = int Function(
  int arg0,
);

typedef _c_sched_get_priority_max = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_sched_get_priority_max = int Function(
  int arg0,
);

typedef _c_asctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> arg0,
);

typedef _dart_asctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> arg0,
);

typedef _c_clock = ffi.Uint64 Function();

typedef _dart_clock = int Function();

typedef _c_ctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> arg0,
);

typedef _dart_ctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> arg0,
);

typedef _c_difftime = ffi.Double Function(
  ffi.Int64 arg0,
  ffi.Int64 arg1,
);

typedef _dart_difftime = double Function(
  int arg0,
  int arg1,
);

typedef _c_getdate = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_getdate = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_gmtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> arg0,
);

typedef _dart_gmtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> arg0,
);

typedef _c_localtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> arg0,
);

typedef _dart_localtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> arg0,
);

typedef _c_mktime = ffi.Int64 Function(
  ffi.Pointer<tm> arg0,
);

typedef _dart_mktime = int Function(
  ffi.Pointer<tm> arg0,
);

typedef _c_strftime = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<tm> arg3,
);

typedef _dart_strftime = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<tm> arg3,
);

typedef _c_strptime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<tm> arg2,
);

typedef _dart_strptime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<tm> arg2,
);

typedef _c_time = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
);

typedef _dart_time = int Function(
  ffi.Pointer<ffi.Int64> arg0,
);

typedef _c_tzset = ffi.Void Function();

typedef _dart_tzset = void Function();

typedef _c_asctime_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_asctime_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_ctime_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_ctime_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_gmtime_r = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Pointer<tm> arg1,
);

typedef _dart_gmtime_r = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Pointer<tm> arg1,
);

typedef _c_localtime_r = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Pointer<tm> arg1,
);

typedef _dart_localtime_r = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Pointer<tm> arg1,
);

typedef _c_posix2time = ffi.Int64 Function(
  ffi.Int64 arg0,
);

typedef _dart_posix2time = int Function(
  int arg0,
);

typedef _c_tzsetwall = ffi.Void Function();

typedef _dart_tzsetwall = void Function();

typedef _c_time2posix = ffi.Int64 Function(
  ffi.Int64 arg0,
);

typedef _dart_time2posix = int Function(
  int arg0,
);

typedef _c_timelocal = ffi.Int64 Function(
  ffi.Pointer<tm> arg0,
);

typedef _dart_timelocal = int Function(
  ffi.Pointer<tm> arg0,
);

typedef _c_timegm = ffi.Int64 Function(
  ffi.Pointer<tm> arg0,
);

typedef _dart_timegm = int Function(
  ffi.Pointer<tm> arg0,
);

typedef _c_nanosleep = ffi.Int32 Function(
  ffi.Pointer<timespec> __rqtp,
  ffi.Pointer<timespec> __rmtp,
);

typedef _dart_nanosleep = int Function(
  ffi.Pointer<timespec> __rqtp,
  ffi.Pointer<timespec> __rmtp,
);

typedef _c_clock_getres = ffi.Int32 Function(
  ffi.Int32 __clock_id,
  ffi.Pointer<timespec> __res,
);

typedef _dart_clock_getres = int Function(
  int __clock_id,
  ffi.Pointer<timespec> __res,
);

typedef _c_clock_gettime = ffi.Int32 Function(
  ffi.Int32 __clock_id,
  ffi.Pointer<timespec> __tp,
);

typedef _dart_clock_gettime = int Function(
  int __clock_id,
  ffi.Pointer<timespec> __tp,
);

typedef _c_clock_gettime_nsec_np = ffi.Uint64 Function(
  ffi.Int32 __clock_id,
);

typedef _dart_clock_gettime_nsec_np = int Function(
  int __clock_id,
);

typedef _c_clock_settime = ffi.Int32 Function(
  ffi.Int32 __clock_id,
  ffi.Pointer<timespec> __tp,
);

typedef _dart_clock_settime = int Function(
  int __clock_id,
  ffi.Pointer<timespec> __tp,
);

typedef _c_timespec_get = ffi.Int32 Function(
  ffi.Pointer<timespec> ts,
  ffi.Int32 base,
);

typedef _dart_timespec_get = int Function(
  ffi.Pointer<timespec> ts,
  int base,
);

typedef _c_qos_class_self = ffi.Uint32 Function();

typedef _dart_qos_class_self = int Function();

typedef _c_qos_class_main = ffi.Uint32 Function();

typedef _dart_qos_class_main = int Function();

typedef _c_pthread_attr_set_qos_class_np = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> __attr,
  ffi.Uint32 __qos_class,
  ffi.Int32 __relative_priority,
);

typedef _dart_pthread_attr_set_qos_class_np = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> __attr,
  int __qos_class,
  int __relative_priority,
);

typedef _c_pthread_attr_get_qos_class_np = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> __attr,
  ffi.Pointer<ffi.Uint32> __qos_class,
  ffi.Pointer<ffi.Int32> __relative_priority,
);

typedef _dart_pthread_attr_get_qos_class_np = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> __attr,
  ffi.Pointer<ffi.Uint32> __qos_class,
  ffi.Pointer<ffi.Int32> __relative_priority,
);

typedef _c_pthread_set_qos_class_self_np = ffi.Int32 Function(
  ffi.Uint32 __qos_class,
  ffi.Int32 __relative_priority,
);

typedef _dart_pthread_set_qos_class_self_np = int Function(
  int __qos_class,
  int __relative_priority,
);

typedef _c_pthread_get_qos_class_np = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_t> __pthread,
  ffi.Pointer<ffi.Uint32> __qos_class,
  ffi.Pointer<ffi.Int32> __relative_priority,
);

typedef _dart_pthread_get_qos_class_np = int Function(
  ffi.Pointer<_opaque_pthread_t> __pthread,
  ffi.Pointer<ffi.Uint32> __qos_class,
  ffi.Pointer<ffi.Int32> __relative_priority,
);

typedef _c_pthread_override_qos_class_start_np = ffi.Pointer<pthread_override_s>
    Function(
  ffi.Pointer<_opaque_pthread_t> __pthread,
  ffi.Uint32 __qos_class,
  ffi.Int32 __relative_priority,
);

typedef _dart_pthread_override_qos_class_start_np
    = ffi.Pointer<pthread_override_s> Function(
  ffi.Pointer<_opaque_pthread_t> __pthread,
  int __qos_class,
  int __relative_priority,
);

typedef _c_pthread_override_qos_class_end_np = ffi.Int32 Function(
  ffi.Pointer<pthread_override_s> __override,
);

typedef _dart_pthread_override_qos_class_end_np = int Function(
  ffi.Pointer<pthread_override_s> __override,
);

typedef _typedefC_2 = ffi.Void Function();

typedef _typedefC_3 = ffi.Void Function();

typedef _typedefC_4 = ffi.Void Function();

typedef _c_pthread_atfork = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_3>> arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_4>> arg2,
);

typedef _dart_pthread_atfork = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_3>> arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_4>> arg2,
);

typedef _c_pthread_attr_destroy = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
);

typedef _dart_pthread_attr_destroy = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
);

typedef _c_pthread_attr_getdetachstate = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_attr_getdetachstate = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_attr_getguardsize = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
);

typedef _dart_pthread_attr_getguardsize = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
);

typedef _c_pthread_attr_getinheritsched = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_attr_getinheritsched = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_attr_getschedparam = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<sched_param> arg1,
);

typedef _dart_pthread_attr_getschedparam = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<sched_param> arg1,
);

typedef _c_pthread_attr_getschedpolicy = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_attr_getschedpolicy = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_attr_getscope = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_attr_getscope = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_attr_getstack = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
  ffi.Pointer<ffi.Uint64> arg2,
);

typedef _dart_pthread_attr_getstack = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
  ffi.Pointer<ffi.Uint64> arg2,
);

typedef _c_pthread_attr_getstackaddr = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
);

typedef _dart_pthread_attr_getstackaddr = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
);

typedef _c_pthread_attr_getstacksize = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
);

typedef _dart_pthread_attr_getstacksize = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
);

typedef _c_pthread_attr_init = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
);

typedef _dart_pthread_attr_init = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
);

typedef _c_pthread_attr_setdetachstate = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pthread_attr_setdetachstate = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  int arg1,
);

typedef _c_pthread_attr_setguardsize = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_pthread_attr_setguardsize = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  int arg1,
);

typedef _c_pthread_attr_setinheritsched = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pthread_attr_setinheritsched = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  int arg1,
);

typedef _c_pthread_attr_setschedparam = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<sched_param> arg1,
);

typedef _dart_pthread_attr_setschedparam = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<sched_param> arg1,
);

typedef _c_pthread_attr_setschedpolicy = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pthread_attr_setschedpolicy = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  int arg1,
);

typedef _c_pthread_attr_setscope = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pthread_attr_setscope = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  int arg1,
);

typedef _c_pthread_attr_setstack = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_pthread_attr_setstack = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Void> arg1,
  int arg2,
);

typedef _c_pthread_attr_setstackaddr = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart_pthread_attr_setstackaddr = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _c_pthread_attr_setstacksize = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_pthread_attr_setstacksize = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  int arg1,
);

typedef _c_pthread_cancel = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
);

typedef _dart_pthread_cancel = int Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
);

typedef _c_pthread_cond_broadcast = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
);

typedef _dart_pthread_cond_broadcast = int Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
);

typedef _c_pthread_cond_destroy = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
);

typedef _dart_pthread_cond_destroy = int Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
);

typedef _c_pthread_cond_init = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
  ffi.Pointer<_opaque_pthread_condattr_t> arg1,
);

typedef _dart_pthread_cond_init = int Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
  ffi.Pointer<_opaque_pthread_condattr_t> arg1,
);

typedef _c_pthread_cond_signal = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
);

typedef _dart_pthread_cond_signal = int Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
);

typedef _c_pthread_cond_timedwait = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
  ffi.Pointer<_opaque_pthread_mutex_t> arg1,
  ffi.Pointer<timespec> arg2,
);

typedef _dart_pthread_cond_timedwait = int Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
  ffi.Pointer<_opaque_pthread_mutex_t> arg1,
  ffi.Pointer<timespec> arg2,
);

typedef _c_pthread_cond_wait = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
  ffi.Pointer<_opaque_pthread_mutex_t> arg1,
);

typedef _dart_pthread_cond_wait = int Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
  ffi.Pointer<_opaque_pthread_mutex_t> arg1,
);

typedef _c_pthread_condattr_destroy = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_condattr_t> arg0,
);

typedef _dart_pthread_condattr_destroy = int Function(
  ffi.Pointer<_opaque_pthread_condattr_t> arg0,
);

typedef _c_pthread_condattr_init = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_condattr_t> arg0,
);

typedef _dart_pthread_condattr_init = int Function(
  ffi.Pointer<_opaque_pthread_condattr_t> arg0,
);

typedef _c_pthread_condattr_getpshared = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_condattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_condattr_getpshared = int Function(
  ffi.Pointer<_opaque_pthread_condattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_condattr_setpshared = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_condattr_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pthread_condattr_setpshared = int Function(
  ffi.Pointer<_opaque_pthread_condattr_t> arg0,
  int arg1,
);

typedef _typedefC_5 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_pthread_create = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<_opaque_pthread_t>> arg0,
  ffi.Pointer<_opaque_pthread_attr_t> arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_5>> arg2,
  ffi.Pointer<ffi.Void> arg3,
);

typedef _dart_pthread_create = int Function(
  ffi.Pointer<ffi.Pointer<_opaque_pthread_t>> arg0,
  ffi.Pointer<_opaque_pthread_attr_t> arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_5>> arg2,
  ffi.Pointer<ffi.Void> arg3,
);

typedef _c_pthread_detach = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
);

typedef _dart_pthread_detach = int Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
);

typedef _c_pthread_equal = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  ffi.Pointer<_opaque_pthread_t> arg1,
);

typedef _dart_pthread_equal = int Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  ffi.Pointer<_opaque_pthread_t> arg1,
);

typedef _c_pthread_exit = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_pthread_exit = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_pthread_getconcurrency = ffi.Int32 Function();

typedef _dart_pthread_getconcurrency = int Function();

typedef _c_pthread_getschedparam = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<sched_param> arg2,
);

typedef _dart_pthread_getschedparam = int Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<sched_param> arg2,
);

typedef _c_pthread_getspecific = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 arg0,
);

typedef _dart_pthread_getspecific = ffi.Pointer<ffi.Void> Function(
  int arg0,
);

typedef _c_pthread_join = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
);

typedef _dart_pthread_join = int Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
);

typedef _typedefC_6 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_pthread_key_create = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_6>> arg1,
);

typedef _dart_pthread_key_create = int Function(
  ffi.Pointer<ffi.Uint64> arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_6>> arg1,
);

typedef _c_pthread_key_delete = ffi.Int32 Function(
  ffi.Uint64 arg0,
);

typedef _dart_pthread_key_delete = int Function(
  int arg0,
);

typedef _c_pthread_mutex_destroy = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
);

typedef _dart_pthread_mutex_destroy = int Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
);

typedef _c_pthread_mutex_getprioceiling = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_mutex_getprioceiling = int Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_mutex_init = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg1,
);

typedef _dart_pthread_mutex_init = int Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg1,
);

typedef _c_pthread_mutex_lock = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
);

typedef _dart_pthread_mutex_lock = int Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
);

typedef _c_pthread_mutex_setprioceiling = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _dart_pthread_mutex_setprioceiling = int Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
  int arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _c_pthread_mutex_trylock = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
);

typedef _dart_pthread_mutex_trylock = int Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
);

typedef _c_pthread_mutex_unlock = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
);

typedef _dart_pthread_mutex_unlock = int Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
);

typedef _c_pthread_mutexattr_destroy = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
);

typedef _dart_pthread_mutexattr_destroy = int Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
);

typedef _c_pthread_mutexattr_getprioceiling = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_mutexattr_getprioceiling = int Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_mutexattr_getprotocol = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_mutexattr_getprotocol = int Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_mutexattr_getpshared = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_mutexattr_getpshared = int Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_mutexattr_gettype = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_mutexattr_gettype = int Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_mutexattr_getpolicy_np = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_mutexattr_getpolicy_np = int Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_mutexattr_init = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
);

typedef _dart_pthread_mutexattr_init = int Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
);

typedef _c_pthread_mutexattr_setprioceiling = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pthread_mutexattr_setprioceiling = int Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  int arg1,
);

typedef _c_pthread_mutexattr_setprotocol = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pthread_mutexattr_setprotocol = int Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  int arg1,
);

typedef _c_pthread_mutexattr_setpshared = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pthread_mutexattr_setpshared = int Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  int arg1,
);

typedef _c_pthread_mutexattr_settype = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pthread_mutexattr_settype = int Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  int arg1,
);

typedef _c_pthread_mutexattr_setpolicy_np = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pthread_mutexattr_setpolicy_np = int Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  int arg1,
);

typedef _typedefC_7 = ffi.Void Function();

typedef _c_pthread_once = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_once_t> arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_7>> arg1,
);

typedef _dart_pthread_once = int Function(
  ffi.Pointer<_opaque_pthread_once_t> arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_7>> arg1,
);

typedef _c_pthread_rwlock_destroy = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
);

typedef _dart_pthread_rwlock_destroy = int Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
);

typedef _c_pthread_rwlock_init = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
  ffi.Pointer<_opaque_pthread_rwlockattr_t> arg1,
);

typedef _dart_pthread_rwlock_init = int Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
  ffi.Pointer<_opaque_pthread_rwlockattr_t> arg1,
);

typedef _c_pthread_rwlock_rdlock = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
);

typedef _dart_pthread_rwlock_rdlock = int Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
);

typedef _c_pthread_rwlock_tryrdlock = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
);

typedef _dart_pthread_rwlock_tryrdlock = int Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
);

typedef _c_pthread_rwlock_trywrlock = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
);

typedef _dart_pthread_rwlock_trywrlock = int Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
);

typedef _c_pthread_rwlock_wrlock = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
);

typedef _dart_pthread_rwlock_wrlock = int Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
);

typedef _c_pthread_rwlock_unlock = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
);

typedef _dart_pthread_rwlock_unlock = int Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
);

typedef _c_pthread_rwlockattr_destroy = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_rwlockattr_t> arg0,
);

typedef _dart_pthread_rwlockattr_destroy = int Function(
  ffi.Pointer<_opaque_pthread_rwlockattr_t> arg0,
);

typedef _c_pthread_rwlockattr_getpshared = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_rwlockattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_rwlockattr_getpshared = int Function(
  ffi.Pointer<_opaque_pthread_rwlockattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_rwlockattr_init = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_rwlockattr_t> arg0,
);

typedef _dart_pthread_rwlockattr_init = int Function(
  ffi.Pointer<_opaque_pthread_rwlockattr_t> arg0,
);

typedef _c_pthread_rwlockattr_setpshared = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_rwlockattr_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pthread_rwlockattr_setpshared = int Function(
  ffi.Pointer<_opaque_pthread_rwlockattr_t> arg0,
  int arg1,
);

typedef _c_pthread_self = ffi.Pointer<_opaque_pthread_t> Function();

typedef _dart_pthread_self = ffi.Pointer<_opaque_pthread_t> Function();

typedef _c_pthread_setcancelstate = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_setcancelstate = int Function(
  int arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_setcanceltype = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_setcanceltype = int Function(
  int arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_setconcurrency = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_pthread_setconcurrency = int Function(
  int arg0,
);

typedef _c_pthread_setschedparam = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<sched_param> arg2,
);

typedef _dart_pthread_setschedparam = int Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  int arg1,
  ffi.Pointer<sched_param> arg2,
);

typedef _c_pthread_setspecific = ffi.Int32 Function(
  ffi.Uint64 arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart_pthread_setspecific = int Function(
  int arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _c_pthread_testcancel = ffi.Void Function();

typedef _dart_pthread_testcancel = void Function();

typedef _c_pthread_is_threaded_np = ffi.Int32 Function();

typedef _dart_pthread_is_threaded_np = int Function();

typedef _c_pthread_threadid_np = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
);

typedef _dart_pthread_threadid_np = int Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
);

typedef _c_pthread_getname_np = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_pthread_getname_np = int Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_pthread_setname_np = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_pthread_setname_np = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_pthread_main_np = ffi.Int32 Function();

typedef _dart_pthread_main_np = int Function();

typedef _c_pthread_mach_thread_np = ffi.Uint32 Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
);

typedef _dart_pthread_mach_thread_np = int Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
);

typedef _c_pthread_get_stacksize_np = ffi.Uint64 Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
);

typedef _dart_pthread_get_stacksize_np = int Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
);

typedef _c_pthread_get_stackaddr_np = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
);

typedef _dart_pthread_get_stackaddr_np = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
);

typedef _c_pthread_cond_signal_thread_np = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
  ffi.Pointer<_opaque_pthread_t> arg1,
);

typedef _dart_pthread_cond_signal_thread_np = int Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
  ffi.Pointer<_opaque_pthread_t> arg1,
);

typedef _c_pthread_cond_timedwait_relative_np = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
  ffi.Pointer<_opaque_pthread_mutex_t> arg1,
  ffi.Pointer<timespec> arg2,
);

typedef _dart_pthread_cond_timedwait_relative_np = int Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
  ffi.Pointer<_opaque_pthread_mutex_t> arg1,
  ffi.Pointer<timespec> arg2,
);

typedef _typedefC_8 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_pthread_create_suspended_np = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<_opaque_pthread_t>> arg0,
  ffi.Pointer<_opaque_pthread_attr_t> arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_8>> arg2,
  ffi.Pointer<ffi.Void> arg3,
);

typedef _dart_pthread_create_suspended_np = int Function(
  ffi.Pointer<ffi.Pointer<_opaque_pthread_t>> arg0,
  ffi.Pointer<_opaque_pthread_attr_t> arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_8>> arg2,
  ffi.Pointer<ffi.Void> arg3,
);

typedef _c_pthread_kill = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pthread_kill = int Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  int arg1,
);

typedef _c_pthread_from_mach_thread_np = ffi.Pointer<_opaque_pthread_t>
    Function(
  ffi.Uint32 arg0,
);

typedef _dart_pthread_from_mach_thread_np = ffi.Pointer<_opaque_pthread_t>
    Function(
  int arg0,
);

typedef _c_pthread_sigmask = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Uint32> arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef _dart_pthread_sigmask = int Function(
  int arg0,
  ffi.Pointer<ffi.Uint32> arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef _c_pthread_yield_np = ffi.Void Function();

typedef _dart_pthread_yield_np = void Function();

typedef _c_pthread_jit_write_protect_np = ffi.Void Function(
  ffi.Int32 enabled,
);

typedef _dart_pthread_jit_write_protect_np = void Function(
  int enabled,
);

typedef _c_pthread_jit_write_protect_supported_np = ffi.Int32 Function();

typedef _dart_pthread_jit_write_protect_supported_np = int Function();

typedef _c_pthread_cpu_number_np = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> cpu_number_out,
);

typedef _dart_pthread_cpu_number_np = int Function(
  ffi.Pointer<ffi.Uint64> cpu_number_out,
);

typedef _c_ma_version = ffi.Void Function(
  ffi.Pointer<ffi.Uint32> pMajor,
  ffi.Pointer<ffi.Uint32> pMinor,
  ffi.Pointer<ffi.Uint32> pRevision,
);

typedef _dart_ma_version = void Function(
  ffi.Pointer<ffi.Uint32> pMajor,
  ffi.Pointer<ffi.Uint32> pMinor,
  ffi.Pointer<ffi.Uint32> pRevision,
);

typedef _c_ma_version_string = ffi.Pointer<ffi.Int8> Function();

typedef _dart_ma_version_string = ffi.Pointer<ffi.Int8> Function();

typedef _c_ma_biquad_init = ffi.Int32 Function(
  ffi.Pointer<ma_biquad_config> pConfig,
  ffi.Pointer<ma_biquad> pBQ,
);

typedef _dart_ma_biquad_init = int Function(
  ffi.Pointer<ma_biquad_config> pConfig,
  ffi.Pointer<ma_biquad> pBQ,
);

typedef _c_ma_biquad_reinit = ffi.Int32 Function(
  ffi.Pointer<ma_biquad_config> pConfig,
  ffi.Pointer<ma_biquad> pBQ,
);

typedef _dart_ma_biquad_reinit = int Function(
  ffi.Pointer<ma_biquad_config> pConfig,
  ffi.Pointer<ma_biquad> pBQ,
);

typedef _c_ma_biquad_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_biquad> pBQ,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_biquad_process_pcm_frames = int Function(
  ffi.Pointer<ma_biquad> pBQ,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_biquad_get_latency = ffi.Uint32 Function(
  ffi.Pointer<ma_biquad> pBQ,
);

typedef _dart_ma_biquad_get_latency = int Function(
  ffi.Pointer<ma_biquad> pBQ,
);

typedef _c_ma_lpf1_init = ffi.Int32 Function(
  ffi.Pointer<ma_lpf2_config> pConfig,
  ffi.Pointer<ma_lpf1> pLPF,
);

typedef _dart_ma_lpf1_init = int Function(
  ffi.Pointer<ma_lpf2_config> pConfig,
  ffi.Pointer<ma_lpf1> pLPF,
);

typedef _c_ma_lpf1_reinit = ffi.Int32 Function(
  ffi.Pointer<ma_lpf2_config> pConfig,
  ffi.Pointer<ma_lpf1> pLPF,
);

typedef _dart_ma_lpf1_reinit = int Function(
  ffi.Pointer<ma_lpf2_config> pConfig,
  ffi.Pointer<ma_lpf1> pLPF,
);

typedef _c_ma_lpf1_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_lpf1> pLPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_lpf1_process_pcm_frames = int Function(
  ffi.Pointer<ma_lpf1> pLPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_lpf1_get_latency = ffi.Uint32 Function(
  ffi.Pointer<ma_lpf1> pLPF,
);

typedef _dart_ma_lpf1_get_latency = int Function(
  ffi.Pointer<ma_lpf1> pLPF,
);

typedef _c_ma_lpf2_init = ffi.Int32 Function(
  ffi.Pointer<ma_lpf2_config> pConfig,
  ffi.Pointer<ma_lpf2> pLPF,
);

typedef _dart_ma_lpf2_init = int Function(
  ffi.Pointer<ma_lpf2_config> pConfig,
  ffi.Pointer<ma_lpf2> pLPF,
);

typedef _c_ma_lpf2_reinit = ffi.Int32 Function(
  ffi.Pointer<ma_lpf2_config> pConfig,
  ffi.Pointer<ma_lpf2> pLPF,
);

typedef _dart_ma_lpf2_reinit = int Function(
  ffi.Pointer<ma_lpf2_config> pConfig,
  ffi.Pointer<ma_lpf2> pLPF,
);

typedef _c_ma_lpf2_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_lpf2> pLPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_lpf2_process_pcm_frames = int Function(
  ffi.Pointer<ma_lpf2> pLPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_lpf2_get_latency = ffi.Uint32 Function(
  ffi.Pointer<ma_lpf2> pLPF,
);

typedef _dart_ma_lpf2_get_latency = int Function(
  ffi.Pointer<ma_lpf2> pLPF,
);

typedef _c_ma_lpf_init = ffi.Int32 Function(
  ffi.Pointer<ma_lpf_config> pConfig,
  ffi.Pointer<ma_lpf> pLPF,
);

typedef _dart_ma_lpf_init = int Function(
  ffi.Pointer<ma_lpf_config> pConfig,
  ffi.Pointer<ma_lpf> pLPF,
);

typedef _c_ma_lpf_reinit = ffi.Int32 Function(
  ffi.Pointer<ma_lpf_config> pConfig,
  ffi.Pointer<ma_lpf> pLPF,
);

typedef _dart_ma_lpf_reinit = int Function(
  ffi.Pointer<ma_lpf_config> pConfig,
  ffi.Pointer<ma_lpf> pLPF,
);

typedef _c_ma_lpf_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_lpf> pLPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_lpf_process_pcm_frames = int Function(
  ffi.Pointer<ma_lpf> pLPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_lpf_get_latency = ffi.Uint32 Function(
  ffi.Pointer<ma_lpf> pLPF,
);

typedef _dart_ma_lpf_get_latency = int Function(
  ffi.Pointer<ma_lpf> pLPF,
);

typedef _c_ma_hpf1_init = ffi.Int32 Function(
  ffi.Pointer<ma_hpf2_config> pConfig,
  ffi.Pointer<ma_hpf1> pHPF,
);

typedef _dart_ma_hpf1_init = int Function(
  ffi.Pointer<ma_hpf2_config> pConfig,
  ffi.Pointer<ma_hpf1> pHPF,
);

typedef _c_ma_hpf1_reinit = ffi.Int32 Function(
  ffi.Pointer<ma_hpf2_config> pConfig,
  ffi.Pointer<ma_hpf1> pHPF,
);

typedef _dart_ma_hpf1_reinit = int Function(
  ffi.Pointer<ma_hpf2_config> pConfig,
  ffi.Pointer<ma_hpf1> pHPF,
);

typedef _c_ma_hpf1_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_hpf1> pHPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_hpf1_process_pcm_frames = int Function(
  ffi.Pointer<ma_hpf1> pHPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_hpf1_get_latency = ffi.Uint32 Function(
  ffi.Pointer<ma_hpf1> pHPF,
);

typedef _dart_ma_hpf1_get_latency = int Function(
  ffi.Pointer<ma_hpf1> pHPF,
);

typedef _c_ma_hpf2_init = ffi.Int32 Function(
  ffi.Pointer<ma_hpf2_config> pConfig,
  ffi.Pointer<ma_hpf2> pHPF,
);

typedef _dart_ma_hpf2_init = int Function(
  ffi.Pointer<ma_hpf2_config> pConfig,
  ffi.Pointer<ma_hpf2> pHPF,
);

typedef _c_ma_hpf2_reinit = ffi.Int32 Function(
  ffi.Pointer<ma_hpf2_config> pConfig,
  ffi.Pointer<ma_hpf2> pHPF,
);

typedef _dart_ma_hpf2_reinit = int Function(
  ffi.Pointer<ma_hpf2_config> pConfig,
  ffi.Pointer<ma_hpf2> pHPF,
);

typedef _c_ma_hpf2_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_hpf2> pHPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_hpf2_process_pcm_frames = int Function(
  ffi.Pointer<ma_hpf2> pHPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_hpf2_get_latency = ffi.Uint32 Function(
  ffi.Pointer<ma_hpf2> pHPF,
);

typedef _dart_ma_hpf2_get_latency = int Function(
  ffi.Pointer<ma_hpf2> pHPF,
);

typedef _c_ma_hpf_init = ffi.Int32 Function(
  ffi.Pointer<ma_hpf_config> pConfig,
  ffi.Pointer<ma_hpf> pHPF,
);

typedef _dart_ma_hpf_init = int Function(
  ffi.Pointer<ma_hpf_config> pConfig,
  ffi.Pointer<ma_hpf> pHPF,
);

typedef _c_ma_hpf_reinit = ffi.Int32 Function(
  ffi.Pointer<ma_hpf_config> pConfig,
  ffi.Pointer<ma_hpf> pHPF,
);

typedef _dart_ma_hpf_reinit = int Function(
  ffi.Pointer<ma_hpf_config> pConfig,
  ffi.Pointer<ma_hpf> pHPF,
);

typedef _c_ma_hpf_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_hpf> pHPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_hpf_process_pcm_frames = int Function(
  ffi.Pointer<ma_hpf> pHPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_hpf_get_latency = ffi.Uint32 Function(
  ffi.Pointer<ma_hpf> pHPF,
);

typedef _dart_ma_hpf_get_latency = int Function(
  ffi.Pointer<ma_hpf> pHPF,
);

typedef _c_ma_bpf2_init = ffi.Int32 Function(
  ffi.Pointer<ma_bpf2_config> pConfig,
  ffi.Pointer<ma_bpf2> pBPF,
);

typedef _dart_ma_bpf2_init = int Function(
  ffi.Pointer<ma_bpf2_config> pConfig,
  ffi.Pointer<ma_bpf2> pBPF,
);

typedef _c_ma_bpf2_reinit = ffi.Int32 Function(
  ffi.Pointer<ma_bpf2_config> pConfig,
  ffi.Pointer<ma_bpf2> pBPF,
);

typedef _dart_ma_bpf2_reinit = int Function(
  ffi.Pointer<ma_bpf2_config> pConfig,
  ffi.Pointer<ma_bpf2> pBPF,
);

typedef _c_ma_bpf2_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_bpf2> pBPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_bpf2_process_pcm_frames = int Function(
  ffi.Pointer<ma_bpf2> pBPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_bpf2_get_latency = ffi.Uint32 Function(
  ffi.Pointer<ma_bpf2> pBPF,
);

typedef _dart_ma_bpf2_get_latency = int Function(
  ffi.Pointer<ma_bpf2> pBPF,
);

typedef _c_ma_bpf_init = ffi.Int32 Function(
  ffi.Pointer<ma_bpf_config> pConfig,
  ffi.Pointer<ma_bpf> pBPF,
);

typedef _dart_ma_bpf_init = int Function(
  ffi.Pointer<ma_bpf_config> pConfig,
  ffi.Pointer<ma_bpf> pBPF,
);

typedef _c_ma_bpf_reinit = ffi.Int32 Function(
  ffi.Pointer<ma_bpf_config> pConfig,
  ffi.Pointer<ma_bpf> pBPF,
);

typedef _dart_ma_bpf_reinit = int Function(
  ffi.Pointer<ma_bpf_config> pConfig,
  ffi.Pointer<ma_bpf> pBPF,
);

typedef _c_ma_bpf_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_bpf> pBPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_bpf_process_pcm_frames = int Function(
  ffi.Pointer<ma_bpf> pBPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_bpf_get_latency = ffi.Uint32 Function(
  ffi.Pointer<ma_bpf> pBPF,
);

typedef _dart_ma_bpf_get_latency = int Function(
  ffi.Pointer<ma_bpf> pBPF,
);

typedef _c_ma_notch2_init = ffi.Int32 Function(
  ffi.Pointer<ma_notch2_config> pConfig,
  ffi.Pointer<ma_notch2> pFilter,
);

typedef _dart_ma_notch2_init = int Function(
  ffi.Pointer<ma_notch2_config> pConfig,
  ffi.Pointer<ma_notch2> pFilter,
);

typedef _c_ma_notch2_reinit = ffi.Int32 Function(
  ffi.Pointer<ma_notch2_config> pConfig,
  ffi.Pointer<ma_notch2> pFilter,
);

typedef _dart_ma_notch2_reinit = int Function(
  ffi.Pointer<ma_notch2_config> pConfig,
  ffi.Pointer<ma_notch2> pFilter,
);

typedef _c_ma_notch2_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_notch2> pFilter,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_notch2_process_pcm_frames = int Function(
  ffi.Pointer<ma_notch2> pFilter,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_notch2_get_latency = ffi.Uint32 Function(
  ffi.Pointer<ma_notch2> pFilter,
);

typedef _dart_ma_notch2_get_latency = int Function(
  ffi.Pointer<ma_notch2> pFilter,
);

typedef _c_ma_peak2_init = ffi.Int32 Function(
  ffi.Pointer<ma_peak2_config> pConfig,
  ffi.Pointer<ma_peak2> pFilter,
);

typedef _dart_ma_peak2_init = int Function(
  ffi.Pointer<ma_peak2_config> pConfig,
  ffi.Pointer<ma_peak2> pFilter,
);

typedef _c_ma_peak2_reinit = ffi.Int32 Function(
  ffi.Pointer<ma_peak2_config> pConfig,
  ffi.Pointer<ma_peak2> pFilter,
);

typedef _dart_ma_peak2_reinit = int Function(
  ffi.Pointer<ma_peak2_config> pConfig,
  ffi.Pointer<ma_peak2> pFilter,
);

typedef _c_ma_peak2_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_peak2> pFilter,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_peak2_process_pcm_frames = int Function(
  ffi.Pointer<ma_peak2> pFilter,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_peak2_get_latency = ffi.Uint32 Function(
  ffi.Pointer<ma_peak2> pFilter,
);

typedef _dart_ma_peak2_get_latency = int Function(
  ffi.Pointer<ma_peak2> pFilter,
);

typedef _c_ma_loshelf2_init = ffi.Int32 Function(
  ffi.Pointer<ma_loshelf2_config> pConfig,
  ffi.Pointer<ma_loshelf2> pFilter,
);

typedef _dart_ma_loshelf2_init = int Function(
  ffi.Pointer<ma_loshelf2_config> pConfig,
  ffi.Pointer<ma_loshelf2> pFilter,
);

typedef _c_ma_loshelf2_reinit = ffi.Int32 Function(
  ffi.Pointer<ma_loshelf2_config> pConfig,
  ffi.Pointer<ma_loshelf2> pFilter,
);

typedef _dart_ma_loshelf2_reinit = int Function(
  ffi.Pointer<ma_loshelf2_config> pConfig,
  ffi.Pointer<ma_loshelf2> pFilter,
);

typedef _c_ma_loshelf2_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_loshelf2> pFilter,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_loshelf2_process_pcm_frames = int Function(
  ffi.Pointer<ma_loshelf2> pFilter,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_loshelf2_get_latency = ffi.Uint32 Function(
  ffi.Pointer<ma_loshelf2> pFilter,
);

typedef _dart_ma_loshelf2_get_latency = int Function(
  ffi.Pointer<ma_loshelf2> pFilter,
);

typedef _c_ma_hishelf2_init = ffi.Int32 Function(
  ffi.Pointer<ma_hishelf2_config> pConfig,
  ffi.Pointer<ma_hishelf2> pFilter,
);

typedef _dart_ma_hishelf2_init = int Function(
  ffi.Pointer<ma_hishelf2_config> pConfig,
  ffi.Pointer<ma_hishelf2> pFilter,
);

typedef _c_ma_hishelf2_reinit = ffi.Int32 Function(
  ffi.Pointer<ma_hishelf2_config> pConfig,
  ffi.Pointer<ma_hishelf2> pFilter,
);

typedef _dart_ma_hishelf2_reinit = int Function(
  ffi.Pointer<ma_hishelf2_config> pConfig,
  ffi.Pointer<ma_hishelf2> pFilter,
);

typedef _c_ma_hishelf2_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_hishelf2> pFilter,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_hishelf2_process_pcm_frames = int Function(
  ffi.Pointer<ma_hishelf2> pFilter,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_hishelf2_get_latency = ffi.Uint32 Function(
  ffi.Pointer<ma_hishelf2> pFilter,
);

typedef _dart_ma_hishelf2_get_latency = int Function(
  ffi.Pointer<ma_hishelf2> pFilter,
);

typedef _c_ma_linear_resampler_init = ffi.Int32 Function(
  ffi.Pointer<ma_linear_resampler_config> pConfig,
  ffi.Pointer<ma_linear_resampler> pResampler,
);

typedef _dart_ma_linear_resampler_init = int Function(
  ffi.Pointer<ma_linear_resampler_config> pConfig,
  ffi.Pointer<ma_linear_resampler> pResampler,
);

typedef _c_ma_linear_resampler_uninit = ffi.Void Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
);

typedef _dart_ma_linear_resampler_uninit = void Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
);

typedef _c_ma_linear_resampler_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Pointer<ffi.Uint64> pFrameCountIn,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Uint64> pFrameCountOut,
);

typedef _dart_ma_linear_resampler_process_pcm_frames = int Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Pointer<ffi.Uint64> pFrameCountIn,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Uint64> pFrameCountOut,
);

typedef _c_ma_linear_resampler_set_rate = ffi.Int32 Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
  ffi.Uint32 sampleRateIn,
  ffi.Uint32 sampleRateOut,
);

typedef _dart_ma_linear_resampler_set_rate = int Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
  int sampleRateIn,
  int sampleRateOut,
);

typedef _c_ma_linear_resampler_set_rate_ratio = ffi.Int32 Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
  ffi.Float ratioInOut,
);

typedef _dart_ma_linear_resampler_set_rate_ratio = int Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
  double ratioInOut,
);

typedef _c_ma_linear_resampler_get_required_input_frame_count = ffi.Uint64
    Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
  ffi.Uint64 outputFrameCount,
);

typedef _dart_ma_linear_resampler_get_required_input_frame_count = int Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
  int outputFrameCount,
);

typedef _c_ma_linear_resampler_get_expected_output_frame_count = ffi.Uint64
    Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
  ffi.Uint64 inputFrameCount,
);

typedef _dart_ma_linear_resampler_get_expected_output_frame_count = int
    Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
  int inputFrameCount,
);

typedef _c_ma_linear_resampler_get_input_latency = ffi.Uint64 Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
);

typedef _dart_ma_linear_resampler_get_input_latency = int Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
);

typedef _c_ma_linear_resampler_get_output_latency = ffi.Uint64 Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
);

typedef _dart_ma_linear_resampler_get_output_latency = int Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
);

typedef _c_ma_resampler_init = ffi.Int32 Function(
  ffi.Pointer<ma_resampler_config> pConfig,
  ffi.Pointer<ma_resampler> pResampler,
);

typedef _dart_ma_resampler_init = int Function(
  ffi.Pointer<ma_resampler_config> pConfig,
  ffi.Pointer<ma_resampler> pResampler,
);

typedef _c_ma_resampler_uninit = ffi.Void Function(
  ffi.Pointer<ma_resampler> pResampler,
);

typedef _dart_ma_resampler_uninit = void Function(
  ffi.Pointer<ma_resampler> pResampler,
);

typedef _c_ma_resampler_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_resampler> pResampler,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Pointer<ffi.Uint64> pFrameCountIn,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Uint64> pFrameCountOut,
);

typedef _dart_ma_resampler_process_pcm_frames = int Function(
  ffi.Pointer<ma_resampler> pResampler,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Pointer<ffi.Uint64> pFrameCountIn,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Uint64> pFrameCountOut,
);

typedef _c_ma_resampler_set_rate = ffi.Int32 Function(
  ffi.Pointer<ma_resampler> pResampler,
  ffi.Uint32 sampleRateIn,
  ffi.Uint32 sampleRateOut,
);

typedef _dart_ma_resampler_set_rate = int Function(
  ffi.Pointer<ma_resampler> pResampler,
  int sampleRateIn,
  int sampleRateOut,
);

typedef _c_ma_resampler_set_rate_ratio = ffi.Int32 Function(
  ffi.Pointer<ma_resampler> pResampler,
  ffi.Float ratio,
);

typedef _dart_ma_resampler_set_rate_ratio = int Function(
  ffi.Pointer<ma_resampler> pResampler,
  double ratio,
);

typedef _c_ma_resampler_get_required_input_frame_count = ffi.Uint64 Function(
  ffi.Pointer<ma_resampler> pResampler,
  ffi.Uint64 outputFrameCount,
);

typedef _dart_ma_resampler_get_required_input_frame_count = int Function(
  ffi.Pointer<ma_resampler> pResampler,
  int outputFrameCount,
);

typedef _c_ma_resampler_get_expected_output_frame_count = ffi.Uint64 Function(
  ffi.Pointer<ma_resampler> pResampler,
  ffi.Uint64 inputFrameCount,
);

typedef _dart_ma_resampler_get_expected_output_frame_count = int Function(
  ffi.Pointer<ma_resampler> pResampler,
  int inputFrameCount,
);

typedef _c_ma_resampler_get_input_latency = ffi.Uint64 Function(
  ffi.Pointer<ma_resampler> pResampler,
);

typedef _dart_ma_resampler_get_input_latency = int Function(
  ffi.Pointer<ma_resampler> pResampler,
);

typedef _c_ma_resampler_get_output_latency = ffi.Uint64 Function(
  ffi.Pointer<ma_resampler> pResampler,
);

typedef _dart_ma_resampler_get_output_latency = int Function(
  ffi.Pointer<ma_resampler> pResampler,
);

typedef _c_ma_channel_converter_init = ffi.Int32 Function(
  ffi.Pointer<ma_channel_converter_config> pConfig,
  ffi.Pointer<ma_channel_converter> pConverter,
);

typedef _dart_ma_channel_converter_init = int Function(
  ffi.Pointer<ma_channel_converter_config> pConfig,
  ffi.Pointer<ma_channel_converter> pConverter,
);

typedef _c_ma_channel_converter_uninit = ffi.Void Function(
  ffi.Pointer<ma_channel_converter> pConverter,
);

typedef _dart_ma_channel_converter_uninit = void Function(
  ffi.Pointer<ma_channel_converter> pConverter,
);

typedef _c_ma_channel_converter_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_channel_converter> pConverter,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_channel_converter_process_pcm_frames = int Function(
  ffi.Pointer<ma_channel_converter> pConverter,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_data_converter_init = ffi.Int32 Function(
  ffi.Pointer<ma_data_converter_config> pConfig,
  ffi.Pointer<ma_data_converter> pConverter,
);

typedef _dart_ma_data_converter_init = int Function(
  ffi.Pointer<ma_data_converter_config> pConfig,
  ffi.Pointer<ma_data_converter> pConverter,
);

typedef _c_ma_data_converter_uninit = ffi.Void Function(
  ffi.Pointer<ma_data_converter> pConverter,
);

typedef _dart_ma_data_converter_uninit = void Function(
  ffi.Pointer<ma_data_converter> pConverter,
);

typedef _c_ma_data_converter_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_data_converter> pConverter,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Pointer<ffi.Uint64> pFrameCountIn,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Uint64> pFrameCountOut,
);

typedef _dart_ma_data_converter_process_pcm_frames = int Function(
  ffi.Pointer<ma_data_converter> pConverter,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Pointer<ffi.Uint64> pFrameCountIn,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Uint64> pFrameCountOut,
);

typedef _c_ma_data_converter_set_rate = ffi.Int32 Function(
  ffi.Pointer<ma_data_converter> pConverter,
  ffi.Uint32 sampleRateIn,
  ffi.Uint32 sampleRateOut,
);

typedef _dart_ma_data_converter_set_rate = int Function(
  ffi.Pointer<ma_data_converter> pConverter,
  int sampleRateIn,
  int sampleRateOut,
);

typedef _c_ma_data_converter_set_rate_ratio = ffi.Int32 Function(
  ffi.Pointer<ma_data_converter> pConverter,
  ffi.Float ratioInOut,
);

typedef _dart_ma_data_converter_set_rate_ratio = int Function(
  ffi.Pointer<ma_data_converter> pConverter,
  double ratioInOut,
);

typedef _c_ma_data_converter_get_required_input_frame_count = ffi.Uint64
    Function(
  ffi.Pointer<ma_data_converter> pConverter,
  ffi.Uint64 outputFrameCount,
);

typedef _dart_ma_data_converter_get_required_input_frame_count = int Function(
  ffi.Pointer<ma_data_converter> pConverter,
  int outputFrameCount,
);

typedef _c_ma_data_converter_get_expected_output_frame_count = ffi.Uint64
    Function(
  ffi.Pointer<ma_data_converter> pConverter,
  ffi.Uint64 inputFrameCount,
);

typedef _dart_ma_data_converter_get_expected_output_frame_count = int Function(
  ffi.Pointer<ma_data_converter> pConverter,
  int inputFrameCount,
);

typedef _c_ma_data_converter_get_input_latency = ffi.Uint64 Function(
  ffi.Pointer<ma_data_converter> pConverter,
);

typedef _dart_ma_data_converter_get_input_latency = int Function(
  ffi.Pointer<ma_data_converter> pConverter,
);

typedef _c_ma_data_converter_get_output_latency = ffi.Uint64 Function(
  ffi.Pointer<ma_data_converter> pConverter,
);

typedef _dart_ma_data_converter_get_output_latency = int Function(
  ffi.Pointer<ma_data_converter> pConverter,
);

typedef _c_ma_pcm_u8_to_s16 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_u8_to_s16 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_u8_to_s24 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_u8_to_s24 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_u8_to_s32 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_u8_to_s32 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_u8_to_f32 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_u8_to_f32 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_s16_to_u8 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_s16_to_u8 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_s16_to_s24 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_s16_to_s24 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_s16_to_s32 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_s16_to_s32 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_s16_to_f32 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_s16_to_f32 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_s24_to_u8 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_s24_to_u8 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_s24_to_s16 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_s24_to_s16 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_s24_to_s32 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_s24_to_s32 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_s24_to_f32 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_s24_to_f32 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_s32_to_u8 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_s32_to_u8 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_s32_to_s16 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_s32_to_s16 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_s32_to_s24 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_s32_to_s24 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_s32_to_f32 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_s32_to_f32 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_f32_to_u8 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_f32_to_u8 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_f32_to_s16 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_f32_to_s16 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_f32_to_s24 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_f32_to_s24 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_f32_to_s32 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_f32_to_s32 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_convert = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Int32 formatOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Int32 formatIn,
  ffi.Uint64 sampleCount,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_convert = void Function(
  ffi.Pointer<ffi.Void> pOut,
  int formatOut,
  ffi.Pointer<ffi.Void> pIn,
  int formatIn,
  int sampleCount,
  int ditherMode,
);

typedef _c_ma_convert_pcm_frames_format = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Int32 formatOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Int32 formatIn,
  ffi.Uint64 frameCount,
  ffi.Uint32 channels,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_convert_pcm_frames_format = void Function(
  ffi.Pointer<ffi.Void> pOut,
  int formatOut,
  ffi.Pointer<ffi.Void> pIn,
  int formatIn,
  int frameCount,
  int channels,
  int ditherMode,
);

typedef _c_ma_deinterleave_pcm_frames = ffi.Void Function(
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Uint64 frameCount,
  ffi.Pointer<ffi.Void> pInterleavedPCMFrames,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppDeinterleavedPCMFrames,
);

typedef _dart_ma_deinterleave_pcm_frames = void Function(
  int format,
  int channels,
  int frameCount,
  ffi.Pointer<ffi.Void> pInterleavedPCMFrames,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppDeinterleavedPCMFrames,
);

typedef _c_ma_interleave_pcm_frames = ffi.Void Function(
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Uint64 frameCount,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppDeinterleavedPCMFrames,
  ffi.Pointer<ffi.Void> pInterleavedPCMFrames,
);

typedef _dart_ma_interleave_pcm_frames = void Function(
  int format,
  int channels,
  int frameCount,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppDeinterleavedPCMFrames,
  ffi.Pointer<ffi.Void> pInterleavedPCMFrames,
);

typedef _c_ma_channel_map_init_blank = ffi.Void Function(
  ffi.Uint32 channels,
  ffi.Pointer<ffi.Uint8> pChannelMap,
);

typedef _dart_ma_channel_map_init_blank = void Function(
  int channels,
  ffi.Pointer<ffi.Uint8> pChannelMap,
);

typedef _c_ma_get_standard_channel_map = ffi.Void Function(
  ffi.Int32 standardChannelMap,
  ffi.Uint32 channels,
  ffi.Pointer<ffi.Uint8> pChannelMap,
);

typedef _dart_ma_get_standard_channel_map = void Function(
  int standardChannelMap,
  int channels,
  ffi.Pointer<ffi.Uint8> pChannelMap,
);

typedef _c_ma_channel_map_copy = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> pOut,
  ffi.Pointer<ffi.Uint8> pIn,
  ffi.Uint32 channels,
);

typedef _dart_ma_channel_map_copy = void Function(
  ffi.Pointer<ffi.Uint8> pOut,
  ffi.Pointer<ffi.Uint8> pIn,
  int channels,
);

typedef _c_ma_channel_map_copy_or_default = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> pOut,
  ffi.Pointer<ffi.Uint8> pIn,
  ffi.Uint32 channels,
);

typedef _dart_ma_channel_map_copy_or_default = void Function(
  ffi.Pointer<ffi.Uint8> pOut,
  ffi.Pointer<ffi.Uint8> pIn,
  int channels,
);

typedef _c_ma_channel_map_valid = ffi.Uint32 Function(
  ffi.Uint32 channels,
  ffi.Pointer<ffi.Uint8> pChannelMap,
);

typedef _dart_ma_channel_map_valid = int Function(
  int channels,
  ffi.Pointer<ffi.Uint8> pChannelMap,
);

typedef _c_ma_channel_map_equal = ffi.Uint32 Function(
  ffi.Uint32 channels,
  ffi.Pointer<ffi.Uint8> pChannelMapA,
  ffi.Pointer<ffi.Uint8> pChannelMapB,
);

typedef _dart_ma_channel_map_equal = int Function(
  int channels,
  ffi.Pointer<ffi.Uint8> pChannelMapA,
  ffi.Pointer<ffi.Uint8> pChannelMapB,
);

typedef _c_ma_channel_map_blank = ffi.Uint32 Function(
  ffi.Uint32 channels,
  ffi.Pointer<ffi.Uint8> pChannelMap,
);

typedef _dart_ma_channel_map_blank = int Function(
  int channels,
  ffi.Pointer<ffi.Uint8> pChannelMap,
);

typedef _c_ma_channel_map_contains_channel_position = ffi.Uint32 Function(
  ffi.Uint32 channels,
  ffi.Pointer<ffi.Uint8> pChannelMap,
  ffi.Uint8 channelPosition,
);

typedef _dart_ma_channel_map_contains_channel_position = int Function(
  int channels,
  ffi.Pointer<ffi.Uint8> pChannelMap,
  int channelPosition,
);

typedef _c_ma_convert_frames = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Uint64 frameCountOut,
  ffi.Int32 formatOut,
  ffi.Uint32 channelsOut,
  ffi.Uint32 sampleRateOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 frameCountIn,
  ffi.Int32 formatIn,
  ffi.Uint32 channelsIn,
  ffi.Uint32 sampleRateIn,
);

typedef _dart_ma_convert_frames = int Function(
  ffi.Pointer<ffi.Void> pOut,
  int frameCountOut,
  int formatOut,
  int channelsOut,
  int sampleRateOut,
  ffi.Pointer<ffi.Void> pIn,
  int frameCountIn,
  int formatIn,
  int channelsIn,
  int sampleRateIn,
);

typedef _c_ma_convert_frames_ex = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Uint64 frameCountOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 frameCountIn,
  ffi.Pointer<ma_data_converter_config> pConfig,
);

typedef _dart_ma_convert_frames_ex = int Function(
  ffi.Pointer<ffi.Void> pOut,
  int frameCountOut,
  ffi.Pointer<ffi.Void> pIn,
  int frameCountIn,
  ffi.Pointer<ma_data_converter_config> pConfig,
);

typedef _c_ma_rb_init_ex = ffi.Int32 Function(
  ffi.Uint64 subbufferSizeInBytes,
  ffi.Uint64 subbufferCount,
  ffi.Uint64 subbufferStrideInBytes,
  ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ffi.Pointer<ma_rb> pRB,
);

typedef _dart_ma_rb_init_ex = int Function(
  int subbufferSizeInBytes,
  int subbufferCount,
  int subbufferStrideInBytes,
  ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ffi.Pointer<ma_rb> pRB,
);

typedef _c_ma_rb_init = ffi.Int32 Function(
  ffi.Uint64 bufferSizeInBytes,
  ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ffi.Pointer<ma_rb> pRB,
);

typedef _dart_ma_rb_init = int Function(
  int bufferSizeInBytes,
  ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ffi.Pointer<ma_rb> pRB,
);

typedef _c_ma_rb_uninit = ffi.Void Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _dart_ma_rb_uninit = void Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _c_ma_rb_reset = ffi.Void Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _dart_ma_rb_reset = void Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _c_ma_rb_acquire_read = ffi.Int32 Function(
  ffi.Pointer<ma_rb> pRB,
  ffi.Pointer<ffi.Uint64> pSizeInBytes,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
);

typedef _dart_ma_rb_acquire_read = int Function(
  ffi.Pointer<ma_rb> pRB,
  ffi.Pointer<ffi.Uint64> pSizeInBytes,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
);

typedef _c_ma_rb_commit_read = ffi.Int32 Function(
  ffi.Pointer<ma_rb> pRB,
  ffi.Uint64 sizeInBytes,
  ffi.Pointer<ffi.Void> pBufferOut,
);

typedef _dart_ma_rb_commit_read = int Function(
  ffi.Pointer<ma_rb> pRB,
  int sizeInBytes,
  ffi.Pointer<ffi.Void> pBufferOut,
);

typedef _c_ma_rb_acquire_write = ffi.Int32 Function(
  ffi.Pointer<ma_rb> pRB,
  ffi.Pointer<ffi.Uint64> pSizeInBytes,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
);

typedef _dart_ma_rb_acquire_write = int Function(
  ffi.Pointer<ma_rb> pRB,
  ffi.Pointer<ffi.Uint64> pSizeInBytes,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
);

typedef _c_ma_rb_commit_write = ffi.Int32 Function(
  ffi.Pointer<ma_rb> pRB,
  ffi.Uint64 sizeInBytes,
  ffi.Pointer<ffi.Void> pBufferOut,
);

typedef _dart_ma_rb_commit_write = int Function(
  ffi.Pointer<ma_rb> pRB,
  int sizeInBytes,
  ffi.Pointer<ffi.Void> pBufferOut,
);

typedef _c_ma_rb_seek_read = ffi.Int32 Function(
  ffi.Pointer<ma_rb> pRB,
  ffi.Uint64 offsetInBytes,
);

typedef _dart_ma_rb_seek_read = int Function(
  ffi.Pointer<ma_rb> pRB,
  int offsetInBytes,
);

typedef _c_ma_rb_seek_write = ffi.Int32 Function(
  ffi.Pointer<ma_rb> pRB,
  ffi.Uint64 offsetInBytes,
);

typedef _dart_ma_rb_seek_write = int Function(
  ffi.Pointer<ma_rb> pRB,
  int offsetInBytes,
);

typedef _c_ma_rb_pointer_distance = ffi.Int32 Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _dart_ma_rb_pointer_distance = int Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _c_ma_rb_available_read = ffi.Uint32 Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _dart_ma_rb_available_read = int Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _c_ma_rb_available_write = ffi.Uint32 Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _dart_ma_rb_available_write = int Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _c_ma_rb_get_subbuffer_size = ffi.Uint64 Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _dart_ma_rb_get_subbuffer_size = int Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _c_ma_rb_get_subbuffer_stride = ffi.Uint64 Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _dart_ma_rb_get_subbuffer_stride = int Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _c_ma_rb_get_subbuffer_offset = ffi.Uint64 Function(
  ffi.Pointer<ma_rb> pRB,
  ffi.Uint64 subbufferIndex,
);

typedef _dart_ma_rb_get_subbuffer_offset = int Function(
  ffi.Pointer<ma_rb> pRB,
  int subbufferIndex,
);

typedef _c_ma_rb_get_subbuffer_ptr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ma_rb> pRB,
  ffi.Uint64 subbufferIndex,
  ffi.Pointer<ffi.Void> pBuffer,
);

typedef _dart_ma_rb_get_subbuffer_ptr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ma_rb> pRB,
  int subbufferIndex,
  ffi.Pointer<ffi.Void> pBuffer,
);

typedef _c_ma_pcm_rb_init_ex = ffi.Int32 Function(
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Uint32 subbufferSizeInFrames,
  ffi.Uint32 subbufferCount,
  ffi.Uint32 subbufferStrideInFrames,
  ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _dart_ma_pcm_rb_init_ex = int Function(
  int format,
  int channels,
  int subbufferSizeInFrames,
  int subbufferCount,
  int subbufferStrideInFrames,
  ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _c_ma_pcm_rb_init = ffi.Int32 Function(
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Uint32 bufferSizeInFrames,
  ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _dart_ma_pcm_rb_init = int Function(
  int format,
  int channels,
  int bufferSizeInFrames,
  ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _c_ma_pcm_rb_uninit = ffi.Void Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _dart_ma_pcm_rb_uninit = void Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _c_ma_pcm_rb_reset = ffi.Void Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _dart_ma_pcm_rb_reset = void Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _c_ma_pcm_rb_acquire_read = ffi.Int32 Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  ffi.Pointer<ffi.Uint32> pSizeInFrames,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
);

typedef _dart_ma_pcm_rb_acquire_read = int Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  ffi.Pointer<ffi.Uint32> pSizeInFrames,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
);

typedef _c_ma_pcm_rb_commit_read = ffi.Int32 Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  ffi.Uint32 sizeInFrames,
  ffi.Pointer<ffi.Void> pBufferOut,
);

typedef _dart_ma_pcm_rb_commit_read = int Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  int sizeInFrames,
  ffi.Pointer<ffi.Void> pBufferOut,
);

typedef _c_ma_pcm_rb_acquire_write = ffi.Int32 Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  ffi.Pointer<ffi.Uint32> pSizeInFrames,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
);

typedef _dart_ma_pcm_rb_acquire_write = int Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  ffi.Pointer<ffi.Uint32> pSizeInFrames,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
);

typedef _c_ma_pcm_rb_commit_write = ffi.Int32 Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  ffi.Uint32 sizeInFrames,
  ffi.Pointer<ffi.Void> pBufferOut,
);

typedef _dart_ma_pcm_rb_commit_write = int Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  int sizeInFrames,
  ffi.Pointer<ffi.Void> pBufferOut,
);

typedef _c_ma_pcm_rb_seek_read = ffi.Int32 Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  ffi.Uint32 offsetInFrames,
);

typedef _dart_ma_pcm_rb_seek_read = int Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  int offsetInFrames,
);

typedef _c_ma_pcm_rb_seek_write = ffi.Int32 Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  ffi.Uint32 offsetInFrames,
);

typedef _dart_ma_pcm_rb_seek_write = int Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  int offsetInFrames,
);

typedef _c_ma_pcm_rb_pointer_distance = ffi.Int32 Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _dart_ma_pcm_rb_pointer_distance = int Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _c_ma_pcm_rb_available_read = ffi.Uint32 Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _dart_ma_pcm_rb_available_read = int Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _c_ma_pcm_rb_available_write = ffi.Uint32 Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _dart_ma_pcm_rb_available_write = int Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _c_ma_pcm_rb_get_subbuffer_size = ffi.Uint32 Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _dart_ma_pcm_rb_get_subbuffer_size = int Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _c_ma_pcm_rb_get_subbuffer_stride = ffi.Uint32 Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _dart_ma_pcm_rb_get_subbuffer_stride = int Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _c_ma_pcm_rb_get_subbuffer_offset = ffi.Uint32 Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  ffi.Uint32 subbufferIndex,
);

typedef _dart_ma_pcm_rb_get_subbuffer_offset = int Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  int subbufferIndex,
);

typedef _c_ma_pcm_rb_get_subbuffer_ptr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  ffi.Uint32 subbufferIndex,
  ffi.Pointer<ffi.Void> pBuffer,
);

typedef _dart_ma_pcm_rb_get_subbuffer_ptr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  int subbufferIndex,
  ffi.Pointer<ffi.Void> pBuffer,
);

typedef _c_ma_duplex_rb_init = ffi.Int32 Function(
  ffi.Uint32 inputSampleRate,
  ffi.Int32 captureFormat,
  ffi.Uint32 captureChannels,
  ffi.Uint32 captureSampleRate,
  ffi.Uint32 capturePeriodSizeInFrames,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ffi.Pointer<ma_duplex_rb> pRB,
);

typedef _dart_ma_duplex_rb_init = int Function(
  int inputSampleRate,
  int captureFormat,
  int captureChannels,
  int captureSampleRate,
  int capturePeriodSizeInFrames,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ffi.Pointer<ma_duplex_rb> pRB,
);

typedef _c_ma_duplex_rb_uninit = ffi.Int32 Function(
  ffi.Pointer<ma_duplex_rb> pRB,
);

typedef _dart_ma_duplex_rb_uninit = int Function(
  ffi.Pointer<ma_duplex_rb> pRB,
);

typedef _c_ma_result_description = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 result,
);

typedef _dart_ma_result_description = ffi.Pointer<ffi.Int8> Function(
  int result,
);

typedef _c_ma_malloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 sz,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _dart_ma_malloc = ffi.Pointer<ffi.Void> Function(
  int sz,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _c_ma_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> p,
  ffi.Uint64 sz,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _dart_ma_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> p,
  int sz,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _c_ma_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> p,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _dart_ma_free = void Function(
  ffi.Pointer<ffi.Void> p,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _c_ma_aligned_malloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 sz,
  ffi.Uint64 alignment,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _dart_ma_aligned_malloc = ffi.Pointer<ffi.Void> Function(
  int sz,
  int alignment,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _c_ma_aligned_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> p,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _dart_ma_aligned_free = void Function(
  ffi.Pointer<ffi.Void> p,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _c_ma_get_format_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 format,
);

typedef _dart_ma_get_format_name = ffi.Pointer<ffi.Int8> Function(
  int format,
);

typedef _c_ma_blend_f32 = ffi.Void Function(
  ffi.Pointer<ffi.Float> pOut,
  ffi.Pointer<ffi.Float> pInA,
  ffi.Pointer<ffi.Float> pInB,
  ffi.Float factor,
  ffi.Uint32 channels,
);

typedef _dart_ma_blend_f32 = void Function(
  ffi.Pointer<ffi.Float> pOut,
  ffi.Pointer<ffi.Float> pInA,
  ffi.Pointer<ffi.Float> pInB,
  double factor,
  int channels,
);

typedef _c_ma_get_bytes_per_sample = ffi.Uint32 Function(
  ffi.Int32 format,
);

typedef _dart_ma_get_bytes_per_sample = int Function(
  int format,
);

typedef _c_ma_get_bytes_per_frame = ffi.Uint32 Function(
  ffi.Int32 format,
  ffi.Uint32 channels,
);

typedef _dart_ma_get_bytes_per_frame = int Function(
  int format,
  int channels,
);

typedef _c_ma_log_level_to_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint32 logLevel,
);

typedef _dart_ma_log_level_to_string = ffi.Pointer<ffi.Int8> Function(
  int logLevel,
);

typedef _c_ma_context_init = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> backends,
  ffi.Uint32 backendCount,
  ffi.Pointer<ma_context_config> pConfig,
  ffi.Pointer<ma_context> pContext,
);

typedef _dart_ma_context_init = int Function(
  ffi.Pointer<ffi.Int32> backends,
  int backendCount,
  ffi.Pointer<ma_context_config> pConfig,
  ffi.Pointer<ma_context> pContext,
);

typedef _c_ma_context_uninit = ffi.Int32 Function(
  ffi.Pointer<ma_context> pContext,
);

typedef _dart_ma_context_uninit = int Function(
  ffi.Pointer<ma_context> pContext,
);

typedef _c_ma_context_sizeof = ffi.Uint64 Function();

typedef _dart_ma_context_sizeof = int Function();

typedef ma_enum_devices_callback_proc = ffi.Uint32 Function(
  ffi.Pointer<ma_context>,
  ffi.Int32,
  ffi.Pointer<ma_device_info>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_ma_context_enumerate_devices = ffi.Int32 Function(
  ffi.Pointer<ma_context> pContext,
  ffi.Pointer<ffi.NativeFunction<ma_enum_devices_callback_proc>> callback,
  ffi.Pointer<ffi.Void> pUserData,
);

typedef _dart_ma_context_enumerate_devices = int Function(
  ffi.Pointer<ma_context> pContext,
  ffi.Pointer<ffi.NativeFunction<ma_enum_devices_callback_proc>> callback,
  ffi.Pointer<ffi.Void> pUserData,
);

typedef _c_ma_context_get_devices = ffi.Int32 Function(
  ffi.Pointer<ma_context> pContext,
  ffi.Pointer<ffi.Pointer<ma_device_info>> ppPlaybackDeviceInfos,
  ffi.Pointer<ffi.Uint32> pPlaybackDeviceCount,
  ffi.Pointer<ffi.Pointer<ma_device_info>> ppCaptureDeviceInfos,
  ffi.Pointer<ffi.Uint32> pCaptureDeviceCount,
);

typedef _dart_ma_context_get_devices = int Function(
  ffi.Pointer<ma_context> pContext,
  ffi.Pointer<ffi.Pointer<ma_device_info>> ppPlaybackDeviceInfos,
  ffi.Pointer<ffi.Uint32> pPlaybackDeviceCount,
  ffi.Pointer<ffi.Pointer<ma_device_info>> ppCaptureDeviceInfos,
  ffi.Pointer<ffi.Uint32> pCaptureDeviceCount,
);

typedef _c_ma_context_is_loopback_supported = ffi.Uint32 Function(
  ffi.Pointer<ma_context> pContext,
);

typedef _dart_ma_context_is_loopback_supported = int Function(
  ffi.Pointer<ma_context> pContext,
);

typedef _c_ma_device_init = ffi.Int32 Function(
  ffi.Pointer<ma_context> pContext,
  ffi.Pointer<ma_device_config> pConfig,
  ffi.Pointer<ma_device> pDevice,
);

typedef _dart_ma_device_init = int Function(
  ffi.Pointer<ma_context> pContext,
  ffi.Pointer<ma_device_config> pConfig,
  ffi.Pointer<ma_device> pDevice,
);

typedef _c_ma_device_init_ex = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> backends,
  ffi.Uint32 backendCount,
  ffi.Pointer<ma_context_config> pContextConfig,
  ffi.Pointer<ma_device_config> pConfig,
  ffi.Pointer<ma_device> pDevice,
);

typedef _dart_ma_device_init_ex = int Function(
  ffi.Pointer<ffi.Int32> backends,
  int backendCount,
  ffi.Pointer<ma_context_config> pContextConfig,
  ffi.Pointer<ma_device_config> pConfig,
  ffi.Pointer<ma_device> pDevice,
);

typedef _c_ma_device_uninit = ffi.Void Function(
  ffi.Pointer<ma_device> pDevice,
);

typedef _dart_ma_device_uninit = void Function(
  ffi.Pointer<ma_device> pDevice,
);

typedef _c_ma_device_start = ffi.Int32 Function(
  ffi.Pointer<ma_device> pDevice,
);

typedef _dart_ma_device_start = int Function(
  ffi.Pointer<ma_device> pDevice,
);

typedef _c_ma_device_stop = ffi.Int32 Function(
  ffi.Pointer<ma_device> pDevice,
);

typedef _dart_ma_device_stop = int Function(
  ffi.Pointer<ma_device> pDevice,
);

typedef _c_ma_device_is_started = ffi.Uint32 Function(
  ffi.Pointer<ma_device> pDevice,
);

typedef _dart_ma_device_is_started = int Function(
  ffi.Pointer<ma_device> pDevice,
);

typedef _c_ma_device_get_state = ffi.Uint32 Function(
  ffi.Pointer<ma_device> pDevice,
);

typedef _dart_ma_device_get_state = int Function(
  ffi.Pointer<ma_device> pDevice,
);

typedef _c_ma_device_set_master_volume = ffi.Int32 Function(
  ffi.Pointer<ma_device> pDevice,
  ffi.Float volume,
);

typedef _dart_ma_device_set_master_volume = int Function(
  ffi.Pointer<ma_device> pDevice,
  double volume,
);

typedef _c_ma_device_get_master_volume = ffi.Int32 Function(
  ffi.Pointer<ma_device> pDevice,
  ffi.Pointer<ffi.Float> pVolume,
);

typedef _dart_ma_device_get_master_volume = int Function(
  ffi.Pointer<ma_device> pDevice,
  ffi.Pointer<ffi.Float> pVolume,
);

typedef _c_ma_device_set_master_gain_db = ffi.Int32 Function(
  ffi.Pointer<ma_device> pDevice,
  ffi.Float gainDB,
);

typedef _dart_ma_device_set_master_gain_db = int Function(
  ffi.Pointer<ma_device> pDevice,
  double gainDB,
);

typedef _c_ma_device_get_master_gain_db = ffi.Int32 Function(
  ffi.Pointer<ma_device> pDevice,
  ffi.Pointer<ffi.Float> pGainDB,
);

typedef _dart_ma_device_get_master_gain_db = int Function(
  ffi.Pointer<ma_device> pDevice,
  ffi.Pointer<ffi.Float> pGainDB,
);

typedef _c_ma_device_handle_backend_data_callback = ffi.Int32 Function(
  ffi.Pointer<ma_device> pDevice,
  ffi.Pointer<ffi.Void> pOutput,
  ffi.Pointer<ffi.Void> pInput,
  ffi.Uint32 frameCount,
);

typedef _dart_ma_device_handle_backend_data_callback = int Function(
  ffi.Pointer<ma_device> pDevice,
  ffi.Pointer<ffi.Void> pOutput,
  ffi.Pointer<ffi.Void> pInput,
  int frameCount,
);

typedef _c_ma_get_backend_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 backend,
);

typedef _dart_ma_get_backend_name = ffi.Pointer<ffi.Int8> Function(
  int backend,
);

typedef _c_ma_is_backend_enabled = ffi.Uint32 Function(
  ffi.Int32 backend,
);

typedef _dart_ma_is_backend_enabled = int Function(
  int backend,
);

typedef _c_ma_get_enabled_backends = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> pBackends,
  ffi.Uint64 backendCap,
  ffi.Pointer<ffi.Uint64> pBackendCount,
);

typedef _dart_ma_get_enabled_backends = int Function(
  ffi.Pointer<ffi.Int32> pBackends,
  int backendCap,
  ffi.Pointer<ffi.Uint64> pBackendCount,
);

typedef _c_ma_is_loopback_supported = ffi.Uint32 Function(
  ffi.Int32 backend,
);

typedef _dart_ma_is_loopback_supported = int Function(
  int backend,
);

typedef _c_ma_spinlock_lock = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> pSpinlock,
);

typedef _dart_ma_spinlock_lock = int Function(
  ffi.Pointer<ffi.Uint8> pSpinlock,
);

typedef _c_ma_spinlock_lock_noyield = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> pSpinlock,
);

typedef _dart_ma_spinlock_lock_noyield = int Function(
  ffi.Pointer<ffi.Uint8> pSpinlock,
);

typedef _c_ma_spinlock_unlock = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> pSpinlock,
);

typedef _dart_ma_spinlock_unlock = int Function(
  ffi.Pointer<ffi.Uint8> pSpinlock,
);

typedef _c_ma_mutex_init = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutex_t> pMutex,
);

typedef _dart_ma_mutex_init = int Function(
  ffi.Pointer<_opaque_pthread_mutex_t> pMutex,
);

typedef _c_ma_mutex_uninit = ffi.Void Function(
  ffi.Pointer<_opaque_pthread_mutex_t> pMutex,
);

typedef _dart_ma_mutex_uninit = void Function(
  ffi.Pointer<_opaque_pthread_mutex_t> pMutex,
);

typedef _c_ma_mutex_lock = ffi.Void Function(
  ffi.Pointer<_opaque_pthread_mutex_t> pMutex,
);

typedef _dart_ma_mutex_lock = void Function(
  ffi.Pointer<_opaque_pthread_mutex_t> pMutex,
);

typedef _c_ma_mutex_unlock = ffi.Void Function(
  ffi.Pointer<_opaque_pthread_mutex_t> pMutex,
);

typedef _dart_ma_mutex_unlock = void Function(
  ffi.Pointer<_opaque_pthread_mutex_t> pMutex,
);

typedef _c_ma_event_init = ffi.Int32 Function(
  ffi.Pointer<ma_event> pEvent,
);

typedef _dart_ma_event_init = int Function(
  ffi.Pointer<ma_event> pEvent,
);

typedef _c_ma_event_uninit = ffi.Void Function(
  ffi.Pointer<ma_event> pEvent,
);

typedef _dart_ma_event_uninit = void Function(
  ffi.Pointer<ma_event> pEvent,
);

typedef _c_ma_event_wait = ffi.Int32 Function(
  ffi.Pointer<ma_event> pEvent,
);

typedef _dart_ma_event_wait = int Function(
  ffi.Pointer<ma_event> pEvent,
);

typedef _c_ma_event_signal = ffi.Int32 Function(
  ffi.Pointer<ma_event> pEvent,
);

typedef _dart_ma_event_signal = int Function(
  ffi.Pointer<ma_event> pEvent,
);

typedef _c_ma_scale_buffer_size = ffi.Uint32 Function(
  ffi.Uint32 baseBufferSize,
  ffi.Float scale,
);

typedef _dart_ma_scale_buffer_size = int Function(
  int baseBufferSize,
  double scale,
);

typedef _c_ma_calculate_buffer_size_in_milliseconds_from_frames = ffi.Uint32
    Function(
  ffi.Uint32 bufferSizeInFrames,
  ffi.Uint32 sampleRate,
);

typedef _dart_ma_calculate_buffer_size_in_milliseconds_from_frames = int
    Function(
  int bufferSizeInFrames,
  int sampleRate,
);

typedef _c_ma_calculate_buffer_size_in_frames_from_milliseconds = ffi.Uint32
    Function(
  ffi.Uint32 bufferSizeInMilliseconds,
  ffi.Uint32 sampleRate,
);

typedef _dart_ma_calculate_buffer_size_in_frames_from_milliseconds = int
    Function(
  int bufferSizeInMilliseconds,
  int sampleRate,
);

typedef _c_ma_copy_pcm_frames = ffi.Void Function(
  ffi.Pointer<ffi.Void> dst,
  ffi.Pointer<ffi.Void> src,
  ffi.Uint64 frameCount,
  ffi.Int32 format,
  ffi.Uint32 channels,
);

typedef _dart_ma_copy_pcm_frames = void Function(
  ffi.Pointer<ffi.Void> dst,
  ffi.Pointer<ffi.Void> src,
  int frameCount,
  int format,
  int channels,
);

typedef _c_ma_silence_pcm_frames = ffi.Void Function(
  ffi.Pointer<ffi.Void> p,
  ffi.Uint64 frameCount,
  ffi.Int32 format,
  ffi.Uint32 channels,
);

typedef _dart_ma_silence_pcm_frames = void Function(
  ffi.Pointer<ffi.Void> p,
  int frameCount,
  int format,
  int channels,
);

typedef _c_ma_zero_pcm_frames = ffi.Void Function(
  ffi.Pointer<ffi.Void> p,
  ffi.Uint64 frameCount,
  ffi.Int32 format,
  ffi.Uint32 channels,
);

typedef _dart_ma_zero_pcm_frames = void Function(
  ffi.Pointer<ffi.Void> p,
  int frameCount,
  int format,
  int channels,
);

typedef _c_ma_offset_pcm_frames_ptr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> p,
  ffi.Uint64 offsetInFrames,
  ffi.Int32 format,
  ffi.Uint32 channels,
);

typedef _dart_ma_offset_pcm_frames_ptr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> p,
  int offsetInFrames,
  int format,
  int channels,
);

typedef _c_ma_offset_pcm_frames_const_ptr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> p,
  ffi.Uint64 offsetInFrames,
  ffi.Int32 format,
  ffi.Uint32 channels,
);

typedef _dart_ma_offset_pcm_frames_const_ptr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> p,
  int offsetInFrames,
  int format,
  int channels,
);

typedef _c_ma_clip_samples_f32 = ffi.Void Function(
  ffi.Pointer<ffi.Float> p,
  ffi.Uint64 sampleCount,
);

typedef _dart_ma_clip_samples_f32 = void Function(
  ffi.Pointer<ffi.Float> p,
  int sampleCount,
);

typedef _c_ma_clip_pcm_frames_f32 = ffi.Void Function(
  ffi.Pointer<ffi.Float> p,
  ffi.Uint64 frameCount,
  ffi.Uint32 channels,
);

typedef _dart_ma_clip_pcm_frames_f32 = void Function(
  ffi.Pointer<ffi.Float> p,
  int frameCount,
  int channels,
);

typedef _c_ma_copy_and_apply_volume_factor_u8 = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> pSamplesOut,
  ffi.Pointer<ffi.Uint8> pSamplesIn,
  ffi.Uint64 sampleCount,
  ffi.Float factor,
);

typedef _dart_ma_copy_and_apply_volume_factor_u8 = void Function(
  ffi.Pointer<ffi.Uint8> pSamplesOut,
  ffi.Pointer<ffi.Uint8> pSamplesIn,
  int sampleCount,
  double factor,
);

typedef _c_ma_copy_and_apply_volume_factor_s16 = ffi.Void Function(
  ffi.Pointer<ffi.Int16> pSamplesOut,
  ffi.Pointer<ffi.Int16> pSamplesIn,
  ffi.Uint64 sampleCount,
  ffi.Float factor,
);

typedef _dart_ma_copy_and_apply_volume_factor_s16 = void Function(
  ffi.Pointer<ffi.Int16> pSamplesOut,
  ffi.Pointer<ffi.Int16> pSamplesIn,
  int sampleCount,
  double factor,
);

typedef _c_ma_copy_and_apply_volume_factor_s24 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pSamplesOut,
  ffi.Pointer<ffi.Void> pSamplesIn,
  ffi.Uint64 sampleCount,
  ffi.Float factor,
);

typedef _dart_ma_copy_and_apply_volume_factor_s24 = void Function(
  ffi.Pointer<ffi.Void> pSamplesOut,
  ffi.Pointer<ffi.Void> pSamplesIn,
  int sampleCount,
  double factor,
);

typedef _c_ma_copy_and_apply_volume_factor_s32 = ffi.Void Function(
  ffi.Pointer<ffi.Int32> pSamplesOut,
  ffi.Pointer<ffi.Int32> pSamplesIn,
  ffi.Uint64 sampleCount,
  ffi.Float factor,
);

typedef _dart_ma_copy_and_apply_volume_factor_s32 = void Function(
  ffi.Pointer<ffi.Int32> pSamplesOut,
  ffi.Pointer<ffi.Int32> pSamplesIn,
  int sampleCount,
  double factor,
);

typedef _c_ma_copy_and_apply_volume_factor_f32 = ffi.Void Function(
  ffi.Pointer<ffi.Float> pSamplesOut,
  ffi.Pointer<ffi.Float> pSamplesIn,
  ffi.Uint64 sampleCount,
  ffi.Float factor,
);

typedef _dart_ma_copy_and_apply_volume_factor_f32 = void Function(
  ffi.Pointer<ffi.Float> pSamplesOut,
  ffi.Pointer<ffi.Float> pSamplesIn,
  int sampleCount,
  double factor,
);

typedef _c_ma_apply_volume_factor_u8 = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> pSamples,
  ffi.Uint64 sampleCount,
  ffi.Float factor,
);

typedef _dart_ma_apply_volume_factor_u8 = void Function(
  ffi.Pointer<ffi.Uint8> pSamples,
  int sampleCount,
  double factor,
);

typedef _c_ma_apply_volume_factor_s16 = ffi.Void Function(
  ffi.Pointer<ffi.Int16> pSamples,
  ffi.Uint64 sampleCount,
  ffi.Float factor,
);

typedef _dart_ma_apply_volume_factor_s16 = void Function(
  ffi.Pointer<ffi.Int16> pSamples,
  int sampleCount,
  double factor,
);

typedef _c_ma_apply_volume_factor_s24 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pSamples,
  ffi.Uint64 sampleCount,
  ffi.Float factor,
);

typedef _dart_ma_apply_volume_factor_s24 = void Function(
  ffi.Pointer<ffi.Void> pSamples,
  int sampleCount,
  double factor,
);

typedef _c_ma_apply_volume_factor_s32 = ffi.Void Function(
  ffi.Pointer<ffi.Int32> pSamples,
  ffi.Uint64 sampleCount,
  ffi.Float factor,
);

typedef _dart_ma_apply_volume_factor_s32 = void Function(
  ffi.Pointer<ffi.Int32> pSamples,
  int sampleCount,
  double factor,
);

typedef _c_ma_apply_volume_factor_f32 = ffi.Void Function(
  ffi.Pointer<ffi.Float> pSamples,
  ffi.Uint64 sampleCount,
  ffi.Float factor,
);

typedef _dart_ma_apply_volume_factor_f32 = void Function(
  ffi.Pointer<ffi.Float> pSamples,
  int sampleCount,
  double factor,
);

typedef _c_ma_copy_and_apply_volume_factor_pcm_frames_u8 = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> pPCMFramesOut,
  ffi.Pointer<ffi.Uint8> pPCMFramesIn,
  ffi.Uint64 frameCount,
  ffi.Uint32 channels,
  ffi.Float factor,
);

typedef _dart_ma_copy_and_apply_volume_factor_pcm_frames_u8 = void Function(
  ffi.Pointer<ffi.Uint8> pPCMFramesOut,
  ffi.Pointer<ffi.Uint8> pPCMFramesIn,
  int frameCount,
  int channels,
  double factor,
);

typedef _c_ma_copy_and_apply_volume_factor_pcm_frames_s16 = ffi.Void Function(
  ffi.Pointer<ffi.Int16> pPCMFramesOut,
  ffi.Pointer<ffi.Int16> pPCMFramesIn,
  ffi.Uint64 frameCount,
  ffi.Uint32 channels,
  ffi.Float factor,
);

typedef _dart_ma_copy_and_apply_volume_factor_pcm_frames_s16 = void Function(
  ffi.Pointer<ffi.Int16> pPCMFramesOut,
  ffi.Pointer<ffi.Int16> pPCMFramesIn,
  int frameCount,
  int channels,
  double factor,
);

typedef _c_ma_copy_and_apply_volume_factor_pcm_frames_s24 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pPCMFramesOut,
  ffi.Pointer<ffi.Void> pPCMFramesIn,
  ffi.Uint64 frameCount,
  ffi.Uint32 channels,
  ffi.Float factor,
);

typedef _dart_ma_copy_and_apply_volume_factor_pcm_frames_s24 = void Function(
  ffi.Pointer<ffi.Void> pPCMFramesOut,
  ffi.Pointer<ffi.Void> pPCMFramesIn,
  int frameCount,
  int channels,
  double factor,
);

typedef _c_ma_copy_and_apply_volume_factor_pcm_frames_s32 = ffi.Void Function(
  ffi.Pointer<ffi.Int32> pPCMFramesOut,
  ffi.Pointer<ffi.Int32> pPCMFramesIn,
  ffi.Uint64 frameCount,
  ffi.Uint32 channels,
  ffi.Float factor,
);

typedef _dart_ma_copy_and_apply_volume_factor_pcm_frames_s32 = void Function(
  ffi.Pointer<ffi.Int32> pPCMFramesOut,
  ffi.Pointer<ffi.Int32> pPCMFramesIn,
  int frameCount,
  int channels,
  double factor,
);

typedef _c_ma_copy_and_apply_volume_factor_pcm_frames_f32 = ffi.Void Function(
  ffi.Pointer<ffi.Float> pPCMFramesOut,
  ffi.Pointer<ffi.Float> pPCMFramesIn,
  ffi.Uint64 frameCount,
  ffi.Uint32 channels,
  ffi.Float factor,
);

typedef _dart_ma_copy_and_apply_volume_factor_pcm_frames_f32 = void Function(
  ffi.Pointer<ffi.Float> pPCMFramesOut,
  ffi.Pointer<ffi.Float> pPCMFramesIn,
  int frameCount,
  int channels,
  double factor,
);

typedef _c_ma_copy_and_apply_volume_factor_pcm_frames = ffi.Void Function(
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Float factor,
);

typedef _dart_ma_copy_and_apply_volume_factor_pcm_frames = void Function(
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
  int format,
  int channels,
  double factor,
);

typedef _c_ma_apply_volume_factor_pcm_frames_u8 = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> pFrames,
  ffi.Uint64 frameCount,
  ffi.Uint32 channels,
  ffi.Float factor,
);

typedef _dart_ma_apply_volume_factor_pcm_frames_u8 = void Function(
  ffi.Pointer<ffi.Uint8> pFrames,
  int frameCount,
  int channels,
  double factor,
);

typedef _c_ma_apply_volume_factor_pcm_frames_s16 = ffi.Void Function(
  ffi.Pointer<ffi.Int16> pFrames,
  ffi.Uint64 frameCount,
  ffi.Uint32 channels,
  ffi.Float factor,
);

typedef _dart_ma_apply_volume_factor_pcm_frames_s16 = void Function(
  ffi.Pointer<ffi.Int16> pFrames,
  int frameCount,
  int channels,
  double factor,
);

typedef _c_ma_apply_volume_factor_pcm_frames_s24 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pFrames,
  ffi.Uint64 frameCount,
  ffi.Uint32 channels,
  ffi.Float factor,
);

typedef _dart_ma_apply_volume_factor_pcm_frames_s24 = void Function(
  ffi.Pointer<ffi.Void> pFrames,
  int frameCount,
  int channels,
  double factor,
);

typedef _c_ma_apply_volume_factor_pcm_frames_s32 = ffi.Void Function(
  ffi.Pointer<ffi.Int32> pFrames,
  ffi.Uint64 frameCount,
  ffi.Uint32 channels,
  ffi.Float factor,
);

typedef _dart_ma_apply_volume_factor_pcm_frames_s32 = void Function(
  ffi.Pointer<ffi.Int32> pFrames,
  int frameCount,
  int channels,
  double factor,
);

typedef _c_ma_apply_volume_factor_pcm_frames_f32 = ffi.Void Function(
  ffi.Pointer<ffi.Float> pFrames,
  ffi.Uint64 frameCount,
  ffi.Uint32 channels,
  ffi.Float factor,
);

typedef _dart_ma_apply_volume_factor_pcm_frames_f32 = void Function(
  ffi.Pointer<ffi.Float> pFrames,
  int frameCount,
  int channels,
  double factor,
);

typedef _c_ma_apply_volume_factor_pcm_frames = ffi.Void Function(
  ffi.Pointer<ffi.Void> pFrames,
  ffi.Uint64 frameCount,
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Float factor,
);

typedef _dart_ma_apply_volume_factor_pcm_frames = void Function(
  ffi.Pointer<ffi.Void> pFrames,
  int frameCount,
  int format,
  int channels,
  double factor,
);

typedef _c_ma_factor_to_gain_db = ffi.Float Function(
  ffi.Float factor,
);

typedef _dart_ma_factor_to_gain_db = double Function(
  double factor,
);

typedef _c_ma_gain_db_to_factor = ffi.Float Function(
  ffi.Float gain,
);

typedef _dart_ma_gain_db_to_factor = double Function(
  double gain,
);

typedef _c_ma_data_source_read_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pDataSource,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Uint64 frameCount,
  ffi.Pointer<ffi.Uint64> pFramesRead,
  ffi.Uint32 loop,
);

typedef _dart_ma_data_source_read_pcm_frames = int Function(
  ffi.Pointer<ffi.Void> pDataSource,
  ffi.Pointer<ffi.Void> pFramesOut,
  int frameCount,
  ffi.Pointer<ffi.Uint64> pFramesRead,
  int loop,
);

typedef _c_ma_data_source_seek_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pDataSource,
  ffi.Uint64 frameCount,
  ffi.Pointer<ffi.Uint64> pFramesSeeked,
  ffi.Uint32 loop,
);

typedef _dart_ma_data_source_seek_pcm_frames = int Function(
  ffi.Pointer<ffi.Void> pDataSource,
  int frameCount,
  ffi.Pointer<ffi.Uint64> pFramesSeeked,
  int loop,
);

typedef _c_ma_data_source_seek_to_pcm_frame = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pDataSource,
  ffi.Uint64 frameIndex,
);

typedef _dart_ma_data_source_seek_to_pcm_frame = int Function(
  ffi.Pointer<ffi.Void> pDataSource,
  int frameIndex,
);

typedef _c_ma_data_source_map = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pDataSource,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppFramesOut,
  ffi.Pointer<ffi.Uint64> pFrameCount,
);

typedef _dart_ma_data_source_map = int Function(
  ffi.Pointer<ffi.Void> pDataSource,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppFramesOut,
  ffi.Pointer<ffi.Uint64> pFrameCount,
);

typedef _c_ma_data_source_unmap = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pDataSource,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_data_source_unmap = int Function(
  ffi.Pointer<ffi.Void> pDataSource,
  int frameCount,
);

typedef _c_ma_data_source_get_data_format = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pDataSource,
  ffi.Pointer<ffi.Int32> pFormat,
  ffi.Pointer<ffi.Uint32> pChannels,
  ffi.Pointer<ffi.Uint32> pSampleRate,
);

typedef _dart_ma_data_source_get_data_format = int Function(
  ffi.Pointer<ffi.Void> pDataSource,
  ffi.Pointer<ffi.Int32> pFormat,
  ffi.Pointer<ffi.Uint32> pChannels,
  ffi.Pointer<ffi.Uint32> pSampleRate,
);

typedef _c_ma_data_source_get_cursor_in_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pDataSource,
  ffi.Pointer<ffi.Uint64> pCursor,
);

typedef _dart_ma_data_source_get_cursor_in_pcm_frames = int Function(
  ffi.Pointer<ffi.Void> pDataSource,
  ffi.Pointer<ffi.Uint64> pCursor,
);

typedef _c_ma_data_source_get_length_in_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pDataSource,
  ffi.Pointer<ffi.Uint64> pLength,
);

typedef _dart_ma_data_source_get_length_in_pcm_frames = int Function(
  ffi.Pointer<ffi.Void> pDataSource,
  ffi.Pointer<ffi.Uint64> pLength,
);

typedef _c_ma_audio_buffer_init = ffi.Int32 Function(
  ffi.Pointer<ma_audio_buffer_config> pConfig,
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
);

typedef _dart_ma_audio_buffer_init = int Function(
  ffi.Pointer<ma_audio_buffer_config> pConfig,
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
);

typedef _c_ma_audio_buffer_init_copy = ffi.Int32 Function(
  ffi.Pointer<ma_audio_buffer_config> pConfig,
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
);

typedef _dart_ma_audio_buffer_init_copy = int Function(
  ffi.Pointer<ma_audio_buffer_config> pConfig,
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
);

typedef _c_ma_audio_buffer_alloc_and_init = ffi.Int32 Function(
  ffi.Pointer<ma_audio_buffer_config> pConfig,
  ffi.Pointer<ffi.Pointer<ma_audio_buffer>> ppAudioBuffer,
);

typedef _dart_ma_audio_buffer_alloc_and_init = int Function(
  ffi.Pointer<ma_audio_buffer_config> pConfig,
  ffi.Pointer<ffi.Pointer<ma_audio_buffer>> ppAudioBuffer,
);

typedef _c_ma_audio_buffer_uninit = ffi.Void Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
);

typedef _dart_ma_audio_buffer_uninit = void Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
);

typedef _c_ma_audio_buffer_uninit_and_free = ffi.Void Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
);

typedef _dart_ma_audio_buffer_uninit_and_free = void Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
);

typedef _c_ma_audio_buffer_read_pcm_frames = ffi.Uint64 Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Uint64 frameCount,
  ffi.Uint32 loop,
);

typedef _dart_ma_audio_buffer_read_pcm_frames = int Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ffi.Pointer<ffi.Void> pFramesOut,
  int frameCount,
  int loop,
);

typedef _c_ma_audio_buffer_seek_to_pcm_frame = ffi.Int32 Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ffi.Uint64 frameIndex,
);

typedef _dart_ma_audio_buffer_seek_to_pcm_frame = int Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  int frameIndex,
);

typedef _c_ma_audio_buffer_map = ffi.Int32 Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppFramesOut,
  ffi.Pointer<ffi.Uint64> pFrameCount,
);

typedef _dart_ma_audio_buffer_map = int Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppFramesOut,
  ffi.Pointer<ffi.Uint64> pFrameCount,
);

typedef _c_ma_audio_buffer_unmap = ffi.Int32 Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_audio_buffer_unmap = int Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  int frameCount,
);

typedef _c_ma_audio_buffer_at_end = ffi.Int32 Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
);

typedef _dart_ma_audio_buffer_at_end = int Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
);

typedef _c_ma_audio_buffer_get_available_frames = ffi.Int32 Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ffi.Pointer<ffi.Uint64> pAvailableFrames,
);

typedef _dart_ma_audio_buffer_get_available_frames = int Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ffi.Pointer<ffi.Uint64> pAvailableFrames,
);

typedef _c_ma_vfs_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Uint32 openMode,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pFile,
);

typedef _dart_ma_vfs_open = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  int openMode,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pFile,
);

typedef _c_ma_vfs_open_w = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Uint32 openMode,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pFile,
);

typedef _dart_ma_vfs_open_w = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int32> pFilePath,
  int openMode,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pFile,
);

typedef _c_ma_vfs_close = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Void> file,
);

typedef _dart_ma_vfs_close = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Void> file,
);

typedef _c_ma_vfs_read = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Void> file,
  ffi.Pointer<ffi.Void> pDst,
  ffi.Uint64 sizeInBytes,
  ffi.Pointer<ffi.Uint64> pBytesRead,
);

typedef _dart_ma_vfs_read = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Void> file,
  ffi.Pointer<ffi.Void> pDst,
  int sizeInBytes,
  ffi.Pointer<ffi.Uint64> pBytesRead,
);

typedef _c_ma_vfs_write = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Void> file,
  ffi.Pointer<ffi.Void> pSrc,
  ffi.Uint64 sizeInBytes,
  ffi.Pointer<ffi.Uint64> pBytesWritten,
);

typedef _dart_ma_vfs_write = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Void> file,
  ffi.Pointer<ffi.Void> pSrc,
  int sizeInBytes,
  ffi.Pointer<ffi.Uint64> pBytesWritten,
);

typedef _c_ma_vfs_seek = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Void> file,
  ffi.Int64 offset,
  ffi.Int32 origin,
);

typedef _dart_ma_vfs_seek = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Void> file,
  int offset,
  int origin,
);

typedef _c_ma_vfs_tell = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Void> file,
  ffi.Pointer<ffi.Int64> pCursor,
);

typedef _dart_ma_vfs_tell = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Void> file,
  ffi.Pointer<ffi.Int64> pCursor,
);

typedef _c_ma_vfs_info = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Void> file,
  ffi.Pointer<ma_file_info> pInfo,
);

typedef _dart_ma_vfs_info = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Void> file,
  ffi.Pointer<ma_file_info> pInfo,
);

typedef _c_ma_vfs_open_and_read_file = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppData,
  ffi.Pointer<ffi.Uint64> pSize,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _dart_ma_vfs_open_and_read_file = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppData,
  ffi.Pointer<ffi.Uint64> pSize,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _c_ma_default_vfs_init = ffi.Int32 Function(
  ffi.Pointer<ma_default_vfs> pVFS,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _dart_ma_default_vfs_init = int Function(
  ffi.Pointer<ma_default_vfs> pVFS,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef ma_decoder_read_proc = ffi.Uint64 Function(
  ffi.Pointer<ma_decoder>,
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
);

typedef ma_decoder_seek_proc = ffi.Uint32 Function(
  ffi.Pointer<ma_decoder>,
  ffi.Int32,
  ffi.Int32,
);

typedef _c_ma_decoder_init = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
  ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
  ffi.Pointer<ffi.Void> pUserData,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init = int Function(
  ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
  ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
  ffi.Pointer<ffi.Void> pUserData,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_wav = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
  ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
  ffi.Pointer<ffi.Void> pUserData,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_wav = int Function(
  ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
  ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
  ffi.Pointer<ffi.Void> pUserData,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_flac = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
  ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
  ffi.Pointer<ffi.Void> pUserData,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_flac = int Function(
  ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
  ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
  ffi.Pointer<ffi.Void> pUserData,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_mp3 = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
  ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
  ffi.Pointer<ffi.Void> pUserData,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_mp3 = int Function(
  ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
  ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
  ffi.Pointer<ffi.Void> pUserData,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_vorbis = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
  ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
  ffi.Pointer<ffi.Void> pUserData,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_vorbis = int Function(
  ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
  ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
  ffi.Pointer<ffi.Void> pUserData,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_raw = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
  ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
  ffi.Pointer<ffi.Void> pUserData,
  ffi.Pointer<ma_decoder_config> pConfigIn,
  ffi.Pointer<ma_decoder_config> pConfigOut,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_raw = int Function(
  ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
  ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
  ffi.Pointer<ffi.Void> pUserData,
  ffi.Pointer<ma_decoder_config> pConfigIn,
  ffi.Pointer<ma_decoder_config> pConfigOut,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_memory = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pData,
  ffi.Uint64 dataSize,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_memory = int Function(
  ffi.Pointer<ffi.Void> pData,
  int dataSize,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_memory_wav = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pData,
  ffi.Uint64 dataSize,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_memory_wav = int Function(
  ffi.Pointer<ffi.Void> pData,
  int dataSize,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_memory_flac = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pData,
  ffi.Uint64 dataSize,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_memory_flac = int Function(
  ffi.Pointer<ffi.Void> pData,
  int dataSize,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_memory_mp3 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pData,
  ffi.Uint64 dataSize,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_memory_mp3 = int Function(
  ffi.Pointer<ffi.Void> pData,
  int dataSize,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_memory_vorbis = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pData,
  ffi.Uint64 dataSize,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_memory_vorbis = int Function(
  ffi.Pointer<ffi.Void> pData,
  int dataSize,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_memory_raw = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pData,
  ffi.Uint64 dataSize,
  ffi.Pointer<ma_decoder_config> pConfigIn,
  ffi.Pointer<ma_decoder_config> pConfigOut,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_memory_raw = int Function(
  ffi.Pointer<ffi.Void> pData,
  int dataSize,
  ffi.Pointer<ma_decoder_config> pConfigIn,
  ffi.Pointer<ma_decoder_config> pConfigOut,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_vfs = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_vfs = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_vfs_wav = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_vfs_wav = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_vfs_flac = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_vfs_flac = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_vfs_mp3 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_vfs_mp3 = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_vfs_vorbis = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_vfs_vorbis = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_vfs_w = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_vfs_w = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_vfs_wav_w = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_vfs_wav_w = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_vfs_flac_w = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_vfs_flac_w = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_vfs_mp3_w = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_vfs_mp3_w = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_vfs_vorbis_w = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_vfs_vorbis_w = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_file = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_file = int Function(
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_file_wav = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_file_wav = int Function(
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_file_flac = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_file_flac = int Function(
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_file_mp3 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_file_mp3 = int Function(
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_file_vorbis = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_file_vorbis = int Function(
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_file_w = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_file_w = int Function(
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_file_wav_w = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_file_wav_w = int Function(
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_file_flac_w = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_file_flac_w = int Function(
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_file_mp3_w = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_file_mp3_w = int Function(
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_file_vorbis_w = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_file_vorbis_w = int Function(
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_uninit = ffi.Int32 Function(
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_uninit = int Function(
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_get_cursor_in_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_decoder> pDecoder,
  ffi.Pointer<ffi.Uint64> pCursor,
);

typedef _dart_ma_decoder_get_cursor_in_pcm_frames = int Function(
  ffi.Pointer<ma_decoder> pDecoder,
  ffi.Pointer<ffi.Uint64> pCursor,
);

typedef _c_ma_decoder_get_length_in_pcm_frames = ffi.Uint64 Function(
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_get_length_in_pcm_frames = int Function(
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_read_pcm_frames = ffi.Uint64 Function(
  ffi.Pointer<ma_decoder> pDecoder,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_decoder_read_pcm_frames = int Function(
  ffi.Pointer<ma_decoder> pDecoder,
  ffi.Pointer<ffi.Void> pFramesOut,
  int frameCount,
);

typedef _c_ma_decoder_seek_to_pcm_frame = ffi.Int32 Function(
  ffi.Pointer<ma_decoder> pDecoder,
  ffi.Uint64 frameIndex,
);

typedef _dart_ma_decoder_seek_to_pcm_frame = int Function(
  ffi.Pointer<ma_decoder> pDecoder,
  int frameIndex,
);

typedef _c_ma_decoder_get_available_frames = ffi.Int32 Function(
  ffi.Pointer<ma_decoder> pDecoder,
  ffi.Pointer<ffi.Uint64> pAvailableFrames,
);

typedef _dart_ma_decoder_get_available_frames = int Function(
  ffi.Pointer<ma_decoder> pDecoder,
  ffi.Pointer<ffi.Uint64> pAvailableFrames,
);

typedef _c_ma_decode_from_vfs = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ffi.Uint64> pFrameCountOut,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
);

typedef _dart_ma_decode_from_vfs = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ffi.Uint64> pFrameCountOut,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
);

typedef _c_ma_decode_file = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ffi.Uint64> pFrameCountOut,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
);

typedef _dart_ma_decode_file = int Function(
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ffi.Uint64> pFrameCountOut,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
);

typedef _c_ma_decode_memory = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pData,
  ffi.Uint64 dataSize,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ffi.Uint64> pFrameCountOut,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
);

typedef _dart_ma_decode_memory = int Function(
  ffi.Pointer<ffi.Void> pData,
  int dataSize,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ffi.Uint64> pFrameCountOut,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
);

typedef ma_encoder_write_proc = ffi.Uint64 Function(
  ffi.Pointer<ma_encoder>,
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
);

typedef ma_encoder_seek_proc = ffi.Uint32 Function(
  ffi.Pointer<ma_encoder>,
  ffi.Int32,
  ffi.Int32,
);

typedef _c_ma_encoder_init = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<ma_encoder_write_proc>> onWrite,
  ffi.Pointer<ffi.NativeFunction<ma_encoder_seek_proc>> onSeek,
  ffi.Pointer<ffi.Void> pUserData,
  ffi.Pointer<ma_encoder_config> pConfig,
  ffi.Pointer<ma_encoder> pEncoder,
);

typedef _dart_ma_encoder_init = int Function(
  ffi.Pointer<ffi.NativeFunction<ma_encoder_write_proc>> onWrite,
  ffi.Pointer<ffi.NativeFunction<ma_encoder_seek_proc>> onSeek,
  ffi.Pointer<ffi.Void> pUserData,
  ffi.Pointer<ma_encoder_config> pConfig,
  ffi.Pointer<ma_encoder> pEncoder,
);

typedef _c_ma_encoder_init_file = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_encoder_config> pConfig,
  ffi.Pointer<ma_encoder> pEncoder,
);

typedef _dart_ma_encoder_init_file = int Function(
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_encoder_config> pConfig,
  ffi.Pointer<ma_encoder> pEncoder,
);

typedef _c_ma_encoder_init_file_w = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_encoder_config> pConfig,
  ffi.Pointer<ma_encoder> pEncoder,
);

typedef _dart_ma_encoder_init_file_w = int Function(
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_encoder_config> pConfig,
  ffi.Pointer<ma_encoder> pEncoder,
);

typedef _c_ma_encoder_uninit = ffi.Void Function(
  ffi.Pointer<ma_encoder> pEncoder,
);

typedef _dart_ma_encoder_uninit = void Function(
  ffi.Pointer<ma_encoder> pEncoder,
);

typedef _c_ma_encoder_write_pcm_frames = ffi.Uint64 Function(
  ffi.Pointer<ma_encoder> pEncoder,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_encoder_write_pcm_frames = int Function(
  ffi.Pointer<ma_encoder> pEncoder,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_waveform_init = ffi.Int32 Function(
  ffi.Pointer<ma_waveform_config> pConfig,
  ffi.Pointer<ma_waveform> pWaveform,
);

typedef _dart_ma_waveform_init = int Function(
  ffi.Pointer<ma_waveform_config> pConfig,
  ffi.Pointer<ma_waveform> pWaveform,
);

typedef _c_ma_waveform_read_pcm_frames = ffi.Uint64 Function(
  ffi.Pointer<ma_waveform> pWaveform,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_waveform_read_pcm_frames = int Function(
  ffi.Pointer<ma_waveform> pWaveform,
  ffi.Pointer<ffi.Void> pFramesOut,
  int frameCount,
);

typedef _c_ma_waveform_seek_to_pcm_frame = ffi.Int32 Function(
  ffi.Pointer<ma_waveform> pWaveform,
  ffi.Uint64 frameIndex,
);

typedef _dart_ma_waveform_seek_to_pcm_frame = int Function(
  ffi.Pointer<ma_waveform> pWaveform,
  int frameIndex,
);

typedef _c_ma_waveform_set_amplitude = ffi.Int32 Function(
  ffi.Pointer<ma_waveform> pWaveform,
  ffi.Double amplitude,
);

typedef _dart_ma_waveform_set_amplitude = int Function(
  ffi.Pointer<ma_waveform> pWaveform,
  double amplitude,
);

typedef _c_ma_waveform_set_frequency = ffi.Int32 Function(
  ffi.Pointer<ma_waveform> pWaveform,
  ffi.Double frequency,
);

typedef _dart_ma_waveform_set_frequency = int Function(
  ffi.Pointer<ma_waveform> pWaveform,
  double frequency,
);

typedef _c_ma_waveform_set_type = ffi.Int32 Function(
  ffi.Pointer<ma_waveform> pWaveform,
  ffi.Int32 type,
);

typedef _dart_ma_waveform_set_type = int Function(
  ffi.Pointer<ma_waveform> pWaveform,
  int type,
);

typedef _c_ma_waveform_set_sample_rate = ffi.Int32 Function(
  ffi.Pointer<ma_waveform> pWaveform,
  ffi.Uint32 sampleRate,
);

typedef _dart_ma_waveform_set_sample_rate = int Function(
  ffi.Pointer<ma_waveform> pWaveform,
  int sampleRate,
);

typedef _c_ma_noise_init = ffi.Int32 Function(
  ffi.Pointer<ma_noise_config> pConfig,
  ffi.Pointer<ma_noise> pNoise,
);

typedef _dart_ma_noise_init = int Function(
  ffi.Pointer<ma_noise_config> pConfig,
  ffi.Pointer<ma_noise> pNoise,
);

typedef _c_ma_noise_read_pcm_frames = ffi.Uint64 Function(
  ffi.Pointer<ma_noise> pNoise,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_noise_read_pcm_frames = int Function(
  ffi.Pointer<ma_noise> pNoise,
  ffi.Pointer<ffi.Void> pFramesOut,
  int frameCount,
);

typedef _c_ma_noise_set_amplitude = ffi.Int32 Function(
  ffi.Pointer<ma_noise> pNoise,
  ffi.Double amplitude,
);

typedef _dart_ma_noise_set_amplitude = int Function(
  ffi.Pointer<ma_noise> pNoise,
  double amplitude,
);

typedef _c_ma_noise_set_seed = ffi.Int32 Function(
  ffi.Pointer<ma_noise> pNoise,
  ffi.Int32 seed,
);

typedef _dart_ma_noise_set_seed = int Function(
  ffi.Pointer<ma_noise> pNoise,
  int seed,
);

typedef _c_ma_noise_set_type = ffi.Int32 Function(
  ffi.Pointer<ma_noise> pNoise,
  ffi.Int32 type,
);

typedef _dart_ma_noise_set_type = int Function(
  ffi.Pointer<ma_noise> pNoise,
  int type,
);

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_9 = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64,
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_10 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_11 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_12 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Pointer<ffi.Uint64>,
);

typedef _typedefC_13 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
);

typedef _typedefC_14 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Pointer<ffi.Void>>,
  ffi.Pointer<ffi.Uint64>,
);

typedef _typedefC_15 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
);

typedef _typedefC_16 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int32>,
  ffi.Pointer<ffi.Uint32>,
  ffi.Pointer<ffi.Uint32>,
);

typedef _typedefC_17 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Uint64>,
);

typedef _typedefC_18 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Uint64>,
);

typedef _typedefC_19 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Uint32,
  ffi.Pointer<ffi.Pointer<ffi.Void>>,
);

typedef _typedefC_20 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int32>,
  ffi.Uint32,
  ffi.Pointer<ffi.Pointer<ffi.Void>>,
);

typedef _typedefC_21 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_22 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Pointer<ffi.Uint64>,
);

typedef _typedefC_23 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Pointer<ffi.Uint64>,
);

typedef _typedefC_24 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Int64,
  ffi.Int32,
);

typedef _typedefC_25 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int64>,
);

typedef _typedefC_26 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ma_file_info>,
);
